/* Generated by Cython 0.29.19 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_19"
#define CYTHON_HEX_VERSION 0x001D13F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__py_libcpp_test
#define __PYX_HAVE_API__py_libcpp_test
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <vector>
#include <map>
#include "autowrap_tools.hpp"
#include "boost/smart_ptr/shared_ptr.hpp"
#include "libcpp_test.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "ascii  # for cython>=0.19"
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "py_libcpp_test.pyx",
};

/* "libcpp_test.pxd":10
 * from smart_ptr cimport shared_ptr
 * 
 * ctypedef unsigned int UInt             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "libcpp_test.hpp":
 */
typedef unsigned int __pyx_t_11libcpp_test_UInt;

/*--- Type declarations ---*/
struct __pyx_obj_14py_libcpp_test_ABS_Impl1;
struct __pyx_obj_14py_libcpp_test_ABS_Impl2;
struct __pyx_obj_14py_libcpp_test_Int;
struct __pyx_obj_14py_libcpp_test_LibCppTest;
struct __pyx_obj_14py_libcpp_test_EEE;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr;
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr;

/* "py_libcpp_test.pyx":27
 *     char * _cast_const_away(char *)
 * 
 * cdef class ABS_Impl1:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _ABS_Impl1
 */
struct __pyx_obj_14py_libcpp_test_ABS_Impl1 {
  PyObject_HEAD
  boost::shared_ptr<ABS_Impl1>  inst;
};


/* "py_libcpp_test.pyx":67
 *         return py_result
 * 
 * cdef class ABS_Impl2:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _ABS_Impl2
 */
struct __pyx_obj_14py_libcpp_test_ABS_Impl2 {
  PyObject_HEAD
  boost::shared_ptr<ABS_Impl2>  inst;
};


/* "py_libcpp_test.pyx":107
 *         return py_result
 * 
 * cdef class Int:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _Int
 */
struct __pyx_obj_14py_libcpp_test_Int {
  PyObject_HEAD
  boost::shared_ptr<Int>  inst;
};


/* "py_libcpp_test.pyx":163
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 * cdef class LibCppTest:             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of _LibCppTest
 */
struct __pyx_obj_14py_libcpp_test_LibCppTest {
  PyObject_HEAD
  boost::shared_ptr<LibCppTest>  inst;
};


/* "py_libcpp_test.pyx":1051
 *             return deref(self_casted.inst.get()) != deref(other_casted.inst.get())
 * 
 * cdef class EEE:             # <<<<<<<<<<<<<<
 *     A = 0
 *     B = 1
 */
struct __pyx_obj_14py_libcpp_test_EEE {
  PyObject_HEAD
};


/* "py_libcpp_test.pyx":267
 *         return py_result
 * 
 *     def process(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "py_libcpp_test.pyx":269
 *     def process(self, list in_0 ):
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_0
 *         _r = self.inst.get().process(v0)
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":336
 *         return py_result
 * 
 *     def process6(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "py_libcpp_test.pyx":338
 *     def process6(self, list in_0 ):
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_pair[int,double]] v0 = in_0
 *         _r = self.inst.get().process6(v0)
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":357
 *         return py_result
 * 
 *     def process8(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "py_libcpp_test.pyx":359
 *     def process8(self, list in_0 ):
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EEE] * v0 = new libcpp_vector[_EEE]()
 *         cdef int item0
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":379
 *         return py_result
 * 
 *     def process9(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "py_libcpp_test.pyx":381
 *     def process9(self, set in_0 ):
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[int] v0 = in_0
 *         _r = self.inst.get().process9(v0)
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "py_libcpp_test.pyx":389
 *         return py_result
 * 
 *     def process10(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "py_libcpp_test.pyx":391
 *     def process10(self, set in_0 ):
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_EEE] * v0 = new libcpp_set[_EEE]()
 *         cdef int item0
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "py_libcpp_test.pyx":412
 *         return py_result
 * 
 *     def process11(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "py_libcpp_test.pyx":414
 *     def process11(self, set in_0 ):
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_LibCppTest] * v0 = new libcpp_set[_LibCppTest]()
 *         cdef LibCppTest item0
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "py_libcpp_test.pyx":497
 *         return py_result
 * 
 *     def process16(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":499
 *     def process16(self, dict in_ ):
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":512
 *         return py_result
 * 
 *     def process17(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":514
 *     def process17(self, dict in_ ):
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[_EEE, float] * v0 = new libcpp_map[_EEE, float]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":527
 *         return py_result
 * 
 *     def process18(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":529
 *     def process18(self, dict in_ ):
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":542
 *         return py_result
 * 
 *     def process19(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":544
 *     def process19(self, dict in_ ):
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":565
 *         del v0
 * 
 *     def process20(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":567
 *     def process20(self, dict in_ ):
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":585
 *         del v0
 * 
 *     def process21(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 {
  PyObject_HEAD
  PyObject *__pyx_v_arg2;
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":587
 *     def process21(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":588
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":621
 *         del v0
 * 
 *     def process211(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 {
  PyObject_HEAD
  PyObject *__pyx_v_arg2;
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":623
 *     def process211(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":624
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *__pyx_outer_scope;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_v_v;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":658
 *         del v0
 * 
 *     def process212(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 {
  PyObject_HEAD
  PyObject *__pyx_v_arg2;
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":660
 *     def process212(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":661
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *__pyx_outer_scope;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_v_v;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
};


/* "py_libcpp_test.pyx":695
 *         del v0
 * 
 *     def process214(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 {
  PyObject_HEAD
  PyObject *__pyx_v_arg2;
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":697
 *     def process214(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *__pyx_outer_scope;
  PyObject *__pyx_v_v;
};


/* "py_libcpp_test.pyx":698
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *__pyx_outer_scope;
  PyObject *__pyx_v_k;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *__pyx_outer_scope;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_v_v;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":732
 *         del v0
 * 
 *     def process22(self, set in_0 , set in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
  PyObject *__pyx_v_in_1;
};


/* "py_libcpp_test.pyx":734
 *     def process22(self, set in_0 , set in_1 ):
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_set[int] v0 = in_0
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "py_libcpp_test.pyx":735
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[int] v0 = in_0
 *         cdef libcpp_set[float] v1 = in_1
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "py_libcpp_test.pyx":744
 *         in_0.update(v0)
 * 
 *     def process23(self, list in_0 , list in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
  PyObject *__pyx_v_in_1;
};


/* "py_libcpp_test.pyx":746
 *     def process23(self, list in_0 , list in_1 ):
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_vector[int] v0 = in_0
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":747
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_0
 *         cdef libcpp_vector[float] v1 = in_1
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":768
 *         in_[:] = [v0.first, v0.second]
 * 
 *     def process25(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":770
 *     def process25(self, list in_ ):
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *         cdef Int item0
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":780
 *         return py_result
 * 
 *     def process26(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":782
 *     def process26(self, list in_ ):
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
};


/* "py_libcpp_test.pyx":797
 *         return py_result
 * 
 *     def process27(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":799
 *     def process27(self, list in_ ):
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec = new libcpp_vector[libcpp_vector[_Int]]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec_rec;
};


/* "py_libcpp_test.pyx":819
 *         return py_result
 * 
 *     def process28(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":821
 *     def process28(self, list in_ ):
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec_rec_rec;
};


/* "py_libcpp_test.pyx":846
 *         return py_result
 * 
 *     def process29(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":848
 *     def process29(self, list in_ ):
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
};


/* "py_libcpp_test.pyx":874
 *         del v0
 * 
 *     def process30(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":876
 *     def process30(self, list in_ ):
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec_rec_rec;
};


/* "py_libcpp_test.pyx":922
 *         del v0
 * 
 *     def process31(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":924
 *     def process31(self, list in_ ):
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_
 *         cdef int _r = self.inst.get().process31(v0)
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "py_libcpp_test.pyx":931
 *         return py_result
 * 
 *     def process32(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 {
  PyObject_HEAD
  PyObject *__pyx_v_in_;
};


/* "py_libcpp_test.pyx":933
 *     def process32(self, list in_ ):
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[int]] v0 = in_
 *         cdef int _r = self.inst.get().process32(v0)
 */
struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
};

struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr {
  PyObject_HEAD
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* py_dict_clear.proto */
#define __Pyx_PyDict_Clear(d) (PyDict_Clear(d), 0)

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__EEE(enum EEE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum EEE __Pyx_PyInt_As_enum__EEE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'AutowrapRefHolder' */

/* Module declarations from 'AutowrapPtrHolder' */

/* Module declarations from 'AutowrapConstPtrHolder' */

/* Module declarations from 'smart_ptr' */

/* Module declarations from 'libcpp_test' */

/* Module declarations from 'py_libcpp_test' */
static PyTypeObject *__pyx_ptype_14py_libcpp_test_ABS_Impl1 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test_ABS_Impl2 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test_Int = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test_LibCppTest = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test_EEE = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct__process = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_2_process6 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_4_process8 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_6_process9 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_7_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_8_process10 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_9_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_10_process11 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_11_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_12_process16 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_13_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_14_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_15_process17 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_16_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_17_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_18_process18 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_19_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_20_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_21_process19 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_22_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_23_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_24_process20 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_25_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_26_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_27_process21 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_28_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_29_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_30_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_31_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_32_process211 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_33_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_34_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_35_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_36_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_37_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_38_process212 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_39_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_40_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_41_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_42_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_43_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_44_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_45_process214 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_46_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_47_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_48_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_49_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_50_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_51_process22 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_52_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_53_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_54_process23 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_55_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_56_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_57_process25 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_58_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_59_process26 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_60_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_61_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_62_process27 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_63_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_64_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_65_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_66_process28 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_67_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_68_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_69_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_70_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_71_process29 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_72_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_73_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_74_process30 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_75_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_76_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_77_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_78_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_79_process31 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_80_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_81_process32 = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_82_genexpr = 0;
static PyTypeObject *__pyx_ptype_14py_libcpp_test___pyx_scope_struct_83_genexpr = 0;
static PyObject *__pyx_f_14py_libcpp_test___pyx_unpickle_EEE__set_state(struct __pyx_obj_14py_libcpp_test_EEE *, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static std::pair<int,double>  __pyx_convert_pair_from_py_int__and_double(PyObject *); /*proto*/
static std::vector<std::pair<int,double> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____double(std::pair<int,double>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___(const std::vector<std::pair<int,double> >  &); /*proto*/
static std::set<int>  __pyx_convert_set_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_set_to_py_int(std::set<int>  const &); /*proto*/
static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &); /*proto*/
static std::pair<int,int>  __pyx_convert_pair_from_py_int__and_int(PyObject *); /*proto*/
static std::vector<std::pair<int,int> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &); /*proto*/
static std::set<float>  __pyx_convert_set_from_py_float(PyObject *); /*proto*/
static PyObject *__pyx_convert_set_to_py_float(std::set<float>  const &); /*proto*/
static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt(const std::vector<__pyx_t_11libcpp_test_UInt>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___(const std::vector<std::vector<__pyx_t_11libcpp_test_UInt> >  &); /*proto*/
#define __Pyx_MODULE_NAME "py_libcpp_test"
extern int __pyx_module_is_main_py_libcpp_test;
int __pyx_module_is_main_py_libcpp_test = 0;

/* Implementation of 'py_libcpp_test' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_i[] = "i";
static const char __pyx_k__8[] = "<";
static const char __pyx_k__9[] = "==";
static const char __pyx_k_in[] = "in_";
static const char __pyx_k_EEE[] = "EEE";
static const char __pyx_k_Int[] = "Int";
static const char __pyx_k__10[] = ">";
static const char __pyx_k__11[] = "<=";
static const char __pyx_k__12[] = "!=";
static const char __pyx_k__13[] = ">=";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_arg2[] = "arg2";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_in_0[] = "in_0";
static const char __pyx_k_in_1[] = "in_1";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_init_0[] = "_init_0";
static const char __pyx_k_init_1[] = "_init_1";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_ABS_Impl1[] = "ABS_Impl1";
static const char __pyx_k_ABS_Impl2[] = "ABS_Impl2";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_LibCppTest[] = "LibCppTest";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_process40_0[] = "_process40_0";
static const char __pyx_k_process40_1[] = "_process40_1";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_py_libcpp_test[] = "py_libcpp_test";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_arg_e_wrong_type[] = "arg e wrong type";
static const char __pyx_k_arg_f_wrong_type[] = "arg f wrong type";
static const char __pyx_k_arg_i_wrong_type[] = "arg i wrong type";
static const char __pyx_k_pyx_unpickle_EEE[] = "__pyx_unpickle_EEE";
static const char __pyx_k_arg_ii_wrong_type[] = "arg ii wrong type";
static const char __pyx_k_arg_in__wrong_type[] = "arg in_ wrong type";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_createUnsafeObject[] = "__createUnsafeObject__";
static const char __pyx_k_arg_arg2_wrong_type[] = "arg arg2 wrong type";
static const char __pyx_k_arg_in_0_wrong_type[] = "arg in_0 wrong type";
static const char __pyx_k_arg_in_1_wrong_type[] = "arg in_1 wrong type";
static const char __pyx_k_can_not_handle_type_of[] = "can not handle type of ";
static const char __pyx_k_process_locals_genexpr[] = "process.<locals>.genexpr";
static const char __pyx_k_process6_locals_genexpr[] = "process6.<locals>.genexpr";
static const char __pyx_k_process8_locals_genexpr[] = "process8.<locals>.genexpr";
static const char __pyx_k_process9_locals_genexpr[] = "process9.<locals>.genexpr";
static const char __pyx_k_process10_locals_genexpr[] = "process10.<locals>.genexpr";
static const char __pyx_k_process11_locals_genexpr[] = "process11.<locals>.genexpr";
static const char __pyx_k_process16_locals_genexpr[] = "process16.<locals>.genexpr";
static const char __pyx_k_process17_locals_genexpr[] = "process17.<locals>.genexpr";
static const char __pyx_k_process18_locals_genexpr[] = "process18.<locals>.genexpr";
static const char __pyx_k_process19_locals_genexpr[] = "process19.<locals>.genexpr";
static const char __pyx_k_process20_locals_genexpr[] = "process20.<locals>.genexpr";
static const char __pyx_k_process21_locals_genexpr[] = "process21.<locals>.genexpr";
static const char __pyx_k_process22_locals_genexpr[] = "process22.<locals>.genexpr";
static const char __pyx_k_process23_locals_genexpr[] = "process23.<locals>.genexpr";
static const char __pyx_k_process25_locals_genexpr[] = "process25.<locals>.genexpr";
static const char __pyx_k_process26_locals_genexpr[] = "process26.<locals>.genexpr";
static const char __pyx_k_process27_locals_genexpr[] = "process27.<locals>.genexpr";
static const char __pyx_k_process28_locals_genexpr[] = "process28.<locals>.genexpr";
static const char __pyx_k_process29_locals_genexpr[] = "process29.<locals>.genexpr";
static const char __pyx_k_process30_locals_genexpr[] = "process30.<locals>.genexpr";
static const char __pyx_k_process31_locals_genexpr[] = "process31.<locals>.genexpr";
static const char __pyx_k_process32_locals_genexpr[] = "process32.<locals>.genexpr";
static const char __pyx_k_process211_locals_genexpr[] = "process211.<locals>.genexpr";
static const char __pyx_k_process212_locals_genexpr[] = "process212.<locals>.genexpr";
static const char __pyx_k_process214_locals_genexpr[] = "process214.<locals>.genexpr";
static const char __pyx_k_process26_locals_genexpr_locals[] = "process26.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process27_locals_genexpr_locals[] = "process27.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process28_locals_genexpr_locals[] = "process28.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process29_locals_genexpr_locals[] = "process29.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process30_locals_genexpr_locals[] = "process30.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process32_locals_genexpr_locals[] = "process32.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_Cannot_access_pointer_that_is_NU[] = "Cannot access pointer that is NULL";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_comparions_operator_s_not_implem[] = "comparions operator %s not implemented";
static const char __pyx_k_process211_locals_genexpr_locals[] = "process211.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process212_locals_genexpr_locals[] = "process212.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process214_locals_genexpr_locals[] = "process214.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_self_inst_cannot_be_converted_to[] = "self.inst cannot be converted to a Python object for pickling";
static const char __pyx_k_process27_locals_genexpr_locals_2[] = "process27.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process28_locals_genexpr_locals_2[] = "process28.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process28_locals_genexpr_locals_3[] = "process28.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process30_locals_genexpr_locals_2[] = "process30.<locals>.genexpr.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process30_locals_genexpr_locals_3[] = "process30.<locals>.genexpr.<locals>.genexpr";
static const char __pyx_k_process212_locals_genexpr_locals_2[] = "process212.<locals>.genexpr.<locals>.genexpr";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_ABS_Impl1;
static PyObject *__pyx_n_s_ABS_Impl2;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_kp_u_Cannot_access_pointer_that_is_NU;
static PyObject *__pyx_n_s_EEE;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_Int;
static PyObject *__pyx_n_s_LibCppTest;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__11;
static PyObject *__pyx_kp_u__12;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_arg2;
static PyObject *__pyx_kp_u_arg_arg2_wrong_type;
static PyObject *__pyx_kp_u_arg_e_wrong_type;
static PyObject *__pyx_kp_u_arg_f_wrong_type;
static PyObject *__pyx_kp_u_arg_i_wrong_type;
static PyObject *__pyx_kp_u_arg_ii_wrong_type;
static PyObject *__pyx_kp_u_arg_in_0_wrong_type;
static PyObject *__pyx_kp_u_arg_in_1_wrong_type;
static PyObject *__pyx_kp_u_arg_in__wrong_type;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_u_can_not_handle_type_of;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_kp_u_comparions_operator_s_not_implem;
static PyObject *__pyx_n_u_createUnsafeObject;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in;
static PyObject *__pyx_n_s_in_0;
static PyObject *__pyx_n_s_in_1;
static PyObject *__pyx_n_s_init_0;
static PyObject *__pyx_n_s_init_1;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_process10_locals_genexpr;
static PyObject *__pyx_n_s_process11_locals_genexpr;
static PyObject *__pyx_n_s_process16_locals_genexpr;
static PyObject *__pyx_n_s_process17_locals_genexpr;
static PyObject *__pyx_n_s_process18_locals_genexpr;
static PyObject *__pyx_n_s_process19_locals_genexpr;
static PyObject *__pyx_n_s_process20_locals_genexpr;
static PyObject *__pyx_n_s_process211_locals_genexpr;
static PyObject *__pyx_n_s_process211_locals_genexpr_locals;
static PyObject *__pyx_n_s_process212_locals_genexpr;
static PyObject *__pyx_n_s_process212_locals_genexpr_locals;
static PyObject *__pyx_n_s_process212_locals_genexpr_locals_2;
static PyObject *__pyx_n_s_process214_locals_genexpr;
static PyObject *__pyx_n_s_process214_locals_genexpr_locals;
static PyObject *__pyx_n_s_process21_locals_genexpr;
static PyObject *__pyx_n_s_process22_locals_genexpr;
static PyObject *__pyx_n_s_process23_locals_genexpr;
static PyObject *__pyx_n_s_process25_locals_genexpr;
static PyObject *__pyx_n_s_process26_locals_genexpr;
static PyObject *__pyx_n_s_process26_locals_genexpr_locals;
static PyObject *__pyx_n_s_process27_locals_genexpr;
static PyObject *__pyx_n_s_process27_locals_genexpr_locals;
static PyObject *__pyx_n_s_process27_locals_genexpr_locals_2;
static PyObject *__pyx_n_s_process28_locals_genexpr;
static PyObject *__pyx_n_s_process28_locals_genexpr_locals;
static PyObject *__pyx_n_s_process28_locals_genexpr_locals_2;
static PyObject *__pyx_n_s_process28_locals_genexpr_locals_3;
static PyObject *__pyx_n_s_process29_locals_genexpr;
static PyObject *__pyx_n_s_process29_locals_genexpr_locals;
static PyObject *__pyx_n_s_process30_locals_genexpr;
static PyObject *__pyx_n_s_process30_locals_genexpr_locals;
static PyObject *__pyx_n_s_process30_locals_genexpr_locals_2;
static PyObject *__pyx_n_s_process30_locals_genexpr_locals_3;
static PyObject *__pyx_n_s_process31_locals_genexpr;
static PyObject *__pyx_n_s_process32_locals_genexpr;
static PyObject *__pyx_n_s_process32_locals_genexpr_locals;
static PyObject *__pyx_n_s_process40_0;
static PyObject *__pyx_n_s_process40_1;
static PyObject *__pyx_n_s_process6_locals_genexpr;
static PyObject *__pyx_n_s_process8_locals_genexpr;
static PyObject *__pyx_n_s_process9_locals_genexpr;
static PyObject *__pyx_n_s_process_locals_genexpr;
static PyObject *__pyx_n_s_py_libcpp_test;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_EEE;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_s_self_inst_cannot_be_converted_to;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_values;
static void __pyx_pf_14py_libcpp_test_9ABS_Impl1___dealloc__(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_2_init_0(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_4_init_1(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static int __pyx_pf_14py_libcpp_test_9ABS_Impl1_6__init__(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_8get(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_14py_libcpp_test_9ABS_Impl2___dealloc__(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_2_init_0(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_4_init_1(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static int __pyx_pf_14py_libcpp_test_9ABS_Impl2_6__init__(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_8get(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_14py_libcpp_test_3Int___dealloc__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self); /* proto */
static int __pyx_pf_14py_libcpp_test_3Int_2i____set__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, PyObject *__pyx_v_i_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3Int_2i__2__get__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3Int_2__copy__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3Int_4__deepcopy__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3Int_6_init_0(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3Int_8_init_1(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_i); /* proto */
static int __pyx_pf_14py_libcpp_test_3Int_10__init__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3Int_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3Int_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_14py_libcpp_test_10LibCppTest___dealloc__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_14py_libcpp_test_10LibCppTest_2__hash__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self); /* proto */
static int __pyx_pf_14py_libcpp_test_10LibCppTest_18integer_vector_ptr___set__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_integer_vector_ptr); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_2__get__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self); /* proto */
static int __pyx_pf_14py_libcpp_test_10LibCppTest_11integer_ptr___set__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_integer_ptr); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_11integer_ptr_2__get__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_4_init_0(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_6_init_1(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_ii); /* proto */
static int __pyx_pf_14py_libcpp_test_10LibCppTest_8__init__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10gett(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_12twist(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_7process_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_14process(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_16process2(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_18process3(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_20process4(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_22process5(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_8process6_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_24process6(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_26process7(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_8process8_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_28process8(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_8process9_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_30process9(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process10_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_32process10(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process11_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_34process11(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_36process12(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_i, float __pyx_v_f); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_38process13(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, int __pyx_v_e, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_40process14(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, int __pyx_v_e, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_42process15(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_ii); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process16_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process16_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_44process16(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process17_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process17_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_46process17(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process18_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process18_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_48process18(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process19_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process19_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_50process19(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process20_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process20_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_52process20(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_6genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_9genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_54process21(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_6genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_9genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_56process211(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_6genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_7genexpr_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_9genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_58process212(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_6genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_9genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_60process214(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process22_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process22_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_62process22(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process23_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process23_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_64process23(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_66process24(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process25_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_68process25(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process26_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process26_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_70process26(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process27_7genexpr_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process27_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process27_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_72process27(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_74process28(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process29_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process29_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_76process29(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_78process30(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process31_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_80process31(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process32_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process32_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_82process32(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_84process33(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_86process34(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_88process35(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_90process36(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_92process37(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_94process38(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_96process39(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_98_process40_0(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_100_process40_1(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_in_); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_102process40(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_104__richcmp__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_106__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_108__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3EEE_getMapping(struct __pyx_obj_14py_libcpp_test_EEE *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3EEE_2__reduce_cython__(struct __pyx_obj_14py_libcpp_test_EEE *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test_3EEE_4__setstate_cython__(struct __pyx_obj_14py_libcpp_test_EEE *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14py_libcpp_test___pyx_unpickle_EEE(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_14py_libcpp_test_ABS_Impl1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test_ABS_Impl2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test_Int(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test_LibCppTest(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test_EEE(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct__process(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_2_process6(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_4_process8(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_6_process9(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_8_process10(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_9_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_10_process11(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_12_process16(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_13_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_15_process17(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_16_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_17_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_18_process18(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_19_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_20_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_21_process19(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_22_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_23_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_24_process20(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_25_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_26_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_27_process21(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_28_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_29_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_30_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_31_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_32_process211(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_33_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_34_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_35_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_36_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_37_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_38_process212(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_39_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_40_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_41_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_42_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_43_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_44_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_45_process214(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_46_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_47_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_48_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_49_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_50_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_51_process22(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_52_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_53_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_54_process23(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_55_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_56_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_57_process25(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_58_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_59_process26(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_60_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_61_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_62_process27(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_63_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_64_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_65_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_66_process28(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_67_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_68_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_69_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_70_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_71_process29(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_72_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_73_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_74_process30(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_75_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_76_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_77_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_78_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_79_process31(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_80_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_81_process32(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_82_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_83_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values = {0, &__pyx_n_s_values, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PySet_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_codeobj__17;
/* Late includes */

/* "py_libcpp_test.pyx":35
 *     cdef shared_ptr[_ABS_Impl1] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_14py_libcpp_test_9ABS_Impl1_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14py_libcpp_test_9ABS_Impl1_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14py_libcpp_test_9ABS_Impl1___dealloc__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14py_libcpp_test_9ABS_Impl1___dealloc__(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_libcpp_test.pyx":36
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_libcpp_test.pyx":35
 *     cdef shared_ptr[_ABS_Impl1] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_libcpp_test.pyx":39
 * 
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ABS_Impl1()"""
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl1_2_init_0[] = "Cython signature: void ABS_Impl1()";
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl1_2_init_0(((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_2_init_0(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":43
 *         pass
 * 
 *     def _init_1(self,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ABS_Impl1(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl1_4_init_1[] = "Cython signature: void ABS_Impl1(int i)";
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl1_4_init_1(((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_4_init_1(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "py_libcpp_test.pyx":45
 *     def _init_1(self,  i ):
 *         """Cython signature: void ABS_Impl1(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_ABS_Impl1](new _ABS_Impl1((<int>i)))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_i_wrong_type);
      __PYX_ERR(1, 45, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":47
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 *         self.inst = shared_ptr[_ABS_Impl1](new _ABS_Impl1((<int>i)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 47, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<ABS_Impl1> (new ABS_Impl1(((int)__pyx_t_4)));

  /* "py_libcpp_test.pyx":43
 *         pass
 * 
 *     def _init_1(self,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ABS_Impl1(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl1._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":49
 *         self.inst = shared_ptr[_ABS_Impl1](new _ABS_Impl1((<int>i)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void ABS_Impl1()
 */

/* Python wrapper */
static int __pyx_pw_14py_libcpp_test_9ABS_Impl1_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl1_6__init__[] = "\n          - Cython signature: void ABS_Impl1()\n          - Cython signature: void ABS_Impl1(int i)\n";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_14py_libcpp_test_9ABS_Impl1_6__init__;
#endif
static int __pyx_pw_14py_libcpp_test_9ABS_Impl1_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl1_6__init__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14py_libcpp_test_9ABS_Impl1_6__init__(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_libcpp_test.pyx":54
 *           - Cython signature: void ABS_Impl1(int i)
 * """
 *         if kwargs.get("__createUnsafeObject__") is True:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_createUnsafeObject, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_True);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "py_libcpp_test.pyx":55
 * """
 *         if kwargs.get("__createUnsafeObject__") is True:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_1(*args)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "py_libcpp_test.pyx":54
 *           - Cython signature: void ABS_Impl1(int i)
 * """
 *         if kwargs.get("__createUnsafeObject__") is True:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":56
 *         if kwargs.get("__createUnsafeObject__") is True:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L6_bool_binop_done:;
  __pyx_t_6 = (__pyx_t_2 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_3)) {

    /* "py_libcpp_test.pyx":57
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "py_libcpp_test.pyx":56
 *         if kwargs.get("__createUnsafeObject__") is True:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":59
 *              self._init_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_args), __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_can_not_handle_type_of, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 59, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "py_libcpp_test.pyx":49
 *         self.inst = shared_ptr[_ABS_Impl1](new _ABS_Impl1((<int>i)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void ABS_Impl1()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl1.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":61
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_9get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl1_8get[] = "Cython signature: int get()";
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_9get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl1_8get(((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_8get(struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "py_libcpp_test.pyx":63
 *     def get(self):
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->get();

  /* "py_libcpp_test.pyx":64
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":65
 *         cdef int _r = self.inst.get().get()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class ABS_Impl2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":61
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl1.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl1_10__reduce_cython__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl1.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl1_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl1_12__setstate_cython__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl1_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl1.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":75
 *     cdef shared_ptr[_ABS_Impl2] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_14py_libcpp_test_9ABS_Impl2_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14py_libcpp_test_9ABS_Impl2_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14py_libcpp_test_9ABS_Impl2___dealloc__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14py_libcpp_test_9ABS_Impl2___dealloc__(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_libcpp_test.pyx":76
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_libcpp_test.pyx":75
 *     cdef shared_ptr[_ABS_Impl2] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_libcpp_test.pyx":79
 * 
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ABS_Impl2()"""
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl2_2_init_0[] = "Cython signature: void ABS_Impl2()";
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl2_2_init_0(((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_2_init_0(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":83
 *         pass
 * 
 *     def _init_1(self,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ABS_Impl2(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl2_4_init_1[] = "Cython signature: void ABS_Impl2(int i)";
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl2_4_init_1(((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_4_init_1(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "py_libcpp_test.pyx":85
 *     def _init_1(self,  i ):
 *         """Cython signature: void ABS_Impl2(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_ABS_Impl2](new _ABS_Impl2((<int>i)))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_i_wrong_type);
      __PYX_ERR(1, 85, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":87
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 *         self.inst = shared_ptr[_ABS_Impl2](new _ABS_Impl2((<int>i)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 87, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<ABS_Impl2> (new ABS_Impl2(((int)__pyx_t_4)));

  /* "py_libcpp_test.pyx":83
 *         pass
 * 
 *     def _init_1(self,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void ABS_Impl2(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl2._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":89
 *         self.inst = shared_ptr[_ABS_Impl2](new _ABS_Impl2((<int>i)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void ABS_Impl2()
 */

/* Python wrapper */
static int __pyx_pw_14py_libcpp_test_9ABS_Impl2_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl2_6__init__[] = "\n          - Cython signature: void ABS_Impl2()\n          - Cython signature: void ABS_Impl2(int i)\n";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_14py_libcpp_test_9ABS_Impl2_6__init__;
#endif
static int __pyx_pw_14py_libcpp_test_9ABS_Impl2_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl2_6__init__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14py_libcpp_test_9ABS_Impl2_6__init__(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_libcpp_test.pyx":94
 *           - Cython signature: void ABS_Impl2(int i)
 * """
 *         if kwargs.get("__createUnsafeObject__") is True:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_createUnsafeObject, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_True);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "py_libcpp_test.pyx":95
 * """
 *         if kwargs.get("__createUnsafeObject__") is True:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_1(*args)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "py_libcpp_test.pyx":94
 *           - Cython signature: void ABS_Impl2(int i)
 * """
 *         if kwargs.get("__createUnsafeObject__") is True:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":96
 *         if kwargs.get("__createUnsafeObject__") is True:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 96, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L6_bool_binop_done:;
  __pyx_t_6 = (__pyx_t_2 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_3)) {

    /* "py_libcpp_test.pyx":97
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "py_libcpp_test.pyx":96
 *         if kwargs.get("__createUnsafeObject__") is True:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":99
 *              self._init_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_args), __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_can_not_handle_type_of, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 99, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "py_libcpp_test.pyx":89
 *         self.inst = shared_ptr[_ABS_Impl2](new _ABS_Impl2((<int>i)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void ABS_Impl2()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":101
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_9get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14py_libcpp_test_9ABS_Impl2_8get[] = "Cython signature: int get()";
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_9get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl2_8get(((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_8get(struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "py_libcpp_test.pyx":103
 *     def get(self):
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->get();

  /* "py_libcpp_test.pyx":104
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":105
 *         cdef int _r = self.inst.get().get()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class Int:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":101
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int get()"""
 *         cdef int _r = self.inst.get().get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl2.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl2_10__reduce_cython__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_9ABS_Impl2_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_9ABS_Impl2_12__setstate_cython__(((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_9ABS_Impl2_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.ABS_Impl2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":114
 *     cdef shared_ptr[_Int] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_14py_libcpp_test_3Int_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14py_libcpp_test_3Int_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14py_libcpp_test_3Int___dealloc__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14py_libcpp_test_3Int___dealloc__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_libcpp_test.pyx":115
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_libcpp_test.pyx":114
 *     cdef shared_ptr[_Int] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_libcpp_test.pyx":119
 * 
 *     property i_:
 *         def __set__(self,  i_):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().i_ = (<int>i_)
 */

/* Python wrapper */
static int __pyx_pw_14py_libcpp_test_3Int_2i__1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_i_); /*proto*/
static int __pyx_pw_14py_libcpp_test_3Int_2i__1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_i_) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_2i____set__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self), ((PyObject *)__pyx_v_i_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14py_libcpp_test_3Int_2i____set__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, PyObject *__pyx_v_i_) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_libcpp_test.pyx":121
 *         def __set__(self,  i_):
 * 
 *             self.inst.get().i_ = (<int>i_)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i_); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 121, __pyx_L1_error)
  __pyx_v_self->inst.get()->i_ = ((int)__pyx_t_1);

  /* "py_libcpp_test.pyx":119
 * 
 *     property i_:
 *         def __set__(self,  i_):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().i_ = (<int>i_)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.Int.i_.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":124
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().i_
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3Int_2i__3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3Int_2i__3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_2i__2__get__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3Int_2i__2__get__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_libcpp_test.pyx":125
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().i_             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->i_;
  __pyx_v__r = __pyx_t_1;

  /* "py_libcpp_test.pyx":126
 *         def __get__(self):
 *             cdef int _r = self.inst.get().i_
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":127
 *             cdef int _r = self.inst.get().i_
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":124
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().i_
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.Int.i_.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":129
 *             return py_result
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3Int_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3Int_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_2__copy__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3Int_2__copy__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self) {
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_rv = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "py_libcpp_test.pyx":130
 * 
 *     def __copy__(self):
 *        cdef Int rv = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 *        return rv
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_rv = ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_libcpp_test.pyx":131
 *     def __copy__(self):
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))             # <<<<<<<<<<<<<<
 *        return rv
 * 
 */
  __pyx_v_rv->inst = boost::shared_ptr<Int> (new Int((*__pyx_v_self->inst.get())));

  /* "py_libcpp_test.pyx":132
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 *        return rv             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memo):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rv));
  __pyx_r = ((PyObject *)__pyx_v_rv);
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":129
 *             return py_result
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.Int.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":134
 *        return rv
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3Int_5__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memo); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3Int_5__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memo) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_4__deepcopy__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self), ((PyObject *)__pyx_v_memo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3Int_4__deepcopy__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo) {
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_rv = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "py_libcpp_test.pyx":135
 * 
 *     def __deepcopy__(self, memo):
 *        cdef Int rv = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 *        return rv
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_rv = ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_libcpp_test.pyx":136
 *     def __deepcopy__(self, memo):
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))             # <<<<<<<<<<<<<<
 *        return rv
 * 
 */
  __pyx_v_rv->inst = boost::shared_ptr<Int> (new Int((*__pyx_v_self->inst.get())));

  /* "py_libcpp_test.pyx":137
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 *        return rv             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self,  i ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rv));
  __pyx_r = ((PyObject *)__pyx_v_rv);
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":134
 *        return rv
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *        cdef Int rv = Int.__new__(Int)
 *        rv.inst = shared_ptr[_Int](new _Int(deref(self.inst.get())))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.Int.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":139
 *        return rv
 * 
 *     def _init_0(self,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Int(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3Int_7_init_0(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_14py_libcpp_test_3Int_6_init_0[] = "Cython signature: void Int(int i)";
static PyObject *__pyx_pw_14py_libcpp_test_3Int_7_init_0(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_6_init_0(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3Int_6_init_0(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "py_libcpp_test.pyx":141
 *     def _init_0(self,  i ):
 *         """Cython signature: void Int(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_Int](new _Int((<int>i)))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_i_wrong_type);
      __PYX_ERR(1, 141, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":143
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 *         self.inst = shared_ptr[_Int](new _Int((<int>i)))             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self, Int i ):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<Int> (new Int(((int)__pyx_t_4)));

  /* "py_libcpp_test.pyx":139
 *        return rv
 * 
 *     def _init_0(self,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Int(int i)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.Int._init_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":145
 *         self.inst = shared_ptr[_Int](new _Int((<int>i)))
 * 
 *     def _init_1(self, Int i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Int(Int & i)"""
 *         assert isinstance(i, Int), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3Int_9_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_14py_libcpp_test_3Int_8_init_1[] = "Cython signature: void Int(Int & i)";
static PyObject *__pyx_pw_14py_libcpp_test_3Int_9_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_i), __pyx_ptype_14py_libcpp_test_Int, 1, "i", 0))) __PYX_ERR(1, 145, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_8_init_1(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_i));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3Int_8_init_1(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "py_libcpp_test.pyx":147
 *     def _init_1(self, Int i ):
 *         """Cython signature: void Int(Int & i)"""
 *         assert isinstance(i, Int), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_Int](new _Int((deref(i.inst.get()))))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_i), __pyx_ptype_14py_libcpp_test_Int); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_i_wrong_type);
      __PYX_ERR(1, 147, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":149
 *         assert isinstance(i, Int), 'arg i wrong type'
 * 
 *         self.inst = shared_ptr[_Int](new _Int((deref(i.inst.get()))))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_v_self->inst = boost::shared_ptr<Int> (new Int((*__pyx_v_i->inst.get())));

  /* "py_libcpp_test.pyx":145
 *         self.inst = shared_ptr[_Int](new _Int((<int>i)))
 * 
 *     def _init_1(self, Int i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Int(Int & i)"""
 *         assert isinstance(i, Int), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.Int._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":151
 *         self.inst = shared_ptr[_Int](new _Int((deref(i.inst.get()))))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void Int(int i)
 */

/* Python wrapper */
static int __pyx_pw_14py_libcpp_test_3Int_11__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_3Int_10__init__[] = "\n          - Cython signature: void Int(int i)\n          - Cython signature: void Int(Int & i)\n";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_14py_libcpp_test_3Int_10__init__;
#endif
static int __pyx_pw_14py_libcpp_test_3Int_11__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_10__init__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14py_libcpp_test_3Int_10__init__(struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_libcpp_test.pyx":156
 *           - Cython signature: void Int(Int & i)
 * """
 *         if (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Int)):
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 156, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_3 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__pyx_t_6 != 0);
  __pyx_t_3 = __pyx_t_5;
  __pyx_L6_bool_binop_done:;
  __pyx_t_5 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "py_libcpp_test.pyx":157
 * """
 *         if (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], Int)):
 *              self._init_1(*args)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "py_libcpp_test.pyx":156
 *           - Cython signature: void Int(Int & i)
 * """
 *         if (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Int)):
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":158
 *         if (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Int)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 158, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_7 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_t_7, __pyx_ptype_14py_libcpp_test_Int); 
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "py_libcpp_test.pyx":159
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Int)):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "py_libcpp_test.pyx":158
 *         if (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Int)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":161
 *              self._init_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 * cdef class LibCppTest:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_args), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_can_not_handle_type_of, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 161, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "py_libcpp_test.pyx":151
 *         self.inst = shared_ptr[_Int](new _Int((deref(i.inst.get()))))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void Int(int i)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("py_libcpp_test.Int.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3Int_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3Int_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_12__reduce_cython__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3Int_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.Int.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3Int_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3Int_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3Int_14__setstate_cython__(((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3Int_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.Int.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":176
 *     cdef shared_ptr[_LibCppTest] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_14py_libcpp_test_10LibCppTest_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14py_libcpp_test_10LibCppTest_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14py_libcpp_test_10LibCppTest___dealloc__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14py_libcpp_test_10LibCppTest___dealloc__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "py_libcpp_test.pyx":177
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "py_libcpp_test.pyx":176
 *     cdef shared_ptr[_LibCppTest] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_libcpp_test.pyx":180
 * 
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *       # The only required property is that objects which compare equal have
 *       # the same hash value:
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_14py_libcpp_test_10LibCppTest_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_14py_libcpp_test_10LibCppTest_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_2__hash__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_14py_libcpp_test_10LibCppTest_2__hash__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "py_libcpp_test.pyx":183
 *       # The only required property is that objects which compare equal have
 *       # the same hash value:
 *       return hash(deref(self.inst.get()).get() )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int((*__pyx_v_self->inst.get()).get()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_hash_t)-1))) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":180
 * 
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *       # The only required property is that objects which compare equal have
 *       # the same hash value:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":187
 * 
 *     property integer_vector_ptr:
 *         def __set__(self, list integer_vector_ptr):             # <<<<<<<<<<<<<<
 *             cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *             cdef Int item0
 */

/* Python wrapper */
static int __pyx_pw_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_integer_vector_ptr); /*proto*/
static int __pyx_pw_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_integer_vector_ptr) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_integer_vector_ptr), (&PyList_Type), 1, "integer_vector_ptr", 1))) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_18integer_vector_ptr___set__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_integer_vector_ptr));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14py_libcpp_test_10LibCppTest_18integer_vector_ptr___set__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_integer_vector_ptr) {
  std::vector<Int>  *__pyx_v_v0;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item0 = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Int>  *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_libcpp_test.pyx":188
 *     property integer_vector_ptr:
 *         def __set__(self, list integer_vector_ptr):
 *             cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()             # <<<<<<<<<<<<<<
 *             cdef Int item0
 *             for item0 in integer_vector_ptr:
 */
  try {
    __pyx_t_1 = new std::vector<Int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 188, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_1;

  /* "py_libcpp_test.pyx":190
 *             cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *             cdef Int item0
 *             for item0 in integer_vector_ptr:             # <<<<<<<<<<<<<<
 *                 v0.push_back(deref(item0.inst.get()))
 *             self.inst.get().integer_vector_ptr = v0
 */
  if (unlikely(__pyx_v_integer_vector_ptr == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 190, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_integer_vector_ptr; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 190, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_14py_libcpp_test_Int))))) __PYX_ERR(1, 190, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item0, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "py_libcpp_test.pyx":191
 *             cdef Int item0
 *             for item0 in integer_vector_ptr:
 *                 v0.push_back(deref(item0.inst.get()))             # <<<<<<<<<<<<<<
 *             self.inst.get().integer_vector_ptr = v0
 * 
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_item0->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 191, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":190
 *             cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *             cdef Int item0
 *             for item0 in integer_vector_ptr:             # <<<<<<<<<<<<<<
 *                 v0.push_back(deref(item0.inst.get()))
 *             self.inst.get().integer_vector_ptr = v0
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":192
 *             for item0 in integer_vector_ptr:
 *                 v0.push_back(deref(item0.inst.get()))
 *             self.inst.get().integer_vector_ptr = v0             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  __pyx_v_self->inst.get()->integer_vector_ptr = __pyx_v_v0;

  /* "py_libcpp_test.pyx":187
 * 
 *     property integer_vector_ptr:
 *         def __set__(self, list integer_vector_ptr):             # <<<<<<<<<<<<<<
 *             cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *             cdef Int item0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.integer_vector_ptr.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":194
 *             self.inst.get().integer_vector_ptr = v0
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.inst.get().integer_vector_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_2__get__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_2__get__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self) {
  std::vector<Int>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<Int> ::iterator __pyx_v_it__r;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_libcpp_test.pyx":195
 * 
 *         def __get__(self):
 *             if self.inst.get().integer_vector_ptr is NULL:             # <<<<<<<<<<<<<<
 *                  raise Exception("Cannot access pointer that is NULL")
 *             _r = deref(self.inst.get().integer_vector_ptr)
 */
  __pyx_t_1 = ((__pyx_v_self->inst.get()->integer_vector_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "py_libcpp_test.pyx":196
 *         def __get__(self):
 *             if self.inst.get().integer_vector_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")             # <<<<<<<<<<<<<<
 *             _r = deref(self.inst.get().integer_vector_ptr)
 *             py_result = []
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 196, __pyx_L1_error)

    /* "py_libcpp_test.pyx":195
 * 
 *         def __get__(self):
 *             if self.inst.get().integer_vector_ptr is NULL:             # <<<<<<<<<<<<<<
 *                  raise Exception("Cannot access pointer that is NULL")
 *             _r = deref(self.inst.get().integer_vector_ptr)
 */
  }

  /* "py_libcpp_test.pyx":197
 *             if self.inst.get().integer_vector_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")
 *             _r = deref(self.inst.get().integer_vector_ptr)             # <<<<<<<<<<<<<<
 *             py_result = []
 *             cdef libcpp_vector[_Int].iterator it__r = _r.begin()
 */
  __pyx_v__r = (*__pyx_v_self->inst.get()->integer_vector_ptr);

  /* "py_libcpp_test.pyx":198
 *                  raise Exception("Cannot access pointer that is NULL")
 *             _r = deref(self.inst.get().integer_vector_ptr)
 *             py_result = []             # <<<<<<<<<<<<<<
 *             cdef libcpp_vector[_Int].iterator it__r = _r.begin()
 *             cdef Int item_py_result
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":199
 *             _r = deref(self.inst.get().integer_vector_ptr)
 *             py_result = []
 *             cdef libcpp_vector[_Int].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *             cdef Int item_py_result
 *             while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":201
 *             cdef libcpp_vector[_Int].iterator it__r = _r.begin()
 *             cdef Int item_py_result
 *             while it__r != _r.end():             # <<<<<<<<<<<<<<
 *                item_py_result = Int.__new__(Int)
 *                item_py_result.inst = shared_ptr[_Int](new _Int(deref(it__r)))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":202
 *             cdef Int item_py_result
 *             while it__r != _r.end():
 *                item_py_result = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *                item_py_result.inst = shared_ptr[_Int](new _Int(deref(it__r)))
 *                py_result.append(item_py_result)
 */
    __pyx_t_2 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 202, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":203
 *             while it__r != _r.end():
 *                item_py_result = Int.__new__(Int)
 *                item_py_result.inst = shared_ptr[_Int](new _Int(deref(it__r)))             # <<<<<<<<<<<<<<
 *                py_result.append(item_py_result)
 *                inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<Int> (new Int((*__pyx_v_it__r)));

    /* "py_libcpp_test.pyx":204
 *                item_py_result = Int.__new__(Int)
 *                item_py_result.inst = shared_ptr[_Int](new _Int(deref(it__r)))
 *                py_result.append(item_py_result)             # <<<<<<<<<<<<<<
 *                inc(it__r)
 *             return py_result
 */
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 204, __pyx_L1_error)

    /* "py_libcpp_test.pyx":205
 *                item_py_result.inst = shared_ptr[_Int](new _Int(deref(it__r)))
 *                py_result.append(item_py_result)
 *                inc(it__r)             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":206
 *                py_result.append(item_py_result)
 *                inc(it__r)
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property integer_ptr:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":194
 *             self.inst.get().integer_vector_ptr = v0
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.inst.get().integer_vector_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.integer_vector_ptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":209
 * 
 *     property integer_ptr:
 *         def __set__(self, Int integer_ptr):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().integer_ptr = (integer_ptr.inst.get())
 */

/* Python wrapper */
static int __pyx_pw_14py_libcpp_test_10LibCppTest_11integer_ptr_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_integer_ptr); /*proto*/
static int __pyx_pw_14py_libcpp_test_10LibCppTest_11integer_ptr_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_integer_ptr) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_integer_ptr), __pyx_ptype_14py_libcpp_test_Int, 1, "integer_ptr", 0))) __PYX_ERR(1, 209, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_11integer_ptr___set__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_integer_ptr));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14py_libcpp_test_10LibCppTest_11integer_ptr___set__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_integer_ptr) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "py_libcpp_test.pyx":211
 *         def __set__(self, Int integer_ptr):
 * 
 *             self.inst.get().integer_ptr = (integer_ptr.inst.get())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->integer_ptr = __pyx_v_integer_ptr->inst.get();

  /* "py_libcpp_test.pyx":209
 * 
 *     property integer_ptr:
 *         def __set__(self, Int integer_ptr):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().integer_ptr = (integer_ptr.inst.get())
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":214
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.inst.get().integer_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_11integer_ptr_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_11integer_ptr_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_11integer_ptr_2__get__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_11integer_ptr_2__get__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self) {
  Int *__pyx_v___r;
  Int *__pyx_v__r;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Int *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "py_libcpp_test.pyx":215
 * 
 *         def __get__(self):
 *             if self.inst.get().integer_ptr is NULL:             # <<<<<<<<<<<<<<
 *                  raise Exception("Cannot access pointer that is NULL")
 *             cdef  _Int * __r = (self.inst.get().integer_ptr)
 */
  __pyx_t_1 = ((__pyx_v_self->inst.get()->integer_ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "py_libcpp_test.pyx":216
 *         def __get__(self):
 *             if self.inst.get().integer_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")             # <<<<<<<<<<<<<<
 *             cdef  _Int * __r = (self.inst.get().integer_ptr)
 *             if __r == NULL:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 216, __pyx_L1_error)

    /* "py_libcpp_test.pyx":215
 * 
 *         def __get__(self):
 *             if self.inst.get().integer_ptr is NULL:             # <<<<<<<<<<<<<<
 *                  raise Exception("Cannot access pointer that is NULL")
 *             cdef  _Int * __r = (self.inst.get().integer_ptr)
 */
  }

  /* "py_libcpp_test.pyx":217
 *             if self.inst.get().integer_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")
 *             cdef  _Int * __r = (self.inst.get().integer_ptr)             # <<<<<<<<<<<<<<
 *             if __r == NULL:
 *                 return None
 */
  __pyx_t_3 = __pyx_v_self->inst.get()->integer_ptr;
  __pyx_v___r = __pyx_t_3;

  /* "py_libcpp_test.pyx":218
 *                  raise Exception("Cannot access pointer that is NULL")
 *             cdef  _Int * __r = (self.inst.get().integer_ptr)
 *             if __r == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             cdef _Int * _r = new _Int(deref(__r))
 */
  __pyx_t_1 = ((__pyx_v___r == NULL) != 0);
  if (__pyx_t_1) {

    /* "py_libcpp_test.pyx":219
 *             cdef  _Int * __r = (self.inst.get().integer_ptr)
 *             if __r == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             cdef _Int * _r = new _Int(deref(__r))
 *             cdef Int py_result = Int.__new__(Int)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":218
 *                  raise Exception("Cannot access pointer that is NULL")
 *             cdef  _Int * __r = (self.inst.get().integer_ptr)
 *             if __r == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             cdef _Int * _r = new _Int(deref(__r))
 */
  }

  /* "py_libcpp_test.pyx":220
 *             if __r == NULL:
 *                 return None
 *             cdef _Int * _r = new _Int(deref(__r))             # <<<<<<<<<<<<<<
 *             cdef Int py_result = Int.__new__(Int)
 *             py_result.inst = shared_ptr[_Int](_r)
 */
  __pyx_v__r = new Int((*__pyx_v___r));

  /* "py_libcpp_test.pyx":221
 *                 return None
 *             cdef _Int * _r = new _Int(deref(__r))
 *             cdef Int py_result = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *             py_result.inst = shared_ptr[_Int](_r)
 *             return py_result
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 221, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_py_result = ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":222
 *             cdef _Int * _r = new _Int(deref(__r))
 *             cdef Int py_result = Int.__new__(Int)
 *             py_result.inst = shared_ptr[_Int](_r)             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result->inst = boost::shared_ptr<Int> (__pyx_v__r);

  /* "py_libcpp_test.pyx":223
 *             cdef Int py_result = Int.__new__(Int)
 *             py_result.inst = shared_ptr[_Int](_r)
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_result));
  __pyx_r = ((PyObject *)__pyx_v_py_result);
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":214
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.inst.get().integer_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.integer_ptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":225
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LibCppTest()"""
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest())
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_5_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_4_init_0[] = "Cython signature: void LibCppTest()";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_5_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_4_init_0(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_4_init_0(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "py_libcpp_test.pyx":227
 *     def _init_0(self):
 *         """Cython signature: void LibCppTest()"""
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self,  ii ):
 */
  __pyx_v_self->inst = boost::shared_ptr<LibCppTest> (new LibCppTest());

  /* "py_libcpp_test.pyx":225
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LibCppTest()"""
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":229
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest())
 * 
 *     def _init_1(self,  ii ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LibCppTest(int ii)"""
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_7_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_ii); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_6_init_1[] = "Cython signature: void LibCppTest(int ii)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_7_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_ii) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_6_init_1(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject *)__pyx_v_ii));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_6_init_1(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_ii) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "py_libcpp_test.pyx":231
 *     def _init_1(self,  ii ):
 *         """Cython signature: void LibCppTest(int ii)"""
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest((<int>ii)))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_ii); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_ii); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_ii_wrong_type);
      __PYX_ERR(1, 231, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":233
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'
 * 
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest((<int>ii)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_ii); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 233, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(((int)__pyx_t_4)));

  /* "py_libcpp_test.pyx":229
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest())
 * 
 *     def _init_1(self,  ii ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LibCppTest(int ii)"""
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":235
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest((<int>ii)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void LibCppTest()
 */

/* Python wrapper */
static int __pyx_pw_14py_libcpp_test_10LibCppTest_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_8__init__[] = "\n          - Cython signature: void LibCppTest()\n          - Cython signature: void LibCppTest(int ii)\n";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_14py_libcpp_test_10LibCppTest_8__init__;
#endif
static int __pyx_pw_14py_libcpp_test_10LibCppTest_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_8__init__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14py_libcpp_test_10LibCppTest_8__init__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_libcpp_test.pyx":240
 *           - Cython signature: void LibCppTest(int ii)
 * """
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
  __pyx_t_1 = (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "py_libcpp_test.pyx":241
 * """
 *         if not args:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "py_libcpp_test.pyx":240
 *           - Cython signature: void LibCppTest(int ii)
 * """
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":242
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 242, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L6_bool_binop_done:;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "py_libcpp_test.pyx":243
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "py_libcpp_test.pyx":242
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "py_libcpp_test.pyx":245
 *              self._init_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def gett(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_args), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_can_not_handle_type_of, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 245, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "py_libcpp_test.pyx":235
 *         self.inst = shared_ptr[_LibCppTest](new _LibCppTest((<int>ii)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: void LibCppTest()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":247
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def gett(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int gett()
 *         getting access to an integer
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_11gett(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_10gett[] = "Cython signature: int gett()\n        getting access to an integer\n";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_11gett(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gett (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_10gett(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10gett(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("gett", 0);

  /* "py_libcpp_test.pyx":251
 *         getting access to an integer
 * """
 *         cdef int _r = self.inst.get().get()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->get();

  /* "py_libcpp_test.pyx":252
 * """
 *         cdef int _r = self.inst.get().get()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":253
 *         cdef int _r = self.inst.get().get()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def twist(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":247
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def gett(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int gett()
 *         getting access to an integer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.gett", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":255
 *         return py_result
 * 
 *     def twist(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,libcpp_string] twist(libcpp_pair[libcpp_string,int])
 *         Dont forget this stuff here!
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_13twist(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_12twist[] = "Cython signature: libcpp_pair[int,libcpp_string] twist(libcpp_pair[libcpp_string,int])\n        Dont forget this stuff here!\n";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_13twist(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("twist (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 255, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_12twist(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_12twist(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  std::pair<std::string,int>  __pyx_v_v0;
  std::pair<int,std::string>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("twist", 0);

  /* "py_libcpp_test.pyx":259
 *         Dont forget this stuff here!
 * """
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], bytes) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[libcpp_string, int] v0
 *         v0.first = in_0[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_in_0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 259, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = PyBytes_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_3 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_6 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L7_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":261
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], bytes) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 *         cdef libcpp_pair[libcpp_string, int] v0
 *         v0.first = in_0[0]             # <<<<<<<<<<<<<<
 *         v0.second = in_0[1]
 *         _r = self.inst.get().twist(v0)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 261, __pyx_L1_error)
  }
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(PyList_GET_ITEM(__pyx_v_in_0, 0)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 261, __pyx_L1_error)
  __pyx_v_v0.first = __pyx_t_7;

  /* "py_libcpp_test.pyx":262
 *         cdef libcpp_pair[libcpp_string, int] v0
 *         v0.first = in_0[0]
 *         v0.second = in_0[1]             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().twist(v0)
 *         cdef list py_result = [_r.first, _r.second]
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 262, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_in_0, 1)); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 262, __pyx_L1_error)
  __pyx_v_v0.second = __pyx_t_8;

  /* "py_libcpp_test.pyx":263
 *         v0.first = in_0[0]
 *         v0.second = in_0[1]
 *         _r = self.inst.get().twist(v0)             # <<<<<<<<<<<<<<
 *         cdef list py_result = [_r.first, _r.second]
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->twist(__pyx_v_v0);

  /* "py_libcpp_test.pyx":264
 *         v0.second = in_0[1]
 *         _r = self.inst.get().twist(v0)
 *         cdef list py_result = [_r.first, _r.second]             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v__r.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v__r.second); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
  __pyx_t_5 = 0;
  __pyx_t_9 = 0;
  __pyx_v_py_result = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "py_libcpp_test.pyx":265
 *         _r = self.inst.get().twist(v0)
 *         cdef list py_result = [_r.first, _r.second]
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":255
 *         return py_result
 * 
 *     def twist(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,libcpp_string] twist(libcpp_pair[libcpp_string,int])
 *         Dont forget this stuff here!
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.twist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":267
 *         return py_result
 * 
 *     def process(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_15process(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_14process[] = "Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_15process(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 267, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_14process(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_7process_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":269
 *     def process(self, list in_0 ):
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_0
 *         _r = self.inst.get().process(v0)
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_7process_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_1_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 269, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_7process_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_7process_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 269, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 269, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 269, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 269, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyInt_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":267
 *         return py_result
 * 
 *     def process(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_14process(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *__pyx_cur_scope;
  std::vector<int>  __pyx_v_v0;
  std::vector<int>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<int>  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct__process(__pyx_ptype_14py_libcpp_test___pyx_scope_struct__process, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 267, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "py_libcpp_test.pyx":269
 *     def process(self, list in_0 ):
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_0
 *         _r = self.inst.get().process(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_7process_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 269, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":270
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[int] v0 = in_0             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process(v0)
 *         in_0[:] = v0
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_int(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 270, __pyx_L1_error)
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":271
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[int] v0 = in_0
 *         _r = self.inst.get().process(v0)             # <<<<<<<<<<<<<<
 *         in_0[:] = v0
 *         cdef list py_result = _r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process(__pyx_v_v0);

  /* "py_libcpp_test.pyx":272
 *         cdef libcpp_vector[int] v0 = in_0
 *         _r = self.inst.get().process(v0)
 *         in_0[:] = v0             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  __pyx_t_5 = __pyx_convert_vector_to_py_int(__pyx_v_v0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 272, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_cur_scope->__pyx_v_in_0, __pyx_t_5, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":273
 *         _r = self.inst.get().process(v0)
 *         in_0[:] = v0
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_to_py_int(__pyx_v__r); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(1, 273, __pyx_L1_error)
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":274
 *         in_0[:] = v0
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process2(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":267
 *         return py_result
 * 
 *     def process(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[int] process(libcpp_vector[int] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":276
 *         return py_result
 * 
 *     def process2(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,int] process2(libcpp_pair[int,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_17process2(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_16process2[] = "Cython signature: libcpp_pair[int,int] process2(libcpp_pair[int,int] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_17process2(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process2 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 276, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_16process2(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_16process2(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  std::pair<int,int>  __pyx_v_v0;
  std::pair<int,int>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process2", 0);

  /* "py_libcpp_test.pyx":278
 *     def process2(self, list in_0 ):
 *         """Cython signature: libcpp_pair[int,int] process2(libcpp_pair[int,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[int, int] v0
 *         v0.first = in_0[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 278, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_in_0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 278, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 278, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_3 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 278, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_6 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 278, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_3 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L9_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 278, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_6 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L9_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 278, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":280
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 *         cdef libcpp_pair[int, int] v0
 *         v0.first = in_0[0]             # <<<<<<<<<<<<<<
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process2(v0)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 280, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_in_0, 0)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 280, __pyx_L1_error)
  __pyx_v_v0.first = __pyx_t_7;

  /* "py_libcpp_test.pyx":281
 *         cdef libcpp_pair[int, int] v0
 *         v0.first = in_0[0]
 *         v0.second = in_0[1]             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process2(v0)
 *         in_0[:] = [v0.first, v0.second]
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 281, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_in_0, 1)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 281, __pyx_L1_error)
  __pyx_v_v0.second = __pyx_t_7;

  /* "py_libcpp_test.pyx":282
 *         v0.first = in_0[0]
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process2(v0)             # <<<<<<<<<<<<<<
 *         in_0[:] = [v0.first, v0.second]
 *         cdef list py_result = [_r.first, _r.second]
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process2(__pyx_v_v0);

  /* "py_libcpp_test.pyx":283
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process2(v0)
 *         in_0[:] = [v0.first, v0.second]             # <<<<<<<<<<<<<<
 *         cdef list py_result = [_r.first, _r.second]
 *         return py_result
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_v0.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_v0.second); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_8 = 0;
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 283, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_in_0, __pyx_t_9, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "py_libcpp_test.pyx":284
 *         _r = self.inst.get().process2(v0)
 *         in_0[:] = [v0.first, v0.second]
 *         cdef list py_result = [_r.first, _r.second]             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v__r.first); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v__r.second); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
  __pyx_t_9 = 0;
  __pyx_t_8 = 0;
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":285
 *         in_0[:] = [v0.first, v0.second]
 *         cdef list py_result = [_r.first, _r.second]
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process3(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":276
 *         return py_result
 * 
 *     def process2(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,int] process2(libcpp_pair[int,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":287
 *         return py_result
 * 
 *     def process3(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[LibCppTest,int] process3(libcpp_pair[LibCppTest,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_19process3(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_18process3[] = "Cython signature: libcpp_pair[LibCppTest,int] process3(libcpp_pair[LibCppTest,int] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_19process3(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process3 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 287, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_18process3(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_18process3(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  std::pair<LibCppTest,int>  __pyx_v_v0;
  std::pair<LibCppTest,int>  __pyx_v__r;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_temp1 = 0;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_out1 = 0;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process3", 0);

  /* "py_libcpp_test.pyx":289
 *     def process3(self, list in_0 ):
 *         """Cython signature: libcpp_pair[LibCppTest,int] process3(libcpp_pair[LibCppTest,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[_LibCppTest, int] v0
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_in_0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 289, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_5, __pyx_ptype_14py_libcpp_test_LibCppTest); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_3 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_6 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L7_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":291
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 *         cdef libcpp_pair[_LibCppTest, int] v0
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())             # <<<<<<<<<<<<<<
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process3(v0)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 291, __pyx_L1_error)
  }
  __pyx_v_v0.first = (*((struct __pyx_obj_14py_libcpp_test_LibCppTest *)PyList_GET_ITEM(__pyx_v_in_0, 0))->inst.get());

  /* "py_libcpp_test.pyx":292
 *         cdef libcpp_pair[_LibCppTest, int] v0
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())
 *         v0.second = in_0[1]             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process3(v0)
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 292, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_in_0, 1)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 292, __pyx_L1_error)
  __pyx_v_v0.second = __pyx_t_7;

  /* "py_libcpp_test.pyx":293
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process3(v0)             # <<<<<<<<<<<<<<
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process3(__pyx_v_v0);

  /* "py_libcpp_test.pyx":294
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process3(v0)
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 *         in_0[:] = [temp1, v0.second]
 */
  __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_v_temp1 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":295
 *         _r = self.inst.get().process3(v0)
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))             # <<<<<<<<<<<<<<
 *         in_0[:] = [temp1, v0.second]
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 */
  __pyx_v_temp1->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v_v0.first));

  /* "py_libcpp_test.pyx":296
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 *         in_0[:] = [temp1, v0.second]             # <<<<<<<<<<<<<<
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_v0.second); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(((PyObject *)__pyx_v_temp1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_temp1));
  PyList_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_temp1));
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 296, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_in_0, __pyx_t_8, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "py_libcpp_test.pyx":297
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 *         in_0[:] = [temp1, v0.second]
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 *         cdef list py_result = [out1, _r.second]
 */
  __pyx_t_8 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 297, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  __pyx_v_out1 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "py_libcpp_test.pyx":298
 *         in_0[:] = [temp1, v0.second]
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))             # <<<<<<<<<<<<<<
 *         cdef list py_result = [out1, _r.second]
 *         return py_result
 */
  __pyx_v_out1->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v__r.first));

  /* "py_libcpp_test.pyx":299
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 *         cdef list py_result = [out1, _r.second]             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v__r.second); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_out1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_out1));
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_out1));
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":300
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 *         cdef list py_result = [out1, _r.second]
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process4(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":287
 *         return py_result
 * 
 *     def process3(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[LibCppTest,int] process3(libcpp_pair[LibCppTest,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp1);
  __Pyx_XDECREF((PyObject *)__pyx_v_out1);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":302
 *         return py_result
 * 
 *     def process4(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,LibCppTest] process4(libcpp_pair[int,LibCppTest] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_21process4(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_20process4[] = "Cython signature: libcpp_pair[int,LibCppTest] process4(libcpp_pair[int,LibCppTest] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_21process4(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process4 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 302, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_20process4(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_20process4(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  std::pair<int,LibCppTest>  __pyx_v_v0;
  std::pair<int,LibCppTest>  __pyx_v__r;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_temp2 = 0;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_out2 = 0;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process4", 0);

  /* "py_libcpp_test.pyx":304
 *     def process4(self, list in_0 ):
 *         """Cython signature: libcpp_pair[int,LibCppTest] process4(libcpp_pair[int,LibCppTest] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[int, _LibCppTest] v0
 *         v0.first = in_0[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 304, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_in_0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 304, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 304, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_3 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 304, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_6 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 304, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_5, __pyx_ptype_14py_libcpp_test_LibCppTest); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 304, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":306
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'
 *         cdef libcpp_pair[int, _LibCppTest] v0
 *         v0.first = in_0[0]             # <<<<<<<<<<<<<<
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())
 *         _r = self.inst.get().process4(v0)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 306, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_in_0, 0)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
  __pyx_v_v0.first = __pyx_t_7;

  /* "py_libcpp_test.pyx":307
 *         cdef libcpp_pair[int, _LibCppTest] v0
 *         v0.first = in_0[0]
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process4(v0)
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 307, __pyx_L1_error)
  }
  __pyx_v_v0.second = (*((struct __pyx_obj_14py_libcpp_test_LibCppTest *)PyList_GET_ITEM(__pyx_v_in_0, 1))->inst.get());

  /* "py_libcpp_test.pyx":308
 *         v0.first = in_0[0]
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())
 *         _r = self.inst.get().process4(v0)             # <<<<<<<<<<<<<<
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process4(__pyx_v_v0);

  /* "py_libcpp_test.pyx":309
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())
 *         _r = self.inst.get().process4(v0)
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 *         in_0[:] = [v0.first, temp2]
 */
  __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 309, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_v_temp2 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":310
 *         _r = self.inst.get().process4(v0)
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))             # <<<<<<<<<<<<<<
 *         in_0[:] = [v0.first, temp2]
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 */
  __pyx_v_temp2->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v_v0.second));

  /* "py_libcpp_test.pyx":311
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 *         in_0[:] = [v0.first, temp2]             # <<<<<<<<<<<<<<
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_v0.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_temp2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_temp2));
  PyList_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_v_temp2));
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 311, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_in_0, __pyx_t_8, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "py_libcpp_test.pyx":312
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 *         in_0[:] = [v0.first, temp2]
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 *         cdef list py_result = [_r.first, out2]
 */
  __pyx_t_8 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 312, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  __pyx_v_out2 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "py_libcpp_test.pyx":313
 *         in_0[:] = [v0.first, temp2]
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))             # <<<<<<<<<<<<<<
 *         cdef list py_result = [_r.first, out2]
 *         return py_result
 */
  __pyx_v_out2->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v__r.second));

  /* "py_libcpp_test.pyx":314
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 *         cdef list py_result = [_r.first, out2]             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v__r.first); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_INCREF(((PyObject *)__pyx_v_out2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_out2));
  PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_out2));
  __pyx_t_8 = 0;
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":315
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 *         cdef list py_result = [_r.first, out2]
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process5(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":302
 *         return py_result
 * 
 *     def process4(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,LibCppTest] process4(libcpp_pair[int,LibCppTest] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], (int, long)) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp2);
  __Pyx_XDECREF((PyObject *)__pyx_v_out2);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":317
 *         return py_result
 * 
 *     def process5(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[LibCppTest,LibCppTest] process5(libcpp_pair[LibCppTest,LibCppTest] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_23process5(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_22process5[] = "Cython signature: libcpp_pair[LibCppTest,LibCppTest] process5(libcpp_pair[LibCppTest,LibCppTest] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_23process5(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process5 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 317, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_22process5(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_22process5(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  std::pair<LibCppTest,LibCppTest>  __pyx_v_v0;
  std::pair<LibCppTest,LibCppTest>  __pyx_v__r;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_temp1 = 0;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_temp2 = 0;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_out1 = 0;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_out2 = 0;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process5", 0);

  /* "py_libcpp_test.pyx":319
 *     def process5(self, list in_0 ):
 *         """Cython signature: libcpp_pair[LibCppTest,LibCppTest] process5(libcpp_pair[LibCppTest,LibCppTest] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[_LibCppTest, _LibCppTest] v0
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 319, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_in_0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 319, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 319, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_5, __pyx_ptype_14py_libcpp_test_LibCppTest); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 319, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_5, __pyx_ptype_14py_libcpp_test_LibCppTest); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 319, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":321
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'
 *         cdef libcpp_pair[_LibCppTest, _LibCppTest] v0
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())             # <<<<<<<<<<<<<<
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())
 *         _r = self.inst.get().process5(v0)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 321, __pyx_L1_error)
  }
  __pyx_v_v0.first = (*((struct __pyx_obj_14py_libcpp_test_LibCppTest *)PyList_GET_ITEM(__pyx_v_in_0, 0))->inst.get());

  /* "py_libcpp_test.pyx":322
 *         cdef libcpp_pair[_LibCppTest, _LibCppTest] v0
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process5(v0)
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 322, __pyx_L1_error)
  }
  __pyx_v_v0.second = (*((struct __pyx_obj_14py_libcpp_test_LibCppTest *)PyList_GET_ITEM(__pyx_v_in_0, 1))->inst.get());

  /* "py_libcpp_test.pyx":323
 *         v0.first = deref((<LibCppTest>in_0[0]).inst.get())
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())
 *         _r = self.inst.get().process5(v0)             # <<<<<<<<<<<<<<
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process5(__pyx_v_v0);

  /* "py_libcpp_test.pyx":324
 *         v0.second = deref((<LibCppTest>in_0[1]).inst.get())
 *         _r = self.inst.get().process5(v0)
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 */
  __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_v_temp1 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":325
 *         _r = self.inst.get().process5(v0)
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))             # <<<<<<<<<<<<<<
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 */
  __pyx_v_temp1->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v_v0.first));

  /* "py_libcpp_test.pyx":326
 *         cdef LibCppTest temp1 = LibCppTest.__new__(LibCppTest)
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 *         in_0[:] = [temp1, temp2]
 */
  __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 326, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_v_temp2 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":327
 *         temp1.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.first))
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))             # <<<<<<<<<<<<<<
 *         in_0[:] = [temp1, temp2]
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 */
  __pyx_v_temp2->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v_v0.second));

  /* "py_libcpp_test.pyx":328
 *         cdef LibCppTest temp2 = LibCppTest.__new__(LibCppTest)
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 *         in_0[:] = [temp1, temp2]             # <<<<<<<<<<<<<<
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_temp1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_temp1));
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_temp1));
  __Pyx_INCREF(((PyObject *)__pyx_v_temp2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_temp2));
  PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_temp2));
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 328, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_in_0, __pyx_t_5, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":329
 *         temp2.inst = shared_ptr[_LibCppTest](new _LibCppTest(v0.second))
 *         in_0[:] = [temp1, temp2]
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 */
  __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_v_out1 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":330
 *         in_0[:] = [temp1, temp2]
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))             # <<<<<<<<<<<<<<
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 */
  __pyx_v_out1->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v__r.first));

  /* "py_libcpp_test.pyx":331
 *         cdef LibCppTest out1 = LibCppTest.__new__(LibCppTest)
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 *         cdef list py_result = [out1, out2]
 */
  __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __pyx_v_out2 = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":332
 *         out1.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.first))
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))             # <<<<<<<<<<<<<<
 *         cdef list py_result = [out1, out2]
 *         return py_result
 */
  __pyx_v_out2->inst = boost::shared_ptr<LibCppTest> (new LibCppTest(__pyx_v__r.second));

  /* "py_libcpp_test.pyx":333
 *         cdef LibCppTest out2 = LibCppTest.__new__(LibCppTest)
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 *         cdef list py_result = [out1, out2]             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_out1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_out1));
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_out1));
  __Pyx_INCREF(((PyObject *)__pyx_v_out2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_out2));
  PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_out2));
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":334
 *         out2.inst = shared_ptr[_LibCppTest](new _LibCppTest(_r.second))
 *         cdef list py_result = [out1, out2]
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process6(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":317
 *         return py_result
 * 
 *     def process5(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[LibCppTest,LibCppTest] process5(libcpp_pair[LibCppTest,LibCppTest] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and isinstance(in_0[0], LibCppTest) and isinstance(in_0[1], LibCppTest), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp1);
  __Pyx_XDECREF((PyObject *)__pyx_v_temp2);
  __Pyx_XDECREF((PyObject *)__pyx_v_out1);
  __Pyx_XDECREF((PyObject *)__pyx_v_out2);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":336
 *         return py_result
 * 
 *     def process6(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_25process6(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_24process6[] = "Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_25process6(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process6 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 336, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_24process6(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_8process6_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":338
 *     def process6(self, list in_0 ):
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_pair[int,double]] v0 = in_0
 *         _r = self.inst.get().process6(v0)
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_8process6_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_3_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 338, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_8process6_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process6_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process6.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_8process6_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 338, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 338, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 338, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 338, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyList_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyObject_Length(__pyx_cur_scope->__pyx_v_elemt_rec); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(1, 338, __pyx_L1_error)
    __pyx_t_6 = ((__pyx_t_7 == 2) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyInt_Check(__pyx_t_3); 
    __pyx_t_8 = (__pyx_t_5 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_6 = __pyx_t_8;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_8 = PyLong_Check(__pyx_t_3); 
    __pyx_t_5 = (__pyx_t_8 != 0);
    __pyx_t_6 = __pyx_t_5;
    __pyx_L11_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":336
 *         return py_result
 * 
 *     def process6(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_24process6(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *__pyx_cur_scope;
  std::vector<std::pair<int,double> >  __pyx_v_v0;
  std::vector<std::pair<int,double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::pair<int,double> >  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process6", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_2_process6(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_2_process6, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 336, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "py_libcpp_test.pyx":338
 *     def process6(self, list in_0 ):
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_pair[int,double]] v0 = in_0
 *         _r = self.inst.get().process6(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_8process6_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 338, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":339
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_pair[int,double]] v0 = in_0             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process6(v0)
 *         in_0[:] = v0
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 339, __pyx_L1_error)
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":340
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_pair[int,double]] v0 = in_0
 *         _r = self.inst.get().process6(v0)             # <<<<<<<<<<<<<<
 *         in_0[:] = v0
 *         cdef list py_result = _r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process6(__pyx_v_v0);

  /* "py_libcpp_test.pyx":341
 *         cdef libcpp_vector[libcpp_pair[int,double]] v0 = in_0
 *         _r = self.inst.get().process6(v0)
 *         in_0[:] = v0             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___(__pyx_v_v0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 341, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_cur_scope->__pyx_v_in_0, __pyx_t_5, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":342
 *         _r = self.inst.get().process6(v0)
 *         in_0[:] = v0
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(1, 342, __pyx_L1_error)
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":343
 *         in_0[:] = v0
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process7(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":336
 *         return py_result
 * 
 *     def process6(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_pair[int,double]] process6(libcpp_vector[libcpp_pair[int,double]] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], float) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process6", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":345
 *         return py_result
 * 
 *     def process7(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,EEE] process7(libcpp_pair[EEE,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and in_0[0] in [0, 1] and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_27process7(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_26process7[] = "Cython signature: libcpp_pair[int,EEE] process7(libcpp_pair[EEE,int] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_27process7(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process7 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 345, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_26process7(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_26process7(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  std::pair<enum EEE,int>  __pyx_v_v0;
  std::pair<int,enum EEE>  __pyx_v__r;
  enum EEE __pyx_v_out2;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  enum EEE __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process7", 0);

  /* "py_libcpp_test.pyx":347
 *     def process7(self, list in_0 ):
 *         """Cython signature: libcpp_pair[int,EEE] process7(libcpp_pair[EEE,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and in_0[0] in [0, 1] and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[_EEE, int] v0
 *         v0.first = (<EEE>in_0[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_in_0); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 347, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
    __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_in_0, 0));
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 0);
    __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__pyx_t_3 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L9_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_0, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_7 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_7 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L9_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":349
 *         assert isinstance(in_0, list) and len(in_0) == 2 and in_0[0] in [0, 1] and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 *         cdef libcpp_pair[_EEE, int] v0
 *         v0.first = (<EEE>in_0[0])             # <<<<<<<<<<<<<<
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process7(v0)
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 349, __pyx_L1_error)
  }
  __pyx_t_8 = ((enum EEE)__Pyx_PyInt_As_enum__EEE(PyList_GET_ITEM(__pyx_v_in_0, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 349, __pyx_L1_error)
  __pyx_v_v0.first = __pyx_t_8;

  /* "py_libcpp_test.pyx":350
 *         cdef libcpp_pair[_EEE, int] v0
 *         v0.first = (<EEE>in_0[0])
 *         v0.second = in_0[1]             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process7(v0)
 *         in_0[:] = [v0.first, v0.second]
 */
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 350, __pyx_L1_error)
  }
  __pyx_t_9 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_in_0, 1)); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 350, __pyx_L1_error)
  __pyx_v_v0.second = __pyx_t_9;

  /* "py_libcpp_test.pyx":351
 *         v0.first = (<EEE>in_0[0])
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process7(v0)             # <<<<<<<<<<<<<<
 *         in_0[:] = [v0.first, v0.second]
 *         cdef _EEE out2 = (<_EEE> _r.second)
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process7(__pyx_v_v0);

  /* "py_libcpp_test.pyx":352
 *         v0.second = in_0[1]
 *         _r = self.inst.get().process7(v0)
 *         in_0[:] = [v0.first, v0.second]             # <<<<<<<<<<<<<<
 *         cdef _EEE out2 = (<_EEE> _r.second)
 *         cdef list py_result = [_r.first, out2]
 */
  __pyx_t_5 = __Pyx_PyInt_From_enum__EEE(__pyx_v_v0.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_v0.second); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  if (unlikely(__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 352, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_in_0, __pyx_t_10, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "py_libcpp_test.pyx":353
 *         _r = self.inst.get().process7(v0)
 *         in_0[:] = [v0.first, v0.second]
 *         cdef _EEE out2 = (<_EEE> _r.second)             # <<<<<<<<<<<<<<
 *         cdef list py_result = [_r.first, out2]
 *         return py_result
 */
  __pyx_v_out2 = ((enum EEE)__pyx_v__r.second);

  /* "py_libcpp_test.pyx":354
 *         in_0[:] = [v0.first, v0.second]
 *         cdef _EEE out2 = (<_EEE> _r.second)
 *         cdef list py_result = [_r.first, out2]             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v__r.first); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_PyInt_From_enum__EEE(__pyx_v_out2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_10 = 0;
  __pyx_t_6 = 0;
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":355
 *         cdef _EEE out2 = (<_EEE> _r.second)
 *         cdef list py_result = [_r.first, out2]
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process8(self, list in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":345
 *         return py_result
 * 
 *     def process7(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_pair[int,EEE] process7(libcpp_pair[EEE,int] &)"""
 *         assert isinstance(in_0, list) and len(in_0) == 2 and in_0[0] in [0, 1] and isinstance(in_0[1], (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":357
 *         return py_result
 * 
 *     def process8(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_29process8(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_28process8[] = "Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_29process8(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process8 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 357, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_28process8(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_8process8_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":359
 *     def process8(self, list in_0 ):
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EEE] * v0 = new libcpp_vector[_EEE]()
 *         cdef int item0
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_8process8_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_5_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 359, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_8process8_2generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process8_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process8.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_8process8_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 359, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 359, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 359, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 359, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":357
 *         return py_result
 * 
 *     def process8(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_28process8(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *__pyx_cur_scope;
  std::vector<enum EEE>  *__pyx_v_v0;
  int __pyx_v_item0;
  std::vector<enum EEE>  __pyx_v__r;
  PyObject *__pyx_v_replace = NULL;
  std::vector<enum EEE> ::iterator __pyx_v_it_in_0;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<enum EEE> ::iterator __pyx_v_it__r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<enum EEE>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process8", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_4_process8(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_4_process8, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 357, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "py_libcpp_test.pyx":359
 *     def process8(self, list in_0 ):
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EEE] * v0 = new libcpp_vector[_EEE]()
 *         cdef int item0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_8process8_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 359, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":360
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[_EEE] * v0 = new libcpp_vector[_EEE]()             # <<<<<<<<<<<<<<
 *         cdef int item0
 *         for item0 in in_0:
 */
  try {
    __pyx_t_6 = new std::vector<enum EEE> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 360, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":362
 *         cdef libcpp_vector[_EEE] * v0 = new libcpp_vector[_EEE]()
 *         cdef int item0
 *         for item0 in in_0:             # <<<<<<<<<<<<<<
 *             v0.push_back(<_EEE> item0)
 *         _r = self.inst.get().process8(deref(v0))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 362, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 362, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_item0 = __pyx_t_8;

    /* "py_libcpp_test.pyx":363
 *         cdef int item0
 *         for item0 in in_0:
 *             v0.push_back(<_EEE> item0)             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process8(deref(v0))
 *         replace = []
 */
    try {
      __pyx_v_v0->push_back(((enum EEE)__pyx_v_item0));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 363, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":362
 *         cdef libcpp_vector[_EEE] * v0 = new libcpp_vector[_EEE]()
 *         cdef int item0
 *         for item0 in in_0:             # <<<<<<<<<<<<<<
 *             v0.push_back(<_EEE> item0)
 *         _r = self.inst.get().process8(deref(v0))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":364
 *         for item0 in in_0:
 *             v0.push_back(<_EEE> item0)
 *         _r = self.inst.get().process8(deref(v0))             # <<<<<<<<<<<<<<
 *         replace = []
 *         cdef libcpp_vector[_EEE].iterator it_in_0 = v0.begin()
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process8((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":365
 *             v0.push_back(<_EEE> item0)
 *         _r = self.inst.get().process8(deref(v0))
 *         replace = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EEE].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_replace = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":366
 *         _r = self.inst.get().process8(deref(v0))
 *         replace = []
 *         cdef libcpp_vector[_EEE].iterator it_in_0 = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_0 != v0.end():
 *             replace.append(<int> deref(it_in_0))
 */
  __pyx_v_it_in_0 = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":367
 *         replace = []
 *         cdef libcpp_vector[_EEE].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():             # <<<<<<<<<<<<<<
 *             replace.append(<int> deref(it_in_0))
 *             inc(it_in_0)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_0 != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":368
 *         cdef libcpp_vector[_EEE].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():
 *             replace.append(<int> deref(it_in_0))             # <<<<<<<<<<<<<<
 *             inc(it_in_0)
 *         in_0[:] = replace
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_0))); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_replace, __pyx_t_5); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 368, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":369
 *         while it_in_0 != v0.end():
 *             replace.append(<int> deref(it_in_0))
 *             inc(it_in_0)             # <<<<<<<<<<<<<<
 *         in_0[:] = replace
 *         del v0
 */
    (void)((++__pyx_v_it_in_0));
  }

  /* "py_libcpp_test.pyx":370
 *             replace.append(<int> deref(it_in_0))
 *             inc(it_in_0)
 *         in_0[:] = replace             # <<<<<<<<<<<<<<
 *         del v0
 *         py_result = []
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 370, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_cur_scope->__pyx_v_in_0, __pyx_v_replace, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 370, __pyx_L1_error)

  /* "py_libcpp_test.pyx":371
 *             inc(it_in_0)
 *         in_0[:] = replace
 *         del v0             # <<<<<<<<<<<<<<
 *         py_result = []
 *         cdef libcpp_vector[_EEE].iterator it__r = _r.begin()
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":372
 *         in_0[:] = replace
 *         del v0
 *         py_result = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":373
 *         del v0
 *         py_result = []
 *         cdef libcpp_vector[_EEE].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         while it__r != _r.end():
 *            py_result.append(<int>deref(it__r))
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":374
 *         py_result = []
 *         cdef libcpp_vector[_EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            py_result.append(<int>deref(it__r))
 *            inc(it__r)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":375
 *         cdef libcpp_vector[_EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 *            py_result.append(<int>deref(it__r))             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it__r))); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_py_result, __pyx_t_5); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 375, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":376
 *         while it__r != _r.end():
 *            py_result.append(<int>deref(it__r))
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":377
 *            py_result.append(<int>deref(it__r))
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process9(self, set in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":357
 *         return py_result
 * 
 *     def process8(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EEE] process8(libcpp_vector[EEE] &)"""
 *         assert isinstance(in_0, list) and all(elemt_rec in [0, 1] for elemt_rec in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":379
 *         return py_result
 * 
 *     def process9(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_31process9(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_30process9[] = "Cython signature: libcpp_set[int] process9(libcpp_set[int] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_31process9(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process9 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PySet_Type), 1, "in_0", 1))) __PYX_ERR(1, 379, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_30process9(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_8process9_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":381
 *     def process9(self, set in_0 ):
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[int] v0 = in_0
 *         _r = self.inst.get().process9(v0)
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_8process9_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_7_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 381, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_8process9_2generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process9_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process9.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_8process9_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 381, __pyx_L1_error)
  __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 381, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0, 1, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_8 = PyInt_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_9 = PyLong_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_8 = (__pyx_t_9 != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L7_bool_binop_done:;
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    if (__pyx_t_8) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":379
 *         return py_result
 * 
 *     def process9(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_30process9(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *__pyx_cur_scope;
  std::set<int>  __pyx_v_v0;
  std::set<int>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::set<int>  __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process9", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_6_process9(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_6_process9, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 379, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "py_libcpp_test.pyx":381
 *     def process9(self, set in_0 ):
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[int] v0 = in_0
 *         _r = self.inst.get().process9(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PySet_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_8process9_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 381, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":382
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_set[int] v0 = in_0             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process9(v0)
 *         in_0.clear()
 */
  __pyx_t_6 = __pyx_convert_set_from_py_int(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 382, __pyx_L1_error)
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":383
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_set[int] v0 = in_0
 *         _r = self.inst.get().process9(v0)             # <<<<<<<<<<<<<<
 *         in_0.clear()
 *         in_0.update(v0)
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process9(__pyx_v_v0);

  /* "py_libcpp_test.pyx":384
 *         cdef libcpp_set[int] v0 = in_0
 *         _r = self.inst.get().process9(v0)
 *         in_0.clear()             # <<<<<<<<<<<<<<
 *         in_0.update(v0)
 *         cdef set py_result = _r
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 384, __pyx_L1_error)
  }
  __pyx_t_7 = PySet_Clear(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 384, __pyx_L1_error)

  /* "py_libcpp_test.pyx":385
 *         _r = self.inst.get().process9(v0)
 *         in_0.clear()
 *         in_0.update(v0)             # <<<<<<<<<<<<<<
 *         cdef set py_result = _r
 *         return py_result
 */
  __pyx_t_5 = __pyx_convert_set_to_py_int(__pyx_v_v0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_cur_scope->__pyx_v_in_0, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":386
 *         in_0.clear()
 *         in_0.update(v0)
 *         cdef set py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_set_to_py_int(__pyx_v__r); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PySet_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 386, __pyx_L1_error)
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":387
 *         in_0.update(v0)
 *         cdef set py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process10(self, set in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":379
 *         return py_result
 * 
 *     def process9(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[int] process9(libcpp_set[int] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":389
 *         return py_result
 * 
 *     def process10(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_33process10(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_32process10[] = "Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_33process10(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process10 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PySet_Type), 1, "in_0", 1))) __PYX_ERR(1, 389, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_32process10(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process10_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":391
 *     def process10(self, set in_0 ):
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_EEE] * v0 = new libcpp_set[_EEE]()
 *         cdef int item0
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process10_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_9_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_9_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 391, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process10_2generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process10_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process10.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process10_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 391, __pyx_L1_error)
  __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 391, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0, 1, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_li);
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_li;
    __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = ((!(__pyx_t_7 != 0)) != 0);
    if (__pyx_t_9) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":389
 *         return py_result
 * 
 *     def process10(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_32process10(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *__pyx_cur_scope;
  std::set<enum EEE>  *__pyx_v_v0;
  int __pyx_v_item0;
  std::set<enum EEE>  __pyx_v__r;
  PyObject *__pyx_v_replace = NULL;
  std::set<enum EEE> ::iterator __pyx_v_it_in_0;
  PyObject *__pyx_v_py_result = NULL;
  std::set<enum EEE> ::iterator __pyx_v_it__r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::set<enum EEE>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process10", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_8_process10(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_8_process10, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 389, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "py_libcpp_test.pyx":391
 *     def process10(self, set in_0 ):
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_EEE] * v0 = new libcpp_set[_EEE]()
 *         cdef int item0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PySet_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process10_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 391, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":392
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_set[_EEE] * v0 = new libcpp_set[_EEE]()             # <<<<<<<<<<<<<<
 *         cdef int item0
 *         for item0 in in_0:
 */
  try {
    __pyx_t_6 = new std::set<enum EEE> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 392, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":394
 *         cdef libcpp_set[_EEE] * v0 = new libcpp_set[_EEE]()
 *         cdef int item0
 *         for item0 in in_0:             # <<<<<<<<<<<<<<
 *            v0.insert(<_EEE> item0)
 *         _r = self.inst.get().process10(deref(v0))
 */
  __pyx_t_7 = 0;
  __pyx_t_2 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_v_in_0, 1, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __pyx_t_5 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_set_iter_next(__pyx_t_5, __pyx_t_8, &__pyx_t_7, &__pyx_t_2, __pyx_t_9);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(1, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_item0 = __pyx_t_10;

    /* "py_libcpp_test.pyx":395
 *         cdef int item0
 *         for item0 in in_0:
 *            v0.insert(<_EEE> item0)             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process10(deref(v0))
 *         replace = set()
 */
    try {
      __pyx_v_v0->insert(((enum EEE)__pyx_v_item0));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 395, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":396
 *         for item0 in in_0:
 *            v0.insert(<_EEE> item0)
 *         _r = self.inst.get().process10(deref(v0))             # <<<<<<<<<<<<<<
 *         replace = set()
 *         cdef libcpp_set[_EEE].iterator it_in_0 = v0.begin()
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process10((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":397
 *            v0.insert(<_EEE> item0)
 *         _r = self.inst.get().process10(deref(v0))
 *         replace = set()             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_EEE].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():
 */
  __pyx_t_5 = PySet_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_replace = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":398
 *         _r = self.inst.get().process10(deref(v0))
 *         replace = set()
 *         cdef libcpp_set[_EEE].iterator it_in_0 = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_0 != v0.end():
 *            replace.add(<int> deref(it_in_0))
 */
  __pyx_v_it_in_0 = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":399
 *         replace = set()
 *         cdef libcpp_set[_EEE].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():             # <<<<<<<<<<<<<<
 *            replace.add(<int> deref(it_in_0))
 *            inc(it_in_0)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_0 != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":400
 *         cdef libcpp_set[_EEE].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():
 *            replace.add(<int> deref(it_in_0))             # <<<<<<<<<<<<<<
 *            inc(it_in_0)
 *         in_0.clear()
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_0))); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = PySet_Add(__pyx_v_replace, __pyx_t_5); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":401
 *         while it_in_0 != v0.end():
 *            replace.add(<int> deref(it_in_0))
 *            inc(it_in_0)             # <<<<<<<<<<<<<<
 *         in_0.clear()
 *         in_0.update(replace)
 */
    (void)((++__pyx_v_it_in_0));
  }

  /* "py_libcpp_test.pyx":402
 *            replace.add(<int> deref(it_in_0))
 *            inc(it_in_0)
 *         in_0.clear()             # <<<<<<<<<<<<<<
 *         in_0.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 402, __pyx_L1_error)
  }
  __pyx_t_11 = PySet_Clear(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 402, __pyx_L1_error)

  /* "py_libcpp_test.pyx":403
 *            inc(it_in_0)
 *         in_0.clear()
 *         in_0.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 *         py_result = set()
 */
  __pyx_t_5 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_cur_scope->__pyx_v_in_0, __pyx_v_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":404
 *         in_0.clear()
 *         in_0.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 *         py_result = set()
 *         cdef libcpp_set[_EEE].iterator it__r = _r.begin()
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":405
 *         in_0.update(replace)
 *         del v0
 *         py_result = set()             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 */
  __pyx_t_5 = PySet_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":406
 *         del v0
 *         py_result = set()
 *         cdef libcpp_set[_EEE].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         while it__r != _r.end():
 *            py_result.add(<int>deref(it__r))
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":407
 *         py_result = set()
 *         cdef libcpp_set[_EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            py_result.add(<int>deref(it__r))
 *            inc(it__r)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":408
 *         cdef libcpp_set[_EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 *            py_result.add(<int>deref(it__r))             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it__r))); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = PySet_Add(__pyx_v_py_result, __pyx_t_5); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":409
 *         while it__r != _r.end():
 *            py_result.add(<int>deref(it__r))
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":410
 *            py_result.add(<int>deref(it__r))
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process11(self, set in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":389
 *         return py_result
 * 
 *     def process10(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[EEE] process10(libcpp_set[EEE] &)"""
 *         assert isinstance(in_0, set) and all(li in [0, 1] for li in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process10", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":412
 *         return py_result
 * 
 *     def process11(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_35process11(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_34process11[] = "Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_35process11(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process11 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PySet_Type), 1, "in_0", 1))) __PYX_ERR(1, 412, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_34process11(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process11_2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":414
 *     def process11(self, set in_0 ):
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_LibCppTest] * v0 = new libcpp_set[_LibCppTest]()
 *         cdef LibCppTest item0
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process11_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_11_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 414, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process11_2generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process11_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process11.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process11_2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 414, __pyx_L1_error)
  __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 414, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0, 1, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_li, __pyx_ptype_14py_libcpp_test_LibCppTest); 
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    if (__pyx_t_8) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":412
 *         return py_result
 * 
 *     def process11(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_34process11(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *__pyx_cur_scope;
  std::set<LibCppTest>  *__pyx_v_v0;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_item0 = 0;
  std::set<LibCppTest>  __pyx_v__r;
  PyObject *__pyx_v_replace = NULL;
  std::set<LibCppTest> ::iterator __pyx_v_it_in_0;
  PyObject *__pyx_v_py_result = NULL;
  std::set<LibCppTest> ::iterator __pyx_v_it__r;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::set<LibCppTest>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process11", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_10_process11(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_10_process11, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 412, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "py_libcpp_test.pyx":414
 *     def process11(self, set in_0 ):
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_LibCppTest] * v0 = new libcpp_set[_LibCppTest]()
 *         cdef LibCppTest item0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PySet_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process11_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 414, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":415
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_set[_LibCppTest] * v0 = new libcpp_set[_LibCppTest]()             # <<<<<<<<<<<<<<
 *         cdef LibCppTest item0
 *         for item0 in in_0:
 */
  try {
    __pyx_t_6 = new std::set<LibCppTest> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 415, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":417
 *         cdef libcpp_set[_LibCppTest] * v0 = new libcpp_set[_LibCppTest]()
 *         cdef LibCppTest item0
 *         for item0 in in_0:             # <<<<<<<<<<<<<<
 *            v0.insert(deref(item0.inst.get()))
 *         _r = self.inst.get().process11(deref(v0))
 */
  __pyx_t_7 = 0;
  __pyx_t_2 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_v_in_0, 1, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __pyx_t_5 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_set_iter_next(__pyx_t_5, __pyx_t_8, &__pyx_t_7, &__pyx_t_2, __pyx_t_9);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(1, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14py_libcpp_test_LibCppTest))))) __PYX_ERR(1, 417, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item0, ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":418
 *         cdef LibCppTest item0
 *         for item0 in in_0:
 *            v0.insert(deref(item0.inst.get()))             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().process11(deref(v0))
 *         replace = set()
 */
    try {
      __pyx_v_v0->insert((*__pyx_v_item0->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 418, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":419
 *         for item0 in in_0:
 *            v0.insert(deref(item0.inst.get()))
 *         _r = self.inst.get().process11(deref(v0))             # <<<<<<<<<<<<<<
 *         replace = set()
 *         cdef libcpp_set[_LibCppTest].iterator it_in_0 = v0.begin()
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process11((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":420
 *            v0.insert(deref(item0.inst.get()))
 *         _r = self.inst.get().process11(deref(v0))
 *         replace = set()             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_LibCppTest].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():
 */
  __pyx_t_5 = PySet_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_replace = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":421
 *         _r = self.inst.get().process11(deref(v0))
 *         replace = set()
 *         cdef libcpp_set[_LibCppTest].iterator it_in_0 = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_0 != v0.end():
 *            item0 = LibCppTest.__new__(LibCppTest)
 */
  __pyx_v_it_in_0 = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":422
 *         replace = set()
 *         cdef libcpp_set[_LibCppTest].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():             # <<<<<<<<<<<<<<
 *            item0 = LibCppTest.__new__(LibCppTest)
 *            item0.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it_in_0)))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_0 != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":423
 *         cdef libcpp_set[_LibCppTest].iterator it_in_0 = v0.begin()
 *         while it_in_0 != v0.end():
 *            item0 = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *            item0.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it_in_0)))
 *            replace.add(item0)
 */
    __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 423, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_XDECREF_SET(__pyx_v_item0, ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":424
 *         while it_in_0 != v0.end():
 *            item0 = LibCppTest.__new__(LibCppTest)
 *            item0.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it_in_0)))             # <<<<<<<<<<<<<<
 *            replace.add(item0)
 *            inc(it_in_0)
 */
    __pyx_v_item0->inst = boost::shared_ptr<LibCppTest> (new LibCppTest((*__pyx_v_it_in_0)));

    /* "py_libcpp_test.pyx":425
 *            item0 = LibCppTest.__new__(LibCppTest)
 *            item0.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it_in_0)))
 *            replace.add(item0)             # <<<<<<<<<<<<<<
 *            inc(it_in_0)
 *         in_0.clear()
 */
    __pyx_t_11 = PySet_Add(__pyx_v_replace, ((PyObject *)__pyx_v_item0)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 425, __pyx_L1_error)

    /* "py_libcpp_test.pyx":426
 *            item0.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it_in_0)))
 *            replace.add(item0)
 *            inc(it_in_0)             # <<<<<<<<<<<<<<
 *         in_0.clear()
 *         in_0.update(replace)
 */
    (void)((++__pyx_v_it_in_0));
  }

  /* "py_libcpp_test.pyx":427
 *            replace.add(item0)
 *            inc(it_in_0)
 *         in_0.clear()             # <<<<<<<<<<<<<<
 *         in_0.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 427, __pyx_L1_error)
  }
  __pyx_t_11 = PySet_Clear(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 427, __pyx_L1_error)

  /* "py_libcpp_test.pyx":428
 *            inc(it_in_0)
 *         in_0.clear()
 *         in_0.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 *         py_result = set()
 */
  __pyx_t_5 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_cur_scope->__pyx_v_in_0, __pyx_v_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":429
 *         in_0.clear()
 *         in_0.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 *         py_result = set()
 *         cdef libcpp_set[_LibCppTest].iterator it__r = _r.begin()
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":430
 *         in_0.update(replace)
 *         del v0
 *         py_result = set()             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[_LibCppTest].iterator it__r = _r.begin()
 *         cdef LibCppTest item_py_result
 */
  __pyx_t_5 = PySet_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":431
 *         del v0
 *         py_result = set()
 *         cdef libcpp_set[_LibCppTest].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef LibCppTest item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":433
 *         cdef libcpp_set[_LibCppTest].iterator it__r = _r.begin()
 *         cdef LibCppTest item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = LibCppTest.__new__(LibCppTest)
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it__r)))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":434
 *         cdef LibCppTest item_py_result
 *         while it__r != _r.end():
 *            item_py_result = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it__r)))
 *            py_result.add(item_py_result)
 */
    __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 434, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":435
 *         while it__r != _r.end():
 *            item_py_result = LibCppTest.__new__(LibCppTest)
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it__r)))             # <<<<<<<<<<<<<<
 *            py_result.add(item_py_result)
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<LibCppTest> (new LibCppTest((*__pyx_v_it__r)));

    /* "py_libcpp_test.pyx":436
 *            item_py_result = LibCppTest.__new__(LibCppTest)
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it__r)))
 *            py_result.add(item_py_result)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_11 = PySet_Add(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 436, __pyx_L1_error)

    /* "py_libcpp_test.pyx":437
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest(deref(it__r)))
 *            py_result.add(item_py_result)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":438
 *            py_result.add(item_py_result)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process12(self,  i , float f ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":412
 *         return py_result
 * 
 *     def process11(self, set in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_set[LibCppTest] process11(libcpp_set[LibCppTest] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, LibCppTest) for li in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process11", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0);
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":440
 *         return py_result
 * 
 *     def process12(self,  i , float f ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[int,float] process12(int i, float f)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_37process12(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_36process12[] = "Cython signature: libcpp_map[int,float] process12(int i, float f)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_37process12(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_i = 0;
  float __pyx_v_f;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process12 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_f,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process12", 1, 2, 2, 1); __PYX_ERR(1, 440, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process12") < 0)) __PYX_ERR(1, 440, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = values[0];
    __pyx_v_f = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_f == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 440, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process12", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 440, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process12", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_36process12(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_i, __pyx_v_f);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_36process12(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_i, float __pyx_v_f) {
  std::map<int,float>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::map<int,float> ::iterator __pyx_v_it__r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process12", 0);

  /* "py_libcpp_test.pyx":442
 *     def process12(self,  i , float f ):
 *         """Cython signature: libcpp_map[int,float] process12(int i, float f)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(f, float), 'arg f wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_i_wrong_type);
      __PYX_ERR(1, 442, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":443
 *         """Cython signature: libcpp_map[int,float] process12(int i, float f)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 *         assert isinstance(f, float), 'arg f wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_f); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_f_wrong_type);
      __PYX_ERR(1, 443, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":446
 * 
 * 
 *         _r = self.inst.get().process12((<int>i), (<float>f))             # <<<<<<<<<<<<<<
 *         py_result = dict()
 *         cdef libcpp_map[int, float].iterator it__r = _r.begin()
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 446, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->process12(((int)__pyx_t_5), ((float)__pyx_v_f));

  /* "py_libcpp_test.pyx":447
 * 
 *         _r = self.inst.get().process12((<int>i), (<float>f))
 *         py_result = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_py_result = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "py_libcpp_test.pyx":448
 *         _r = self.inst.get().process12((<int>i), (<float>f))
 *         py_result = dict()
 *         cdef libcpp_map[int, float].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         while it__r != _r.end():
 *            py_result[<int>(deref(it__r).first)] = <float>(deref(it__r).second)
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":449
 *         py_result = dict()
 *         cdef libcpp_map[int, float].iterator it__r = _r.begin()
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            py_result[<int>(deref(it__r).first)] = <float>(deref(it__r).second)
 *            inc(it__r)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":450
 *         cdef libcpp_map[int, float].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 *            py_result[<int>(deref(it__r).first)] = <float>(deref(it__r).second)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_4 = PyFloat_FromDouble(((float)(*__pyx_v_it__r).second)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it__r).first)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_py_result, __pyx_t_6, __pyx_t_4) < 0)) __PYX_ERR(1, 450, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "py_libcpp_test.pyx":451
 *         while it__r != _r.end():
 *            py_result[<int>(deref(it__r).first)] = <float>(deref(it__r).second)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":452
 *            py_result[<int>(deref(it__r).first)] = <float>(deref(it__r).second)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process13(self, int e ,  i ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":440
 *         return py_result
 * 
 *     def process12(self,  i , float f ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[int,float] process12(int i, float f)"""
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process12", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":454
 *         return py_result
 * 
 *     def process13(self, int e ,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[EEE,int] process13(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_39process13(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_38process13[] = "Cython signature: libcpp_map[EEE,int] process13(EEE e, int i)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_39process13(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_e;
  PyObject *__pyx_v_i = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process13 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_e,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process13", 1, 2, 2, 1); __PYX_ERR(1, 454, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process13") < 0)) __PYX_ERR(1, 454, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_e = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_e == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 454, __pyx_L3_error)
    __pyx_v_i = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process13", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 454, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process13", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_38process13(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_e, __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_38process13(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, int __pyx_v_e, PyObject *__pyx_v_i) {
  std::map<enum EEE,int>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::map<enum EEE,int> ::iterator __pyx_v_it__r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process13", 0);

  /* "py_libcpp_test.pyx":456
 *     def process13(self, int e ,  i ):
 *         """Cython signature: libcpp_map[EEE,int] process13(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    switch (__pyx_v_e) {
      case 0:
      case 1:
      __pyx_t_1 = 1;
      break;
      default:
      __pyx_t_1 = 0;
      break;
    }
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_e_wrong_type);
      __PYX_ERR(1, 456, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":457
 *         """Cython signature: libcpp_map[EEE,int] process13(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'
 *         assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_i_wrong_type);
      __PYX_ERR(1, 457, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":460
 * 
 * 
 *         _r = self.inst.get().process13((<_EEE>e), (<int>i))             # <<<<<<<<<<<<<<
 *         py_result = dict()
 *         cdef libcpp_map[_EEE, int].iterator it__r = _r.begin()
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 460, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->process13(((enum EEE)__pyx_v_e), ((int)__pyx_t_4));

  /* "py_libcpp_test.pyx":461
 * 
 *         _r = self.inst.get().process13((<_EEE>e), (<int>i))
 *         py_result = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[_EEE, int].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":462
 *         _r = self.inst.get().process13((<_EEE>e), (<int>i))
 *         py_result = dict()
 *         cdef libcpp_map[_EEE, int].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         while it__r != _r.end():
 *            py_result[<_EEE>(deref(it__r).first)] = <int>(deref(it__r).second)
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":463
 *         py_result = dict()
 *         cdef libcpp_map[_EEE, int].iterator it__r = _r.begin()
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            py_result[<_EEE>(deref(it__r).first)] = <int>(deref(it__r).second)
 *            inc(it__r)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":464
 *         cdef libcpp_map[_EEE, int].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 *            py_result[<_EEE>(deref(it__r).first)] = <int>(deref(it__r).second)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it__r).second)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_enum__EEE(((enum EEE)(*__pyx_v_it__r).first)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_py_result, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(1, 464, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":465
 *         while it__r != _r.end():
 *            py_result[<_EEE>(deref(it__r).first)] = <int>(deref(it__r).second)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":466
 *            py_result[<_EEE>(deref(it__r).first)] = <int>(deref(it__r).second)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process14(self, int e ,  i ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":454
 *         return py_result
 * 
 *     def process13(self, int e ,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[EEE,int] process13(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process13", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":468
 *         return py_result
 * 
 *     def process14(self, int e ,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[int,EEE] process14(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_41process14(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_40process14[] = "Cython signature: libcpp_map[int,EEE] process14(EEE e, int i)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_41process14(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_e;
  PyObject *__pyx_v_i = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process14 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_e,&__pyx_n_s_i,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process14", 1, 2, 2, 1); __PYX_ERR(1, 468, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process14") < 0)) __PYX_ERR(1, 468, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_e = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_e == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 468, __pyx_L3_error)
    __pyx_v_i = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process14", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 468, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process14", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_40process14(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_e, __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_40process14(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, int __pyx_v_e, PyObject *__pyx_v_i) {
  std::map<int,enum EEE>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::map<int,enum EEE> ::iterator __pyx_v_it__r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process14", 0);

  /* "py_libcpp_test.pyx":470
 *     def process14(self, int e ,  i ):
 *         """Cython signature: libcpp_map[int,EEE] process14(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    switch (__pyx_v_e) {
      case 0:
      case 1:
      __pyx_t_1 = 1;
      break;
      default:
      __pyx_t_1 = 0;
      break;
    }
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_e_wrong_type);
      __PYX_ERR(1, 470, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":471
 *         """Cython signature: libcpp_map[int,EEE] process14(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'
 *         assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_i_wrong_type);
      __PYX_ERR(1, 471, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":474
 * 
 * 
 *         _r = self.inst.get().process14((<_EEE>e), (<int>i))             # <<<<<<<<<<<<<<
 *         py_result = dict()
 *         cdef libcpp_map[int, _EEE].iterator it__r = _r.begin()
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 474, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->process14(((enum EEE)__pyx_v_e), ((int)__pyx_t_4));

  /* "py_libcpp_test.pyx":475
 * 
 *         _r = self.inst.get().process14((<_EEE>e), (<int>i))
 *         py_result = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":476
 *         _r = self.inst.get().process14((<_EEE>e), (<int>i))
 *         py_result = dict()
 *         cdef libcpp_map[int, _EEE].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         while it__r != _r.end():
 *            py_result[<int>(deref(it__r).first)] = <_EEE>(deref(it__r).second)
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":477
 *         py_result = dict()
 *         cdef libcpp_map[int, _EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            py_result[<int>(deref(it__r).first)] = <_EEE>(deref(it__r).second)
 *            inc(it__r)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":478
 *         cdef libcpp_map[int, _EEE].iterator it__r = _r.begin()
 *         while it__r != _r.end():
 *            py_result[<int>(deref(it__r).first)] = <_EEE>(deref(it__r).second)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum__EEE(((enum EEE)(*__pyx_v_it__r).second)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it__r).first)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyDict_SetItem(__pyx_v_py_result, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(1, 478, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":479
 *         while it__r != _r.end():
 *            py_result[<int>(deref(it__r).first)] = <_EEE>(deref(it__r).second)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":480
 *            py_result[<int>(deref(it__r).first)] = <_EEE>(deref(it__r).second)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process15(self,  ii ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":468
 *         return py_result
 * 
 *     def process14(self, int e ,  i ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[int,EEE] process14(EEE e, int i)"""
 *         assert e in [0, 1], 'arg e wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process14", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":482
 *         return py_result
 * 
 *     def process15(self,  ii ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[long int,LibCppTest] process15(int ii)"""
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_43process15(PyObject *__pyx_v_self, PyObject *__pyx_v_ii); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_42process15[] = "Cython signature: libcpp_map[long int,LibCppTest] process15(int ii)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_43process15(PyObject *__pyx_v_self, PyObject *__pyx_v_ii) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process15 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_42process15(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject *)__pyx_v_ii));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_42process15(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_ii) {
  std::map<long,LibCppTest>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::map<long,LibCppTest> ::iterator __pyx_v_it__r;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process15", 0);

  /* "py_libcpp_test.pyx":484
 *     def process15(self,  ii ):
 *         """Cython signature: libcpp_map[long int,LibCppTest] process15(int ii)"""
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'             # <<<<<<<<<<<<<<
 * 
 *         _r = self.inst.get().process15((<int>ii))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_ii); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_ii); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_ii_wrong_type);
      __PYX_ERR(1, 484, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":486
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'
 * 
 *         _r = self.inst.get().process15((<int>ii))             # <<<<<<<<<<<<<<
 *         py_result = dict()
 *         cdef libcpp_map[long int, _LibCppTest].iterator it__r = _r.begin()
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_ii); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 486, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->process15(((int)__pyx_t_4));

  /* "py_libcpp_test.pyx":487
 * 
 *         _r = self.inst.get().process15((<int>ii))
 *         py_result = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[long int, _LibCppTest].iterator it__r = _r.begin()
 *         cdef LibCppTest item_py_result
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":488
 *         _r = self.inst.get().process15((<int>ii))
 *         py_result = dict()
 *         cdef libcpp_map[long int, _LibCppTest].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef LibCppTest item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "py_libcpp_test.pyx":490
 *         cdef libcpp_map[long int, _LibCppTest].iterator it__r = _r.begin()
 *         cdef LibCppTest item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = LibCppTest.__new__(LibCppTest)
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it__r)).second))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":491
 *         cdef LibCppTest item_py_result
 *         while it__r != _r.end():
 *            item_py_result = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it__r)).second))
 *            py_result[<long int>(deref(it__r).first)] = item_py_result
 */
    __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 491, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":492
 *         while it__r != _r.end():
 *            item_py_result = LibCppTest.__new__(LibCppTest)
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it__r)).second))             # <<<<<<<<<<<<<<
 *            py_result[<long int>(deref(it__r).first)] = item_py_result
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<LibCppTest> (new LibCppTest((*__pyx_v_it__r).second));

    /* "py_libcpp_test.pyx":493
 *            item_py_result = LibCppTest.__new__(LibCppTest)
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it__r)).second))
 *            py_result[<long int>(deref(it__r).first)] = item_py_result             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_5 = __Pyx_PyInt_From_long(((long)(*__pyx_v_it__r).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_py_result, __pyx_t_5, ((PyObject *)__pyx_v_item_py_result)) < 0)) __PYX_ERR(1, 493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":494
 *            item_py_result.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it__r)).second))
 *            py_result[<long int>(deref(it__r).first)] = item_py_result
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (void)((++__pyx_v_it__r));
  }

  /* "py_libcpp_test.pyx":495
 *            py_result[<long int>(deref(it__r).first)] = item_py_result
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process16(self, dict in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":482
 *         return py_result
 * 
 *     def process15(self,  ii ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_map[long int,LibCppTest] process15(int ii)"""
 *         assert isinstance(ii, (int, long)), 'arg ii wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process15", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":497
 *         return py_result
 * 
 *     def process16(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_45process16(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_44process16[] = "Cython signature: float process16(libcpp_map[int,float] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_45process16(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process16 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 497, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_44process16(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process16_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":499
 *     def process16(self, dict in_ ):
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process16_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_13_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_13_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 499, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process16_2generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process16_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process16.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process16_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 499, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 499, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 499, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 499, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 499, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 499, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 499, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process16_5generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process16_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_14_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 499, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process16_5generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process16_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process16.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process16_5generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 499, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 499, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 499, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 499, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 499, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 499, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 499, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":497
 *         return py_result
 * 
 *     def process16(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_44process16(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *__pyx_cur_scope;
  std::map<int,float>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,float>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  float __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process16", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_12_process16(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_12_process16, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 497, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":499
 *     def process16(self, dict in_ ):
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process16_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process16_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 499, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":500
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,float> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 500, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":501
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 501, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 501, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 501, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 501, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 501, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 501, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 501, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 501, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 501, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 501, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":504
 * 
 * 
 *             deref(v0)[ (<int>key) ] = (<float>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 504, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 504, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_14)]) = ((float)__pyx_t_13);

    /* "py_libcpp_test.pyx":501
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":507
 * 
 * 
 *         cdef float _r = self.inst.get().process16(deref(v0))             # <<<<<<<<<<<<<<
 *         del v0
 *         py_result = <float>_r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process16((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":508
 * 
 *         cdef float _r = self.inst.get().process16(deref(v0))
 *         del v0             # <<<<<<<<<<<<<<
 *         py_result = <float>_r
 *         return py_result
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":509
 *         cdef float _r = self.inst.get().process16(deref(v0))
 *         del v0
 *         py_result = <float>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":510
 *         del v0
 *         py_result = <float>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process17(self, dict in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":497
 *         return py_result
 * 
 *     def process16(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process16(libcpp_map[int,float] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":512
 *         return py_result
 * 
 *     def process17(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_47process17(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_46process17[] = "Cython signature: float process17(libcpp_map[EEE,float] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_47process17(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process17 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 512, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_46process17(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process17_2generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":514
 *     def process17(self, dict in_ ):
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[_EEE, float] * v0 = new libcpp_map[_EEE, float]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process17_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_16_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_16_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 514, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process17_2generator8, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process17_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process17.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process17_2generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 514, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 514, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 514, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_k;
    __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process17_5generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process17_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_17_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_17_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 514, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process17_5generator9, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process17_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process17.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process17_5generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 514, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 514, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 514, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":512
 *         return py_result
 * 
 *     def process17(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_46process17(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *__pyx_cur_scope;
  std::map<enum EEE,float>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  float __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<enum EEE,float>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  float __pyx_t_13;
  enum EEE __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process17", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_15_process17(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_15_process17, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 512, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":514
 *     def process17(self, dict in_ ):
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[_EEE, float] * v0 = new libcpp_map[_EEE, float]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process17_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process17_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 514, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":515
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[_EEE, float] * v0 = new libcpp_map[_EEE, float]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<enum EEE,float> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 515, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":516
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[_EEE, float] * v0 = new libcpp_map[_EEE, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 516, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 516, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 516, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 516, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 516, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 516, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 516, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 516, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":519
 * 
 * 
 *             deref(v0)[ <_EEE> key ] = (<float>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 519, __pyx_L1_error)
    __pyx_t_14 = ((enum EEE)__Pyx_PyInt_As_enum__EEE(__pyx_v_key)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 519, __pyx_L1_error)
    ((*__pyx_v_v0)[((enum EEE)__pyx_t_14)]) = ((float)__pyx_t_13);

    /* "py_libcpp_test.pyx":516
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[_EEE, float] * v0 = new libcpp_map[_EEE, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":522
 * 
 * 
 *         cdef float _r = self.inst.get().process17(deref(v0))             # <<<<<<<<<<<<<<
 *         del v0
 *         py_result = <float>_r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process17((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":523
 * 
 *         cdef float _r = self.inst.get().process17(deref(v0))
 *         del v0             # <<<<<<<<<<<<<<
 *         py_result = <float>_r
 *         return py_result
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":524
 *         cdef float _r = self.inst.get().process17(deref(v0))
 *         del v0
 *         py_result = <float>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble(((float)__pyx_v__r)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":525
 *         del v0
 *         py_result = <float>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process18(self, dict in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":512
 *         return py_result
 * 
 *     def process17(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: float process17(libcpp_map[EEE,float] in_)"""
 *         assert isinstance(in_, dict) and all(k in [0, 1] for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process17", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":527
 *         return py_result
 * 
 *     def process18(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_49process18(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_48process18[] = "Cython signature: int process18(libcpp_map[int,LibCppTest] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_49process18(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process18 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 527, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_48process18(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process18_2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":529
 *     def process18(self, dict in_ ):
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process18_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_19_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_19_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 529, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process18_2generator10, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process18_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process18.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process18_2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 529, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 529, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 529, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 529, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 529, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 529, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 529, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process18_5generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process18_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_20_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_20_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 529, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process18_5generator11, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process18_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process18.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process18_5generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 529, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 529, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 529, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 529, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 529, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 529, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 529, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_v, __pyx_ptype_14py_libcpp_test_LibCppTest); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":527
 *         return py_result
 * 
 *     def process18(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_48process18(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *__pyx_cur_scope;
  std::map<int,LibCppTest>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,LibCppTest>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process18", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_18_process18(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_18_process18, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 527, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":529
 *     def process18(self, dict in_ ):
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process18_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process18_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 529, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":530
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,LibCppTest> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 530, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":531
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 531, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 531, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 531, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 531, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 531, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 531, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 531, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 531, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 531, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 531, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 531, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":534
 * 
 * 
 *             deref(v0)[ (<int>key) ] = deref((<LibCppTest>value).inst.get())             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 534, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_13)]) = (*((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_value)->inst.get());

    /* "py_libcpp_test.pyx":531
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":537
 * 
 * 
 *         cdef int _r = self.inst.get().process18(deref(v0))             # <<<<<<<<<<<<<<
 *         del v0
 *         py_result = <int>_r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process18((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":538
 * 
 *         cdef int _r = self.inst.get().process18(deref(v0))
 *         del v0             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":539
 *         cdef int _r = self.inst.get().process18(deref(v0))
 *         del v0
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":540
 *         del v0
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process19(self, dict in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":527
 *         return py_result
 * 
 *     def process18(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process18(libcpp_map[int,LibCppTest] in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process18", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":542
 *         return py_result
 * 
 *     def process19(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_51process19(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_50process19[] = "Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_51process19(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process19 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 542, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_50process19(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process19_2generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":544
 *     def process19(self, dict in_ ):
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process19_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_22_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_22_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 544, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process19_2generator12, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process19_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process19.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process19_2generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 544, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 544, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 544, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 544, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 544, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 544, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 544, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process19_5generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process19_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_23_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_23_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 544, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process19_5generator13, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process19_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process19.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process19_5generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 544, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 544, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 544, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 544, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 544, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 544, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 544, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_v, __pyx_ptype_14py_libcpp_test_LibCppTest); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":542
 *         return py_result
 * 
 *     def process19(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_50process19(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *__pyx_cur_scope;
  std::map<int,LibCppTest>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_replace = NULL;
  std::map<int,LibCppTest> ::iterator __pyx_v_it_in_;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_item_in_ = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,LibCppTest>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process19", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_21_process19(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_21_process19, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 542, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":544
 *     def process19(self, dict in_ ):
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process19_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process19_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 544, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":545
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,LibCppTest> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 545, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":546
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 546, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 546, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 546, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 546, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 546, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 546, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 546, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 546, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":549
 * 
 * 
 *             deref(v0)[ (<int>key) ] = deref((<LibCppTest>value).inst.get())             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 549, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_13)]) = (*((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_value)->inst.get());

    /* "py_libcpp_test.pyx":546
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, _LibCppTest] * v0 = new libcpp_map[int, _LibCppTest]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":552
 * 
 * 
 *         self.inst.get().process19(deref(v0))             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[int, _LibCppTest].iterator it_in_ = v0.begin()
 */
  __pyx_v_self->inst.get()->process19((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":553
 * 
 *         self.inst.get().process19(deref(v0))
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, _LibCppTest].iterator it_in_ = v0.begin()
 *         cdef LibCppTest item_in_
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_replace = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":554
 *         self.inst.get().process19(deref(v0))
 *         replace = dict()
 *         cdef libcpp_map[int, _LibCppTest].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         cdef LibCppTest item_in_
 *         while it_in_ != v0.end():
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":556
 *         cdef libcpp_map[int, _LibCppTest].iterator it_in_ = v0.begin()
 *         cdef LibCppTest item_in_
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *            item_in_ = LibCppTest.__new__(LibCppTest)
 *            item_in_.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it_in_)).second))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":557
 *         cdef LibCppTest item_in_
 *         while it_in_ != v0.end():
 *            item_in_ = LibCppTest.__new__(LibCppTest)             # <<<<<<<<<<<<<<
 *            item_in_.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it_in_)).second))
 *            replace[<int> deref(it_in_).first] = item_in_
 */
    __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_LibCppTest(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_LibCppTest), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 557, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_XDECREF_SET(__pyx_v_item_in_, ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":558
 *         while it_in_ != v0.end():
 *            item_in_ = LibCppTest.__new__(LibCppTest)
 *            item_in_.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it_in_)).second))             # <<<<<<<<<<<<<<
 *            replace[<int> deref(it_in_).first] = item_in_
 *            inc(it_in_)
 */
    __pyx_v_item_in_->inst = boost::shared_ptr<LibCppTest> (new LibCppTest((*__pyx_v_it_in_).second));

    /* "py_libcpp_test.pyx":559
 *            item_in_ = LibCppTest.__new__(LibCppTest)
 *            item_in_.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it_in_)).second))
 *            replace[<int> deref(it_in_).first] = item_in_             # <<<<<<<<<<<<<<
 *            inc(it_in_)
 *         in_.clear()
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, ((PyObject *)__pyx_v_item_in_)) < 0)) __PYX_ERR(1, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":560
 *            item_in_.inst = shared_ptr[_LibCppTest](new _LibCppTest((deref(it_in_)).second))
 *            replace[<int> deref(it_in_).first] = item_in_
 *            inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_.clear()
 *         in_.update(replace)
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":561
 *            replace[<int> deref(it_in_).first] = item_in_
 *            inc(it_in_)
 *         in_.clear()             # <<<<<<<<<<<<<<
 *         in_.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 561, __pyx_L1_error)
  }
  __pyx_t_14 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_in_); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 561, __pyx_L1_error)

  /* "py_libcpp_test.pyx":562
 *            inc(it_in_)
 *         in_.clear()
 *         in_.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  __pyx_t_5 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_in_, __pyx_v_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":563
 *         in_.clear()
 *         in_.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process20(self, dict in_ ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":542
 *         return py_result
 * 
 *     def process19(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process19(libcpp_map[int,LibCppTest] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, LibCppTest) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process19", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_in_);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":565
 *         del v0
 * 
 *     def process20(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_53process20(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_52process20[] = "Cython signature: void process20(libcpp_map[int,float] & in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_53process20(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process20 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 565, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_52process20(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process20_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":567
 *     def process20(self, dict in_ ):
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process20_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_25_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_25_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 567, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process20_2generator14, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process20_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process20.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process20_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 567, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 567, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 567, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 567, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 567, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process20_5generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process20_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_26_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_26_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 567, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process20_5generator15, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process20_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process20.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process20_5generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 567, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 567, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 567, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 567, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 567, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":565
 *         del v0
 * 
 *     def process20(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_52process20(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *__pyx_cur_scope;
  std::map<int,float>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_replace = NULL;
  std::map<int,float> ::iterator __pyx_v_it_in_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,float>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  float __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process20", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_24_process20(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_24_process20, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 565, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":567
 *     def process20(self, dict in_ ):
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process20_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process20_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 567, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":568
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,float> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 568, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":569
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 569, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 569, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 569, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 569, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 569, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 569, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 569, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 569, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 569, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 569, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":572
 * 
 * 
 *             deref(v0)[ (<int>key) ] = (<float>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 572, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 572, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_14)]) = ((float)__pyx_t_13);

    /* "py_libcpp_test.pyx":569
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":575
 * 
 * 
 *         self.inst.get().process20(deref(v0))             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 */
  __pyx_v_self->inst.get()->process20((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":576
 * 
 *         self.inst.get().process20(deref(v0))
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_replace = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":577
 *         self.inst.get().process20(deref(v0))
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":578
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":579
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second             # <<<<<<<<<<<<<<
 *            inc(it_in_)
 *         in_.clear()
 */
    __pyx_t_5 = PyFloat_FromDouble(((float)(*__pyx_v_it_in_).second)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_).first)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_2, __pyx_t_5) < 0)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":580
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_.clear()
 *         in_.update(replace)
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":581
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 *         in_.clear()             # <<<<<<<<<<<<<<
 *         in_.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 581, __pyx_L1_error)
  }
  __pyx_t_15 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_in_); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(1, 581, __pyx_L1_error)

  /* "py_libcpp_test.pyx":582
 *            inc(it_in_)
 *         in_.clear()
 *         in_.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  __pyx_t_5 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_in_, __pyx_v_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":583
 *         in_.clear()
 *         in_.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process21(self, dict in_ , dict arg2 ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":565
 *         del v0
 * 
 *     def process20(self, dict in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process20(libcpp_map[int,float] & in_)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process20", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":585
 *         del v0
 * 
 *     def process21(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_55process21(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_54process21[] = "Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_55process21(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_ = 0;
  PyObject *__pyx_v_arg2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process21 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process21", 1, 2, 2, 1); __PYX_ERR(1, 585, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process21") < 0)) __PYX_ERR(1, 585, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_ = ((PyObject*)values[0]);
    __pyx_v_arg2 = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process21", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 585, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process21", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 585, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg2), (&PyDict_Type), 1, "arg2", 1))) __PYX_ERR(1, 585, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_54process21(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_in_, __pyx_v_arg2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_2generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":587
 *     def process21(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_28_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_28_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 587, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process21_2generator16, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process21_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process21.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_2generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 587, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 587, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 587, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 587, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 587, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 587, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 587, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_5generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_29_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_29_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 587, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process21_5generator17, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process21_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process21.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_5generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 587, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 587, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 587, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 587, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 587, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 587, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 587, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_8generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":588
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_6genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_30_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_30_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 588, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process21_8generator18, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process21_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process21.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_8generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 588, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 588, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 588, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 588, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 588, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 588, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 588, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_11generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process21_9genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_31_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_31_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 588, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process21_11generator19, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process21_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process21.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process21_11generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 588, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 588, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 588, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 588, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 588, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 588, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 588, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":585
 *         del v0
 * 
 *     def process21(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_54process21(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *__pyx_cur_scope;
  std::map<int,float>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<int,int>  *__pyx_v_v1;
  PyObject *__pyx_v_replace = NULL;
  std::map<int,int> ::iterator __pyx_v_it_arg2;
  std::map<int,float> ::iterator __pyx_v_it_in_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,float>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  float __pyx_t_13;
  int __pyx_t_14;
  std::map<int,int>  *__pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process21", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_27_process21(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_27_process21, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 585, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);
  __pyx_cur_scope->__pyx_v_arg2 = __pyx_v_arg2;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arg2);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arg2);

  /* "py_libcpp_test.pyx":587
 *     def process21(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process21_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process21_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 587, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":588
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_arg2;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process21_6genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process21_9genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_arg2_wrong_type);
      __PYX_ERR(1, 588, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":589
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,float> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 589, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":590
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 590, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 590, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 590, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 590, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 590, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 590, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 590, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 590, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 590, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 590, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 590, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":593
 * 
 * 
 *             deref(v0)[ (<int>key) ] = (<float>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 593, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 593, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_14)]) = ((float)__pyx_t_13);

    /* "py_libcpp_test.pyx":590
 *         assert isinstance(arg2, dict) and all(isinstance(k, (int, long)) for k in arg2.keys()) and all(isinstance(v, (int, long)) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":596
 * 
 * 
 *         cdef libcpp_map[int, int] * v1 = new libcpp_map[int, int]()             # <<<<<<<<<<<<<<
 *         for key, value in arg2.items():
 * 
 */
  try {
    __pyx_t_15 = new std::map<int,int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 596, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_15;

  /* "py_libcpp_test.pyx":597
 * 
 *         cdef libcpp_map[int, int] * v1 = new libcpp_map[int, int]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 597, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 597, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 597, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 597, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 597, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 597, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 597, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 597, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 597, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 597, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "py_libcpp_test.pyx":600
 * 
 * 
 *             deref(v1)[ (<int>key) ] = (<int>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 600, __pyx_L1_error)
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 600, __pyx_L1_error)
    ((*__pyx_v_v1)[((int)__pyx_t_16)]) = ((int)__pyx_t_14);

    /* "py_libcpp_test.pyx":597
 * 
 *         cdef libcpp_map[int, int] * v1 = new libcpp_map[int, int]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":603
 * 
 * 
 *         self.inst.get().process21(deref(v0), deref(v1))             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[int, int].iterator it_arg2 = v1.begin()
 */
  __pyx_v_self->inst.get()->process21((*__pyx_v_v0), (*__pyx_v_v1));

  /* "py_libcpp_test.pyx":604
 * 
 *         self.inst.get().process21(deref(v0), deref(v1))
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, int].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_replace = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":605
 *         self.inst.get().process21(deref(v0), deref(v1))
 *         replace = dict()
 *         cdef libcpp_map[int, int].iterator it_arg2 = v1.begin()             # <<<<<<<<<<<<<<
 *         while it_arg2 != v1.end():
 *            replace[<int> deref(it_arg2).first] = <int> deref(it_arg2).second
 */
  __pyx_v_it_arg2 = __pyx_v_v1->begin();

  /* "py_libcpp_test.pyx":606
 *         replace = dict()
 *         cdef libcpp_map[int, int].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():             # <<<<<<<<<<<<<<
 *            replace[<int> deref(it_arg2).first] = <int> deref(it_arg2).second
 *            inc(it_arg2)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_arg2 != __pyx_v_v1->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":607
 *         cdef libcpp_map[int, int].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 *            replace[<int> deref(it_arg2).first] = <int> deref(it_arg2).second             # <<<<<<<<<<<<<<
 *            inc(it_arg2)
 *         arg2.clear()
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_arg2).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_arg2).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 607, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":608
 *         while it_arg2 != v1.end():
 *            replace[<int> deref(it_arg2).first] = <int> deref(it_arg2).second
 *            inc(it_arg2)             # <<<<<<<<<<<<<<
 *         arg2.clear()
 *         arg2.update(replace)
 */
    (void)((++__pyx_v_it_arg2));
  }

  /* "py_libcpp_test.pyx":609
 *            replace[<int> deref(it_arg2).first] = <int> deref(it_arg2).second
 *            inc(it_arg2)
 *         arg2.clear()             # <<<<<<<<<<<<<<
 *         arg2.update(replace)
 *         del v1
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 609, __pyx_L1_error)
  }
  __pyx_t_17 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(1, 609, __pyx_L1_error)

  /* "py_libcpp_test.pyx":610
 *            inc(it_arg2)
 *         arg2.clear()
 *         arg2.update(replace)             # <<<<<<<<<<<<<<
 *         del v1
 *         replace = dict()
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_arg2, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":611
 *         arg2.clear()
 *         arg2.update(replace)
 *         del v1             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 */
  delete __pyx_v_v1;

  /* "py_libcpp_test.pyx":612
 *         arg2.update(replace)
 *         del v1
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_replace, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":613
 *         del v1
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":614
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":615
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second             # <<<<<<<<<<<<<<
 *            inc(it_in_)
 *         in_.clear()
 */
    __pyx_t_2 = PyFloat_FromDouble(((float)(*__pyx_v_it_in_).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 615, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":616
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_.clear()
 *         in_.update(replace)
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":617
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 *         in_.clear()             # <<<<<<<<<<<<<<
 *         in_.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 617, __pyx_L1_error)
  }
  __pyx_t_17 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_in_); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(1, 617, __pyx_L1_error)

  /* "py_libcpp_test.pyx":618
 *            inc(it_in_)
 *         in_.clear()
 *         in_.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_in_, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":619
 *         in_.clear()
 *         in_.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process211(self, dict in_ , dict arg2 ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":585
 *         del v0
 * 
 *     def process21(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process21(libcpp_map[int,float] & in_, libcpp_map[int,int] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process21", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":621
 *         del v0
 * 
 *     def process211(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_57process211(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_56process211[] = "Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_57process211(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_ = 0;
  PyObject *__pyx_v_arg2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process211 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process211", 1, 2, 2, 1); __PYX_ERR(1, 621, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process211") < 0)) __PYX_ERR(1, 621, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_ = ((PyObject*)values[0]);
    __pyx_v_arg2 = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process211", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 621, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process211", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg2), (&PyDict_Type), 1, "arg2", 1))) __PYX_ERR(1, 621, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_56process211(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_in_, __pyx_v_arg2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_2generator20(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":623
 *     def process211(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_33_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_33_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 623, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process211_2generator20, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process211_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process211.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_2generator20(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 623, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 623, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 623, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 623, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 623, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 623, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 623, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_5generator21(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_34_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_34_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 623, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process211_5generator21, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process211_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process211.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_5generator21(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 623, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 623, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 623, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 623, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 623, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 623, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 623, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_8generator22(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":624
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_6genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_35_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_35_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 624, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process211_8generator22, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process211_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process211.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_8generator22(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 624, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 624, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 624, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 624, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 624, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyBytes_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_11generator23(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_7genexpr_2generator24(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_37_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_37_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 624, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process211_7genexpr_2generator24, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process211_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process211.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_7genexpr_2generator24(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 624, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) { __Pyx_RaiseClosureNameError("v"); __PYX_ERR(1, 624, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_v; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 624, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 624, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process211_9genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_36_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_36_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 624, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process211_11generator23, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process211_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process211.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process211_11generator23(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 624, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 624, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 624, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 624, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 624, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_v;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyList_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process211_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":621
 *         del v0
 * 
 *     def process211(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_56process211(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *__pyx_cur_scope;
  std::map<int,float>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::vector<int>  __pyx_v_svec1;
  std::map<std::string,std::vector<int> >  *__pyx_v_v1;
  PyObject *__pyx_v_replace = NULL;
  std::map<std::string,std::vector<int> > ::iterator __pyx_v_it_arg2;
  std::map<int,float> ::iterator __pyx_v_it_in_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,float>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  float __pyx_t_13;
  int __pyx_t_14;
  std::map<std::string,std::vector<int> >  *__pyx_t_15;
  std::vector<int>  __pyx_t_16;
  std::string __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process211", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_32_process211(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_32_process211, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 621, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);
  __pyx_cur_scope->__pyx_v_arg2 = __pyx_v_arg2;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arg2);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arg2);

  /* "py_libcpp_test.pyx":623
 *     def process211(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process211_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process211_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 623, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":624
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_arg2;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process211_6genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process211_9genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_arg2_wrong_type);
      __PYX_ERR(1, 624, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":625
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,float> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 625, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":626
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 626, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 626, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 626, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 626, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 626, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 626, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 626, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 626, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":629
 * 
 * 
 *             deref(v0)[ (<int>key) ] = (<float>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 629, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 629, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_14)]) = ((float)__pyx_t_13);

    /* "py_libcpp_test.pyx":626
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":633
 * 
 *         cdef libcpp_vector[int] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[int]]()             # <<<<<<<<<<<<<<
 *         for key, value in arg2.items():
 * 
 */
  try {
    __pyx_t_15 = new std::map<std::string,std::vector<int> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 633, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_15;

  /* "py_libcpp_test.pyx":634
 *         cdef libcpp_vector[int] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[int]]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 *             svec1 = value
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 634, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 634, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 634, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 634, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 634, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 634, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 634, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 634, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 634, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 634, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "py_libcpp_test.pyx":636
 *         for key, value in arg2.items():
 * 
 *             svec1 = value             # <<<<<<<<<<<<<<
 *             deref(v1)[ (<libcpp_string>key) ] = svec1
 * 
 */
    __pyx_t_16 = __pyx_convert_vector_from_py_int(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)
    __pyx_v_svec1 = __pyx_t_16;

    /* "py_libcpp_test.pyx":637
 * 
 *             svec1 = value
 *             deref(v1)[ (<libcpp_string>key) ] = svec1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L1_error)
    ((*__pyx_v_v1)[((std::string)__pyx_t_17)]) = __pyx_v_svec1;

    /* "py_libcpp_test.pyx":634
 *         cdef libcpp_vector[int] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[int]]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 *             svec1 = value
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":640
 * 
 * 
 *         self.inst.get().process211(deref(v0), deref(v1))             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]].iterator it_arg2 = v1.begin()
 */
  __pyx_v_self->inst.get()->process211((*__pyx_v_v0), (*__pyx_v_v1));

  /* "py_libcpp_test.pyx":641
 * 
 *         self.inst.get().process211(deref(v0), deref(v1))
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_replace = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":642
 *         self.inst.get().process211(deref(v0), deref(v1))
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]].iterator it_arg2 = v1.begin()             # <<<<<<<<<<<<<<
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[int]> deref(it_arg2).second
 */
  __pyx_v_it_arg2 = __pyx_v_v1->begin();

  /* "py_libcpp_test.pyx":643
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():             # <<<<<<<<<<<<<<
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[int]> deref(it_arg2).second
 *            inc(it_arg2)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_arg2 != __pyx_v_v1->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":644
 *         cdef libcpp_map[libcpp_string, libcpp_vector[int]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[int]> deref(it_arg2).second             # <<<<<<<<<<<<<<
 *            inc(it_arg2)
 *         arg2.clear()
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_int(((std::vector<int> )(*__pyx_v_it_arg2).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(((std::string)(*__pyx_v_it_arg2).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":645
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[int]> deref(it_arg2).second
 *            inc(it_arg2)             # <<<<<<<<<<<<<<
 *         arg2.clear()
 *         arg2.update(replace)
 */
    (void)((++__pyx_v_it_arg2));
  }

  /* "py_libcpp_test.pyx":646
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[int]> deref(it_arg2).second
 *            inc(it_arg2)
 *         arg2.clear()             # <<<<<<<<<<<<<<
 *         arg2.update(replace)
 *         del v1
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 646, __pyx_L1_error)
  }
  __pyx_t_18 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 646, __pyx_L1_error)

  /* "py_libcpp_test.pyx":647
 *            inc(it_arg2)
 *         arg2.clear()
 *         arg2.update(replace)             # <<<<<<<<<<<<<<
 *         del v1
 *         replace = dict()
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_arg2, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":648
 *         arg2.clear()
 *         arg2.update(replace)
 *         del v1             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 */
  delete __pyx_v_v1;

  /* "py_libcpp_test.pyx":649
 *         arg2.update(replace)
 *         del v1
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_replace, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":650
 *         del v1
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":651
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":652
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second             # <<<<<<<<<<<<<<
 *            inc(it_in_)
 *         in_.clear()
 */
    __pyx_t_2 = PyFloat_FromDouble(((float)(*__pyx_v_it_in_).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":653
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_.clear()
 *         in_.update(replace)
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":654
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 *         in_.clear()             # <<<<<<<<<<<<<<
 *         in_.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 654, __pyx_L1_error)
  }
  __pyx_t_18 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_in_); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 654, __pyx_L1_error)

  /* "py_libcpp_test.pyx":655
 *            inc(it_in_)
 *         in_.clear()
 *         in_.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_in_, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":656
 *         in_.clear()
 *         in_.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process212(self, dict in_ , dict arg2 ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":621
 *         del v0
 * 
 *     def process211(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process211(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[int]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process211", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":658
 *         del v0
 * 
 *     def process212(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_59process212(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_58process212[] = "Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_59process212(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_ = 0;
  PyObject *__pyx_v_arg2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process212 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process212", 1, 2, 2, 1); __PYX_ERR(1, 658, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process212") < 0)) __PYX_ERR(1, 658, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_ = ((PyObject*)values[0]);
    __pyx_v_arg2 = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process212", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 658, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 658, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg2), (&PyDict_Type), 1, "arg2", 1))) __PYX_ERR(1, 658, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_58process212(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_in_, __pyx_v_arg2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_2generator25(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":660
 *     def process212(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_39_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_39_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 660, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process212_2generator25, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process212_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_2generator25(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 660, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 660, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 660, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 660, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 660, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 660, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 660, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_5generator26(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_40_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_40_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 660, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process212_5generator26, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process212_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_5generator26(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 660, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 660, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 660, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 660, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 660, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 660, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 660, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_8generator27(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":661
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_6genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_41_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_41_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 661, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process212_8generator27, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process212_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_8generator27(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 661, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 661, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 661, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 661, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 661, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyBytes_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_11generator28(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_7genexpr_2generator29(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_7genexpr_7genexpr_2generator30(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_7genexpr_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_44_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_44_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 661, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process212_7genexpr_7genexpr_2generator30, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process212_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212.genexpr.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_7genexpr_7genexpr_2generator30(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 661, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); __PYX_ERR(1, 661, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 661, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 661, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_43_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_43_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 661, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process212_7genexpr_2generator29, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process212_locals_genexpr_locals_2, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_7genexpr_2generator29(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 661, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) { __Pyx_RaiseClosureNameError("v"); __PYX_ERR(1, 661, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_v; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 661, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 661, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process212_7genexpr_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process212_9genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_42_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_42_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 661, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process212_11generator28, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process212_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process212_11generator28(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 661, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 661, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 661, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 661, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 661, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_v;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyList_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process212_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":658
 *         del v0
 * 
 *     def process212(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_58process212(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *__pyx_cur_scope;
  std::map<int,float>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::vector<std::vector<int> >  __pyx_v_svec1;
  std::map<std::string,std::vector<std::vector<int> > >  *__pyx_v_v1;
  PyObject *__pyx_v_replace = NULL;
  std::map<std::string,std::vector<std::vector<int> > > ::iterator __pyx_v_it_arg2;
  std::map<int,float> ::iterator __pyx_v_it_in_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,float>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  float __pyx_t_13;
  int __pyx_t_14;
  std::map<std::string,std::vector<std::vector<int> > >  *__pyx_t_15;
  std::vector<std::vector<int> >  __pyx_t_16;
  std::string __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process212", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_38_process212(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_38_process212, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 658, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);
  __pyx_cur_scope->__pyx_v_arg2 = __pyx_v_arg2;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arg2);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arg2);

  /* "py_libcpp_test.pyx":660
 *     def process212(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process212_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process212_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 660, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 660, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":661
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_arg2;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process212_6genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process212_9genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_arg2_wrong_type);
      __PYX_ERR(1, 661, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":662
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,float> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 662, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":663
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 663, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 663, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 663, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 663, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 663, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 663, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 663, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 663, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":666
 * 
 * 
 *             deref(v0)[ (<int>key) ] = (<float>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 666, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 666, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_14)]) = ((float)__pyx_t_13);

    /* "py_libcpp_test.pyx":663
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":670
 * 
 *         cdef libcpp_vector[libcpp_vector[int]] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]]()             # <<<<<<<<<<<<<<
 *         for key, value in arg2.items():
 * 
 */
  try {
    __pyx_t_15 = new std::map<std::string,std::vector<std::vector<int> > > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 670, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_15;

  /* "py_libcpp_test.pyx":671
 *         cdef libcpp_vector[libcpp_vector[int]] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 *             svec1 = value
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 671, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 671, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 671, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 671, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 671, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 671, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 671, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 671, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 671, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 671, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "py_libcpp_test.pyx":673
 *         for key, value in arg2.items():
 * 
 *             svec1 = value             # <<<<<<<<<<<<<<
 *             deref(v1)[ (<libcpp_string>key) ] = svec1
 * 
 */
    __pyx_t_16 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 673, __pyx_L1_error)
    __pyx_v_svec1 = __pyx_t_16;

    /* "py_libcpp_test.pyx":674
 * 
 *             svec1 = value
 *             deref(v1)[ (<libcpp_string>key) ] = svec1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 674, __pyx_L1_error)
    ((*__pyx_v_v1)[((std::string)__pyx_t_17)]) = __pyx_v_svec1;

    /* "py_libcpp_test.pyx":671
 *         cdef libcpp_vector[libcpp_vector[int]] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 *             svec1 = value
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":677
 * 
 * 
 *         self.inst.get().process212(deref(v0), deref(v1))             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]].iterator it_arg2 = v1.begin()
 */
  __pyx_v_self->inst.get()->process212((*__pyx_v_v0), (*__pyx_v_v1));

  /* "py_libcpp_test.pyx":678
 * 
 *         self.inst.get().process212(deref(v0), deref(v1))
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_replace = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":679
 *         self.inst.get().process212(deref(v0), deref(v1))
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]].iterator it_arg2 = v1.begin()             # <<<<<<<<<<<<<<
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_vector[int]]> deref(it_arg2).second
 */
  __pyx_v_it_arg2 = __pyx_v_v1->begin();

  /* "py_libcpp_test.pyx":680
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():             # <<<<<<<<<<<<<<
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_vector[int]]> deref(it_arg2).second
 *            inc(it_arg2)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_arg2 != __pyx_v_v1->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":681
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_vector[int]]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_vector[int]]> deref(it_arg2).second             # <<<<<<<<<<<<<<
 *            inc(it_arg2)
 *         arg2.clear()
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(((std::vector<std::vector<int> > )(*__pyx_v_it_arg2).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(((std::string)(*__pyx_v_it_arg2).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":682
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_vector[int]]> deref(it_arg2).second
 *            inc(it_arg2)             # <<<<<<<<<<<<<<
 *         arg2.clear()
 *         arg2.update(replace)
 */
    (void)((++__pyx_v_it_arg2));
  }

  /* "py_libcpp_test.pyx":683
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_vector[int]]> deref(it_arg2).second
 *            inc(it_arg2)
 *         arg2.clear()             # <<<<<<<<<<<<<<
 *         arg2.update(replace)
 *         del v1
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 683, __pyx_L1_error)
  }
  __pyx_t_18 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 683, __pyx_L1_error)

  /* "py_libcpp_test.pyx":684
 *            inc(it_arg2)
 *         arg2.clear()
 *         arg2.update(replace)             # <<<<<<<<<<<<<<
 *         del v1
 *         replace = dict()
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_arg2, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":685
 *         arg2.clear()
 *         arg2.update(replace)
 *         del v1             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 */
  delete __pyx_v_v1;

  /* "py_libcpp_test.pyx":686
 *         arg2.update(replace)
 *         del v1
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_replace, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":687
 *         del v1
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":688
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":689
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second             # <<<<<<<<<<<<<<
 *            inc(it_in_)
 *         in_.clear()
 */
    __pyx_t_2 = PyFloat_FromDouble(((float)(*__pyx_v_it_in_).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":690
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_.clear()
 *         in_.update(replace)
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":691
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 *         in_.clear()             # <<<<<<<<<<<<<<
 *         in_.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 691, __pyx_L1_error)
  }
  __pyx_t_18 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_in_); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 691, __pyx_L1_error)

  /* "py_libcpp_test.pyx":692
 *            inc(it_in_)
 *         in_.clear()
 *         in_.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_in_, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":693
 *         in_.clear()
 *         in_.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process214(self, dict in_ , dict arg2 ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":658
 *         del v0
 * 
 *     def process212(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process212(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_vector[int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process212", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":695
 *         del v0
 * 
 *     def process214(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_61process214(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_60process214[] = "Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_61process214(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_ = 0;
  PyObject *__pyx_v_arg2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process214 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process214", 1, 2, 2, 1); __PYX_ERR(1, 695, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process214") < 0)) __PYX_ERR(1, 695, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_ = ((PyObject*)values[0]);
    __pyx_v_arg2 = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process214", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 695, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process214", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyDict_Type), 1, "in_", 1))) __PYX_ERR(1, 695, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg2), (&PyDict_Type), 1, "arg2", 1))) __PYX_ERR(1, 695, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_60process214(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_in_, __pyx_v_arg2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_2generator31(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":697
 *     def process214(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_46_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_46_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 697, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process214_2generator31, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process214_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process214.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_2generator31(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 697, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 697, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 697, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 697, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 697, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 697, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 697, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_5generator32(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_47_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_47_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 697, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process214_5generator32, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process214_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process214.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_5generator32(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 697, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 697, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 697, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 697, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 697, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 697, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 697, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_v); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_8generator33(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":698
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_6genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_48_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_48_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 698, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process214_8generator33, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process214_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process214.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_8generator33(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 698, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 698, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(1, 698, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 698, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyBytes_Check(__pyx_cur_scope->__pyx_v_k); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_11generator34(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_7genexpr_2generator35(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_50_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_50_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 698, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process214_7genexpr_2generator35, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process214_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process214.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_7genexpr_2generator35(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 698, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) { __Pyx_RaiseClosureNameError("v"); __PYX_ERR(1, 698, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_v; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 698, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 698, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_6 = PyList_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_8 = PyObject_Length(__pyx_cur_scope->__pyx_v_elemt_rec); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 698, __pyx_L1_error)
    __pyx_t_7 = ((__pyx_t_8 == 2) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyInt_Check(__pyx_t_4); 
    __pyx_t_9 = (__pyx_t_6 != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_9 = PyLong_Check(__pyx_t_4); 
    __pyx_t_6 = (__pyx_t_9 != 0);
    __pyx_t_7 = __pyx_t_6;
    __pyx_L11_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyInt_Check(__pyx_t_4); 
    __pyx_t_9 = (__pyx_t_7 != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_6 = __pyx_t_9;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_9 = PyLong_Check(__pyx_t_4); 
    __pyx_t_7 = (__pyx_t_9 != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L13_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_10process214_9genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_49_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_49_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 698, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_10process214_11generator34, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process214_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process214.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_10process214_11generator34(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 698, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2)) { __Pyx_RaiseClosureNameError("arg2"); __PYX_ERR(1, 698, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(1, 698, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 698, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_v;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyList_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process214_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":695
 *         del v0
 * 
 *     def process214(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_60process214(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *__pyx_cur_scope;
  std::map<int,float>  *__pyx_v_v0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::vector<std::pair<int,int> >  __pyx_v_svec1;
  std::map<std::string,std::vector<std::pair<int,int> > >  *__pyx_v_v1;
  PyObject *__pyx_v_replace = NULL;
  std::map<std::string,std::vector<std::pair<int,int> > > ::iterator __pyx_v_it_arg2;
  std::map<int,float> ::iterator __pyx_v_it_in_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::map<int,float>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  float __pyx_t_13;
  int __pyx_t_14;
  std::map<std::string,std::vector<std::pair<int,int> > >  *__pyx_t_15;
  std::vector<std::pair<int,int> >  __pyx_t_16;
  std::string __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process214", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_45_process214(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_45_process214, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 695, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);
  __pyx_cur_scope->__pyx_v_arg2 = __pyx_v_arg2;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arg2);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arg2);

  /* "py_libcpp_test.pyx":697
 *     def process214(self, dict in_ , dict arg2 ):
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process214_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process214_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 697, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":698
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_arg2;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = PyDict_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process214_6genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_10process214_9genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_arg2_wrong_type);
      __PYX_ERR(1, 698, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":699
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()             # <<<<<<<<<<<<<<
 *         for key, value in in_.items():
 * 
 */
  try {
    __pyx_t_6 = new std::map<int,float> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 699, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":700
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 700, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_in_); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 700, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 700, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 700, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 700, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 700, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 700, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 700, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "py_libcpp_test.pyx":703
 * 
 * 
 *             deref(v0)[ (<int>key) ] = (<float>value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 703, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 703, __pyx_L1_error)
    ((*__pyx_v_v0)[((int)__pyx_t_14)]) = ((float)__pyx_t_13);

    /* "py_libcpp_test.pyx":700
 *         assert isinstance(arg2, dict) and all(isinstance(k, bytes) for k in arg2.keys()) and all(isinstance(v, list) and all(isinstance(elemt_rec, list) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], (int, long)) and isinstance(elemt_rec[1], (int, long)) for elemt_rec in v) for v in arg2.values()), 'arg arg2 wrong type'
 *         cdef libcpp_map[int, float] * v0 = new libcpp_map[int, float]()
 *         for key, value in in_.items():             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":707
 * 
 *         cdef libcpp_vector[libcpp_pair[int,int]] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]]()             # <<<<<<<<<<<<<<
 *         for key, value in arg2.items():
 * 
 */
  try {
    __pyx_t_15 = new std::map<std::string,std::vector<std::pair<int,int> > > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 707, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_15;

  /* "py_libcpp_test.pyx":708
 *         cdef libcpp_vector[libcpp_pair[int,int]] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 *             svec1 = value
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 708, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 708, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 708, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 708, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 708, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 708, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_11 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(1, 708, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 708, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "py_libcpp_test.pyx":710
 *         for key, value in arg2.items():
 * 
 *             svec1 = value             # <<<<<<<<<<<<<<
 *             deref(v1)[ (<libcpp_string>key) ] = svec1
 * 
 */
    __pyx_t_16 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 710, __pyx_L1_error)
    __pyx_v_svec1 = __pyx_t_16;

    /* "py_libcpp_test.pyx":711
 * 
 *             svec1 = value
 *             deref(v1)[ (<libcpp_string>key) ] = svec1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 711, __pyx_L1_error)
    ((*__pyx_v_v1)[((std::string)__pyx_t_17)]) = __pyx_v_svec1;

    /* "py_libcpp_test.pyx":708
 *         cdef libcpp_vector[libcpp_pair[int,int]] svec1
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]] * v1 = new libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]]()
 *         for key, value in arg2.items():             # <<<<<<<<<<<<<<
 * 
 *             svec1 = value
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":714
 * 
 * 
 *         self.inst.get().process214(deref(v0), deref(v1))             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]].iterator it_arg2 = v1.begin()
 */
  __pyx_v_self->inst.get()->process214((*__pyx_v_v0), (*__pyx_v_v1));

  /* "py_libcpp_test.pyx":715
 * 
 *         self.inst.get().process214(deref(v0), deref(v1))
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_replace = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":716
 *         self.inst.get().process214(deref(v0), deref(v1))
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]].iterator it_arg2 = v1.begin()             # <<<<<<<<<<<<<<
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_pair[int,int]]> deref(it_arg2).second
 */
  __pyx_v_it_arg2 = __pyx_v_v1->begin();

  /* "py_libcpp_test.pyx":717
 *         replace = dict()
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():             # <<<<<<<<<<<<<<
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_pair[int,int]]> deref(it_arg2).second
 *            inc(it_arg2)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_arg2 != __pyx_v_v1->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":718
 *         cdef libcpp_map[libcpp_string, libcpp_vector[libcpp_pair[int,int]]].iterator it_arg2 = v1.begin()
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_pair[int,int]]> deref(it_arg2).second             # <<<<<<<<<<<<<<
 *            inc(it_arg2)
 *         arg2.clear()
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(((std::vector<std::pair<int,int> > )(*__pyx_v_it_arg2).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(((std::string)(*__pyx_v_it_arg2).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 718, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":719
 *         while it_arg2 != v1.end():
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_pair[int,int]]> deref(it_arg2).second
 *            inc(it_arg2)             # <<<<<<<<<<<<<<
 *         arg2.clear()
 *         arg2.update(replace)
 */
    (void)((++__pyx_v_it_arg2));
  }

  /* "py_libcpp_test.pyx":720
 *            replace[<libcpp_string> deref(it_arg2).first] = <libcpp_vector[libcpp_pair[int,int]]> deref(it_arg2).second
 *            inc(it_arg2)
 *         arg2.clear()             # <<<<<<<<<<<<<<
 *         arg2.update(replace)
 *         del v1
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_arg2 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 720, __pyx_L1_error)
  }
  __pyx_t_18 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_arg2); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 720, __pyx_L1_error)

  /* "py_libcpp_test.pyx":721
 *            inc(it_arg2)
 *         arg2.clear()
 *         arg2.update(replace)             # <<<<<<<<<<<<<<
 *         del v1
 *         replace = dict()
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_arg2, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":722
 *         arg2.clear()
 *         arg2.update(replace)
 *         del v1             # <<<<<<<<<<<<<<
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 */
  delete __pyx_v_v1;

  /* "py_libcpp_test.pyx":723
 *         arg2.update(replace)
 *         del v1
 *         replace = dict()             # <<<<<<<<<<<<<<
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_replace, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":724
 *         del v1
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":725
 *         replace = dict()
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":726
 *         cdef libcpp_map[int, float].iterator it_in_ = v0.begin()
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second             # <<<<<<<<<<<<<<
 *            inc(it_in_)
 *         in_.clear()
 */
    __pyx_t_2 = PyFloat_FromDouble(((float)(*__pyx_v_it_in_).second)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_int(((int)(*__pyx_v_it_in_).first)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_replace, __pyx_t_5, __pyx_t_2) < 0)) __PYX_ERR(1, 726, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":727
 *         while it_in_ != v0.end():
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_.clear()
 *         in_.update(replace)
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":728
 *            replace[<int> deref(it_in_).first] = <float> deref(it_in_).second
 *            inc(it_in_)
 *         in_.clear()             # <<<<<<<<<<<<<<
 *         in_.update(replace)
 *         del v0
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 728, __pyx_L1_error)
  }
  __pyx_t_18 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_in_); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 728, __pyx_L1_error)

  /* "py_libcpp_test.pyx":729
 *            inc(it_in_)
 *         in_.clear()
 *         in_.update(replace)             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_in_, __pyx_v_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":730
 *         in_.clear()
 *         in_.update(replace)
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process22(self, set in_0 , set in_1 ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":695
 *         del v0
 * 
 *     def process214(self, dict in_ , dict arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process214(libcpp_map[int,float] & in_, libcpp_map[libcpp_string,libcpp_vector[libcpp_pair[int,int]]] & arg2)"""
 *         assert isinstance(in_, dict) and all(isinstance(k, (int, long)) for k in in_.keys()) and all(isinstance(v, float) for v in in_.values()), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process214", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_replace);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":732
 *         del v0
 * 
 *     def process22(self, set in_0 , set in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_63process22(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_62process22[] = "Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_63process22(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_in_1 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process22 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process22", 1, 2, 2, 1); __PYX_ERR(1, 732, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process22") < 0)) __PYX_ERR(1, 732, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_0 = ((PyObject*)values[0]);
    __pyx_v_in_1 = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process22", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 732, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process22", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PySet_Type), 1, "in_0", 1))) __PYX_ERR(1, 732, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_1), (&PySet_Type), 1, "in_1", 1))) __PYX_ERR(1, 732, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_62process22(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process22_2generator36(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":734
 *     def process22(self, set in_0 , set in_1 ):
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_set[int] v0 = in_0
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process22_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_52_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_52_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 734, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process22_2generator36, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process22_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 734, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process22.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process22_2generator36(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 734, __pyx_L1_error)
  __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 734, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0, 1, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_8 = PyInt_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_9 = PyLong_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_8 = (__pyx_t_9 != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L7_bool_binop_done:;
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    if (__pyx_t_8) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process22_5generator37(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":735
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[int] v0 = in_0
 *         cdef libcpp_set[float] v1 = in_1
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process22_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_53_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_53_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 735, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process22_5generator37, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process22_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 735, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process22.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process22_5generator37(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 735, __pyx_L1_error)
  __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1)) { __Pyx_RaiseClosureNameError("in_1"); __PYX_ERR(1, 735, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1, 1, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_7 = PyFloat_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_8 = ((!(__pyx_t_7 != 0)) != 0);
    if (__pyx_t_8) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":732
 *         del v0
 * 
 *     def process22(self, set in_0 , set in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_62process22(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *__pyx_cur_scope;
  std::set<int>  __pyx_v_v0;
  std::set<float>  __pyx_v_v1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::set<int>  __pyx_t_6;
  std::set<float>  __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process22", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_51_process22(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_51_process22, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 732, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);
  __pyx_cur_scope->__pyx_v_in_1 = __pyx_v_in_1;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_1);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_1);

  /* "py_libcpp_test.pyx":734
 *     def process22(self, set in_0 , set in_1 ):
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_set[int] v0 = in_0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PySet_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process22_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 734, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 734, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":735
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[int] v0 = in_0
 *         cdef libcpp_set[float] v1 = in_1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_1;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = PySet_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process22_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 735, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_1_wrong_type);
      __PYX_ERR(1, 735, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":736
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_set[int] v0 = in_0             # <<<<<<<<<<<<<<
 *         cdef libcpp_set[float] v1 = in_1
 *         self.inst.get().process22(v0, v1)
 */
  __pyx_t_6 = __pyx_convert_set_from_py_int(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 736, __pyx_L1_error)
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":737
 *         assert isinstance(in_1, set) and all(isinstance(li, float) for li in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_set[int] v0 = in_0
 *         cdef libcpp_set[float] v1 = in_1             # <<<<<<<<<<<<<<
 *         self.inst.get().process22(v0, v1)
 *         in_1.clear()
 */
  __pyx_t_7 = __pyx_convert_set_from_py_float(__pyx_cur_scope->__pyx_v_in_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 737, __pyx_L1_error)
  __pyx_v_v1 = __pyx_t_7;

  /* "py_libcpp_test.pyx":738
 *         cdef libcpp_set[int] v0 = in_0
 *         cdef libcpp_set[float] v1 = in_1
 *         self.inst.get().process22(v0, v1)             # <<<<<<<<<<<<<<
 *         in_1.clear()
 *         in_1.update(v1)
 */
  __pyx_v_self->inst.get()->process22(__pyx_v_v0, __pyx_v_v1);

  /* "py_libcpp_test.pyx":739
 *         cdef libcpp_set[float] v1 = in_1
 *         self.inst.get().process22(v0, v1)
 *         in_1.clear()             # <<<<<<<<<<<<<<
 *         in_1.update(v1)
 *         in_0.clear()
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 739, __pyx_L1_error)
  }
  __pyx_t_8 = PySet_Clear(__pyx_cur_scope->__pyx_v_in_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 739, __pyx_L1_error)

  /* "py_libcpp_test.pyx":740
 *         self.inst.get().process22(v0, v1)
 *         in_1.clear()
 *         in_1.update(v1)             # <<<<<<<<<<<<<<
 *         in_0.clear()
 *         in_0.update(v0)
 */
  __pyx_t_2 = __pyx_convert_set_to_py_float(__pyx_v_v1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_cur_scope->__pyx_v_in_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":741
 *         in_1.clear()
 *         in_1.update(v1)
 *         in_0.clear()             # <<<<<<<<<<<<<<
 *         in_0.update(v0)
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
    __PYX_ERR(1, 741, __pyx_L1_error)
  }
  __pyx_t_8 = PySet_Clear(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 741, __pyx_L1_error)

  /* "py_libcpp_test.pyx":742
 *         in_1.update(v1)
 *         in_0.clear()
 *         in_0.update(v0)             # <<<<<<<<<<<<<<
 * 
 *     def process23(self, list in_0 , list in_1 ):
 */
  __pyx_t_5 = __pyx_convert_set_to_py_int(__pyx_v_v0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_cur_scope->__pyx_v_in_0, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":732
 *         del v0
 * 
 *     def process22(self, set in_0 , set in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process22(libcpp_set[int] &, libcpp_set[float] &)"""
 *         assert isinstance(in_0, set) and all(isinstance(li, (int, long)) for li in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process22", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":744
 *         in_0.update(v0)
 * 
 *     def process23(self, list in_0 , list in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_65process23(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_64process23[] = "Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_65process23(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_in_1 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process23 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process23", 1, 2, 2, 1); __PYX_ERR(1, 744, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process23") < 0)) __PYX_ERR(1, 744, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_0 = ((PyObject*)values[0]);
    __pyx_v_in_1 = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process23", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 744, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process23", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) __PYX_ERR(1, 744, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_1), (&PyList_Type), 1, "in_1", 1))) __PYX_ERR(1, 744, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_64process23(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process23_2generator38(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":746
 *     def process23(self, list in_0 , list in_1 ):
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_vector[int] v0 = in_0
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process23_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_55_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_55_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 746, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process23_2generator38, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process23_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process23.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process23_2generator38(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 746, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); __PYX_ERR(1, 746, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 746, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyInt_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process23_5generator39(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":747
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_0
 *         cdef libcpp_vector[float] v1 = in_1
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process23_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_56_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_56_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 747, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process23_5generator39, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process23_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process23.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process23_5generator39(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 747, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1)) { __Pyx_RaiseClosureNameError("in_1"); __PYX_ERR(1, 747, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 747, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_1; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 747, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = PyFloat_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":744
 *         in_0.update(v0)
 * 
 *     def process23(self, list in_0 , list in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_64process23(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *__pyx_cur_scope;
  std::vector<int>  __pyx_v_v0;
  std::vector<float>  __pyx_v_v1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<int>  __pyx_t_6;
  std::vector<float>  __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process23", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_54_process23(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_54_process23, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 744, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);
  __pyx_cur_scope->__pyx_v_in_1 = __pyx_v_in_1;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_1);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_1);

  /* "py_libcpp_test.pyx":746
 *     def process23(self, list in_0 , list in_1 ):
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_vector[int] v0 = in_0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process23_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 746, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":747
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_0
 *         cdef libcpp_vector[float] v1 = in_1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_1;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = PyList_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process23_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_1_wrong_type);
      __PYX_ERR(1, 747, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":748
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_vector[int] v0 = in_0             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[float] v1 = in_1
 *         self.inst.get().process23(v0, v1)
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_int(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 748, __pyx_L1_error)
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":749
 *         assert isinstance(in_1, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_1), 'arg in_1 wrong type'
 *         cdef libcpp_vector[int] v0 = in_0
 *         cdef libcpp_vector[float] v1 = in_1             # <<<<<<<<<<<<<<
 *         self.inst.get().process23(v0, v1)
 *         in_1[:] = v1
 */
  __pyx_t_7 = __pyx_convert_vector_from_py_float(__pyx_cur_scope->__pyx_v_in_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 749, __pyx_L1_error)
  __pyx_v_v1 = __pyx_t_7;

  /* "py_libcpp_test.pyx":750
 *         cdef libcpp_vector[int] v0 = in_0
 *         cdef libcpp_vector[float] v1 = in_1
 *         self.inst.get().process23(v0, v1)             # <<<<<<<<<<<<<<
 *         in_1[:] = v1
 *         in_0[:] = v0
 */
  __pyx_v_self->inst.get()->process23(__pyx_v_v0, __pyx_v_v1);

  /* "py_libcpp_test.pyx":751
 *         cdef libcpp_vector[float] v1 = in_1
 *         self.inst.get().process23(v0, v1)
 *         in_1[:] = v1             # <<<<<<<<<<<<<<
 *         in_0[:] = v0
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_float(__pyx_v_v1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_cur_scope->__pyx_v_in_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 751, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_cur_scope->__pyx_v_in_1, __pyx_t_2, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":752
 *         self.inst.get().process23(v0, v1)
 *         in_1[:] = v1
 *         in_0[:] = v0             # <<<<<<<<<<<<<<
 * 
 *     def process24(self, list in_ , list arg2 ):
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_v0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_cur_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 752, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_cur_scope->__pyx_v_in_0, __pyx_t_2, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 752, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":744
 *         in_0.update(v0)
 * 
 *     def process23(self, list in_0 , list in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process23(libcpp_vector[int] &, libcpp_vector[float] &)"""
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_0), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process23", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":754
 *         in_0[:] = v0
 * 
 *     def process24(self, list in_ , list arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process24(libcpp_pair[int,float] & in_, libcpp_pair[int,int] & arg2)"""
 *         assert isinstance(in_, list) and len(in_) == 2 and isinstance(in_[0], (int, long)) and isinstance(in_[1], float), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_67process24(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_66process24[] = "Cython signature: void process24(libcpp_pair[int,float] & in_, libcpp_pair[int,int] & arg2)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_67process24(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_ = 0;
  PyObject *__pyx_v_arg2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process24 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("process24", 1, 2, 2, 1); __PYX_ERR(1, 754, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "process24") < 0)) __PYX_ERR(1, 754, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_ = ((PyObject*)values[0]);
    __pyx_v_arg2 = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("process24", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 754, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process24", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 754, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg2), (&PyList_Type), 1, "arg2", 1))) __PYX_ERR(1, 754, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_66process24(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_in_, __pyx_v_arg2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_66process24(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_, PyObject *__pyx_v_arg2) {
  std::pair<int,float>  __pyx_v_v0;
  std::pair<int,int>  __pyx_v_v1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process24", 0);

  /* "py_libcpp_test.pyx":756
 *     def process24(self, list in_ , list arg2 ):
 *         """Cython signature: void process24(libcpp_pair[int,float] & in_, libcpp_pair[int,int] & arg2)"""
 *         assert isinstance(in_, list) and len(in_) == 2 and isinstance(in_[0], (int, long)) and isinstance(in_[1], float), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(arg2, list) and len(arg2) == 2 and isinstance(arg2[0], (int, long)) and isinstance(arg2[1], (int, long)), 'arg arg2 wrong type'
 *         cdef libcpp_pair[int, float] v0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_in_); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_ == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 756, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_in_); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 756, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_ == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 756, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_3 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_ == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 756, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_6 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    if (unlikely(__pyx_v_in_ == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 756, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_in_, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = PyFloat_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 756, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":757
 *         """Cython signature: void process24(libcpp_pair[int,float] & in_, libcpp_pair[int,int] & arg2)"""
 *         assert isinstance(in_, list) and len(in_) == 2 and isinstance(in_[0], (int, long)) and isinstance(in_[1], float), 'arg in_ wrong type'
 *         assert isinstance(arg2, list) and len(arg2) == 2 and isinstance(arg2[0], (int, long)) and isinstance(arg2[1], (int, long)), 'arg arg2 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[int, float] v0
 *         v0.first = in_[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = PyList_Check(__pyx_v_arg2); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    if (unlikely(__pyx_v_arg2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 757, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_SIZE(__pyx_v_arg2); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 757, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_t_4 == 2) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    if (unlikely(__pyx_v_arg2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 757, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_arg2, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_3 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L13_bool_binop_done;
    }
    if (unlikely(__pyx_v_arg2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 757, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_arg2, 0);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_6 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L13_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    if (unlikely(__pyx_v_arg2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 757, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_arg2, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = PyInt_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_3 = __pyx_t_6;
      goto __pyx_L15_bool_binop_done;
    }
    if (unlikely(__pyx_v_arg2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 757, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_ITEM(__pyx_v_arg2, 1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyLong_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_6 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L15_bool_binop_done:;
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_arg2_wrong_type);
      __PYX_ERR(1, 757, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":759
 *         assert isinstance(arg2, list) and len(arg2) == 2 and isinstance(arg2[0], (int, long)) and isinstance(arg2[1], (int, long)), 'arg arg2 wrong type'
 *         cdef libcpp_pair[int, float] v0
 *         v0.first = in_[0]             # <<<<<<<<<<<<<<
 *         v0.second = in_[1]
 *         cdef libcpp_pair[int, int] v1
 */
  if (unlikely(__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 759, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_in_, 0)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 759, __pyx_L1_error)
  __pyx_v_v0.first = __pyx_t_7;

  /* "py_libcpp_test.pyx":760
 *         cdef libcpp_pair[int, float] v0
 *         v0.first = in_[0]
 *         v0.second = in_[1]             # <<<<<<<<<<<<<<
 *         cdef libcpp_pair[int, int] v1
 *         v1.first = arg2[0]
 */
  if (unlikely(__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 760, __pyx_L1_error)
  }
  __pyx_t_8 = __pyx_PyFloat_AsFloat(PyList_GET_ITEM(__pyx_v_in_, 1)); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 760, __pyx_L1_error)
  __pyx_v_v0.second = __pyx_t_8;

  /* "py_libcpp_test.pyx":762
 *         v0.second = in_[1]
 *         cdef libcpp_pair[int, int] v1
 *         v1.first = arg2[0]             # <<<<<<<<<<<<<<
 *         v1.second = arg2[1]
 *         self.inst.get().process24(v0, v1)
 */
  if (unlikely(__pyx_v_arg2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 762, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_arg2, 0)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
  __pyx_v_v1.first = __pyx_t_7;

  /* "py_libcpp_test.pyx":763
 *         cdef libcpp_pair[int, int] v1
 *         v1.first = arg2[0]
 *         v1.second = arg2[1]             # <<<<<<<<<<<<<<
 *         self.inst.get().process24(v0, v1)
 *         arg2[:] = [v1.first, v1.second]
 */
  if (unlikely(__pyx_v_arg2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 763, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_arg2, 1)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 763, __pyx_L1_error)
  __pyx_v_v1.second = __pyx_t_7;

  /* "py_libcpp_test.pyx":764
 *         v1.first = arg2[0]
 *         v1.second = arg2[1]
 *         self.inst.get().process24(v0, v1)             # <<<<<<<<<<<<<<
 *         arg2[:] = [v1.first, v1.second]
 *         in_[:] = [v0.first, v0.second]
 */
  __pyx_v_self->inst.get()->process24(__pyx_v_v0, __pyx_v_v1);

  /* "py_libcpp_test.pyx":765
 *         v1.second = arg2[1]
 *         self.inst.get().process24(v0, v1)
 *         arg2[:] = [v1.first, v1.second]             # <<<<<<<<<<<<<<
 *         in_[:] = [v0.first, v0.second]
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_v1.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_v1.second); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
  __pyx_t_5 = 0;
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_arg2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 765, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_arg2, __pyx_t_10, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "py_libcpp_test.pyx":766
 *         self.inst.get().process24(v0, v1)
 *         arg2[:] = [v1.first, v1.second]
 *         in_[:] = [v0.first, v0.second]             # <<<<<<<<<<<<<<
 * 
 *     def process25(self, list in_ ):
 */
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_v0.first); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_v0.second); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
  __pyx_t_10 = 0;
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 766, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_v_in_, __pyx_t_5, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":754
 *         in_0[:] = v0
 * 
 *     def process24(self, list in_ , list arg2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process24(libcpp_pair[int,float] & in_, libcpp_pair[int,int] & arg2)"""
 *         assert isinstance(in_, list) and len(in_) == 2 and isinstance(in_[0], (int, long)) and isinstance(in_[1], float), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process24", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":768
 *         in_[:] = [v0.first, v0.second]
 * 
 *     def process25(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_69process25(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_68process25[] = "Cython signature: int process25(libcpp_vector[Int] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_69process25(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process25 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 768, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_68process25(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process25_2generator40(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":770
 *     def process25(self, list in_ ):
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *         cdef Int item0
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process25_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_58_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_58_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 770, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process25_2generator40, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process25_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process25.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process25_2generator40(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 770, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 770, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 770, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 770, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_14py_libcpp_test_Int); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":768
 *         in_[:] = [v0.first, v0.second]
 * 
 *     def process25(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_68process25(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *__pyx_cur_scope;
  std::vector<Int>  *__pyx_v_v0;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item0 = 0;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<Int>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process25", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_57_process25(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_57_process25, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 768, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":770
 *     def process25(self, list in_ ):
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *         cdef Int item0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process25_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 770, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":771
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()             # <<<<<<<<<<<<<<
 *         cdef Int item0
 *         for item0 in in_:
 */
  try {
    __pyx_t_6 = new std::vector<Int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 771, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":773
 *         cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *         cdef Int item0
 *         for item0 in in_:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef int _r = self.inst.get().process25(deref(v0))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 773, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 773, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14py_libcpp_test_Int))))) __PYX_ERR(1, 773, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item0, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":774
 *         cdef Int item0
 *         for item0 in in_:
 *             v0.push_back(deref(item0.inst.get()))             # <<<<<<<<<<<<<<
 *         cdef int _r = self.inst.get().process25(deref(v0))
 *         del v0
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_item0->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 774, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":773
 *         cdef libcpp_vector[_Int] * v0 = new libcpp_vector[_Int]()
 *         cdef Int item0
 *         for item0 in in_:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef int _r = self.inst.get().process25(deref(v0))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":775
 *         for item0 in in_:
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef int _r = self.inst.get().process25(deref(v0))             # <<<<<<<<<<<<<<
 *         del v0
 *         py_result = <int>_r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process25((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":776
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef int _r = self.inst.get().process25(deref(v0))
 *         del v0             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":777
 *         cdef int _r = self.inst.get().process25(deref(v0))
 *         del v0
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":778
 *         del v0
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process26(self, list in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":768
 *         in_[:] = [v0.first, v0.second]
 * 
 *     def process25(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process25(libcpp_vector[Int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, Int) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process25", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":780
 *         return py_result
 * 
 *     def process26(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_71process26(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_70process26[] = "Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_71process26(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process26 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 780, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_70process26(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process26_2generator41(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process26_7genexpr_2generator42(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":782
 *     def process26(self, list in_ ):
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process26_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_61_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_61_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 782, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process26_7genexpr_2generator42, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process26_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process26.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process26_7genexpr_2generator42(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 782, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); __PYX_ERR(1, 782, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 782, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 782, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 782, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 782, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 782, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_ptype_14py_libcpp_test_Int); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process26_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_60_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_60_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 782, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process26_2generator41, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process26_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process26.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process26_2generator41(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 782, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 782, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 782, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 782, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = PyList_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process26_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":780
 *         return py_result
 * 
 *     def process26(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_70process26(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *__pyx_cur_scope;
  std::vector<std::vector<Int> >  *__pyx_v_v0;
  std::vector<Int>  *__pyx_v_v0_rec;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item0_rec = 0;
  PyObject *__pyx_v_in__rec = NULL;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<Int> >  *__pyx_t_6;
  std::vector<Int>  *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process26", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_59_process26(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_59_process26, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 780, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":782
 *     def process26(self, list in_ ):
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process26_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 782, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":783
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec
 */
  try {
    __pyx_t_6 = new std::vector<std::vector<Int> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 783, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":784
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()             # <<<<<<<<<<<<<<
 *         cdef Int item0_rec
 *         for in__rec in in_:
 */
  try {
    __pyx_t_7 = new std::vector<Int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 784, __pyx_L1_error)
  }
  __pyx_v_v0_rec = __pyx_t_7;

  /* "py_libcpp_test.pyx":786
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for item0_rec in in__rec:
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 786, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 786, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_in__rec, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":787
 *         cdef Int item0_rec
 *         for in__rec in in_:
 *             v0_rec.clear()             # <<<<<<<<<<<<<<
 *             for item0_rec in in__rec:
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 */
    __pyx_v_v0_rec->clear();

    /* "py_libcpp_test.pyx":788
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for item0_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))
 */
    if (likely(PyList_CheckExact(__pyx_v_in__rec)) || PyTuple_CheckExact(__pyx_v_in__rec)) {
      __pyx_t_2 = __pyx_v_in__rec; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in__rec); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 788, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 788, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 788, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 788, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 788, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 788, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_14py_libcpp_test_Int))))) __PYX_ERR(1, 788, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_item0_rec, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "py_libcpp_test.pyx":789
 *             v0_rec.clear()
 *             for item0_rec in in__rec:
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process26(deref(v0))
 */
      try {
        __pyx_v_v0_rec->push_back((*__pyx_v_item0_rec->inst.get()));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 789, __pyx_L1_error)
      }

      /* "py_libcpp_test.pyx":788
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for item0_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":790
 *             for item0_rec in in__rec:
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))             # <<<<<<<<<<<<<<
 *         cdef int _r = self.inst.get().process26(deref(v0))
 *         del v0
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_v0_rec));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 790, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":786
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for item0_rec in in__rec:
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":791
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process26(deref(v0))             # <<<<<<<<<<<<<<
 *         del v0
 *         del v0_rec
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process26((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":792
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process26(deref(v0))
 *         del v0             # <<<<<<<<<<<<<<
 *         del v0_rec
 *         py_result = <int>_r
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":793
 *         cdef int _r = self.inst.get().process26(deref(v0))
 *         del v0
 *         del v0_rec             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  delete __pyx_v_v0_rec;

  /* "py_libcpp_test.pyx":794
 *         del v0
 *         del v0_rec
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":795
 *         del v0_rec
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process27(self, list in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":780
 *         return py_result
 * 
 *     def process26(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process26(libcpp_vector[libcpp_vector[Int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process26", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0_rec);
  __Pyx_XDECREF(__pyx_v_in__rec);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":797
 *         return py_result
 * 
 *     def process27(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_73process27(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_72process27[] = "Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_73process27(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process27 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 797, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_72process27(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process27_2generator43(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process27_7genexpr_2generator44(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process27_7genexpr_7genexpr_2generator45(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":799
 *     def process27(self, list in_ ):
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec = new libcpp_vector[libcpp_vector[_Int]]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process27_7genexpr_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_65_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_65_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 799, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process27_7genexpr_7genexpr_2generator45, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process27_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process27.genexpr.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process27_7genexpr_7genexpr_2generator45(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 799, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) { __Pyx_RaiseClosureNameError("elemt_rec_rec"); __PYX_ERR(1, 799, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 799, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec, __pyx_ptype_14py_libcpp_test_Int); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process27_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_64_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_64_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 799, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process27_7genexpr_2generator44, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process27_locals_genexpr_locals_2, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process27.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process27_7genexpr_2generator44(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 799, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); __PYX_ERR(1, 799, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 799, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process27_7genexpr_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process27_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_63_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_63_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 799, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process27_2generator43, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process27_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process27.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process27_2generator43(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 799, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 799, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 799, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = PyList_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process27_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":797
 *         return py_result
 * 
 *     def process27(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_72process27(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *__pyx_cur_scope;
  std::vector<std::vector<std::vector<Int> > >  *__pyx_v_v0;
  std::vector<std::vector<Int> >  *__pyx_v_v0_rec;
  std::vector<Int>  *__pyx_v_v0_rec_rec;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item0_rec_rec = 0;
  PyObject *__pyx_v_in__rec = NULL;
  PyObject *__pyx_v_in__rec_rec = NULL;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<std::vector<Int> > >  *__pyx_t_6;
  std::vector<std::vector<Int> >  *__pyx_t_7;
  std::vector<Int>  *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process27", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_62_process27(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_62_process27, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 797, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":799
 *     def process27(self, list in_ ):
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec = new libcpp_vector[libcpp_vector[_Int]]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process27_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 799, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":800
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec_rec = new libcpp_vector[_Int]()
 */
  try {
    __pyx_t_6 = new std::vector<std::vector<std::vector<Int> > > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 800, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":801
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec = new libcpp_vector[libcpp_vector[_Int]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Int] * v0_rec_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec_rec
 */
  try {
    __pyx_t_7 = new std::vector<std::vector<Int> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 801, __pyx_L1_error)
  }
  __pyx_v_v0_rec = __pyx_t_7;

  /* "py_libcpp_test.pyx":802
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec_rec = new libcpp_vector[_Int]()             # <<<<<<<<<<<<<<
 *         cdef Int item0_rec_rec
 *         for in__rec in in_:
 */
  try {
    __pyx_t_8 = new std::vector<Int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 802, __pyx_L1_error)
  }
  __pyx_v_v0_rec_rec = __pyx_t_8;

  /* "py_libcpp_test.pyx":804
 *         cdef libcpp_vector[_Int] * v0_rec_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 804, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_5); __pyx_t_9 = 0;
  for (;;) {
    if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 804, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_in__rec, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":805
 *         cdef Int item0_rec_rec
 *         for in__rec in in_:
 *             v0_rec.clear()             # <<<<<<<<<<<<<<
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 */
    __pyx_v_v0_rec->clear();

    /* "py_libcpp_test.pyx":806
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec_rec.clear()
 *                 for item0_rec_rec in in__rec_rec:
 */
    if (likely(PyList_CheckExact(__pyx_v_in__rec)) || PyTuple_CheckExact(__pyx_v_in__rec)) {
      __pyx_t_2 = __pyx_v_in__rec; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in__rec); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 806, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_12 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_12); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 806, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_12); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 806, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        }
      } else {
        __pyx_t_12 = __pyx_t_11(__pyx_t_2);
        if (unlikely(!__pyx_t_12)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 806, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_12);
      }
      __Pyx_XDECREF_SET(__pyx_v_in__rec_rec, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "py_libcpp_test.pyx":807
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()             # <<<<<<<<<<<<<<
 *                 for item0_rec_rec in in__rec_rec:
 *                     v0_rec_rec.push_back(deref(item0_rec_rec.inst.get()))
 */
      __pyx_v_v0_rec_rec->clear();

      /* "py_libcpp_test.pyx":808
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 *                 for item0_rec_rec in in__rec_rec:             # <<<<<<<<<<<<<<
 *                     v0_rec_rec.push_back(deref(item0_rec_rec.inst.get()))
 *                 v0_rec.push_back(deref(v0_rec_rec))
 */
      if (likely(PyList_CheckExact(__pyx_v_in__rec_rec)) || PyTuple_CheckExact(__pyx_v_in__rec_rec)) {
        __pyx_t_12 = __pyx_v_in__rec_rec; __Pyx_INCREF(__pyx_t_12); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_v_in__rec_rec); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 808, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 808, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_12))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_12)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_15 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(1, 808, __pyx_L1_error)
            #else
            __pyx_t_15 = PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 808, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(1, 808, __pyx_L1_error)
            #else
            __pyx_t_15 = PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 808, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            #endif
          }
        } else {
          __pyx_t_15 = __pyx_t_14(__pyx_t_12);
          if (unlikely(!__pyx_t_15)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 808, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_15);
        }
        if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_14py_libcpp_test_Int))))) __PYX_ERR(1, 808, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_item0_rec_rec, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_15));
        __pyx_t_15 = 0;

        /* "py_libcpp_test.pyx":809
 *                 v0_rec_rec.clear()
 *                 for item0_rec_rec in in__rec_rec:
 *                     v0_rec_rec.push_back(deref(item0_rec_rec.inst.get()))             # <<<<<<<<<<<<<<
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))
 */
        try {
          __pyx_v_v0_rec_rec->push_back((*__pyx_v_item0_rec_rec->inst.get()));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 809, __pyx_L1_error)
        }

        /* "py_libcpp_test.pyx":808
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 *                 for item0_rec_rec in in__rec_rec:             # <<<<<<<<<<<<<<
 *                     v0_rec_rec.push_back(deref(item0_rec_rec.inst.get()))
 *                 v0_rec.push_back(deref(v0_rec_rec))
 */
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "py_libcpp_test.pyx":810
 *                 for item0_rec_rec in in__rec_rec:
 *                     v0_rec_rec.push_back(deref(item0_rec_rec.inst.get()))
 *                 v0_rec.push_back(deref(v0_rec_rec))             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process27(deref(v0))
 */
      try {
        __pyx_v_v0_rec->push_back((*__pyx_v_v0_rec_rec));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 810, __pyx_L1_error)
      }

      /* "py_libcpp_test.pyx":806
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec_rec.clear()
 *                 for item0_rec_rec in in__rec_rec:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":811
 *                     v0_rec_rec.push_back(deref(item0_rec_rec.inst.get()))
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))             # <<<<<<<<<<<<<<
 *         cdef int _r = self.inst.get().process27(deref(v0))
 *         del v0
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_v0_rec));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 811, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":804
 *         cdef libcpp_vector[_Int] * v0_rec_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":812
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process27(deref(v0))             # <<<<<<<<<<<<<<
 *         del v0
 *         del v0_rec
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process27((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":813
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process27(deref(v0))
 *         del v0             # <<<<<<<<<<<<<<
 *         del v0_rec
 *         del v0_rec_rec
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":814
 *         cdef int _r = self.inst.get().process27(deref(v0))
 *         del v0
 *         del v0_rec             # <<<<<<<<<<<<<<
 *         del v0_rec_rec
 *         py_result = <int>_r
 */
  delete __pyx_v_v0_rec;

  /* "py_libcpp_test.pyx":815
 *         del v0
 *         del v0_rec
 *         del v0_rec_rec             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  delete __pyx_v_v0_rec_rec;

  /* "py_libcpp_test.pyx":816
 *         del v0_rec
 *         del v0_rec_rec
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":817
 *         del v0_rec_rec
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process28(self, list in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":797
 *         return py_result
 * 
 *     def process27(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process27(libcpp_vector[libcpp_vector[libcpp_vector[Int]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, Int) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process27", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0_rec_rec);
  __Pyx_XDECREF(__pyx_v_in__rec);
  __Pyx_XDECREF(__pyx_v_in__rec_rec);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":819
 *         return py_result
 * 
 *     def process28(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_75process28(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_74process28[] = "Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_75process28(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process28 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 819, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_74process28(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_2generator46(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_2generator47(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_2generator48(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_7genexpr_2generator49(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":821
 *     def process28(self, list in_ ):
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_70_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_70_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 821, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_7genexpr_2generator49, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process28_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process28.genexpr.genexpr.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_7genexpr_2generator49(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 821, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec)) { __Pyx_RaiseClosureNameError("elemt_rec_rec_rec"); __PYX_ERR(1, 821, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 821, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 821, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec_rec, __pyx_ptype_14py_libcpp_test_Int); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_69_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_69_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 821, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_2generator48, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process28_locals_genexpr_locals_2, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process28.genexpr.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_2generator48(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 821, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) { __Pyx_RaiseClosureNameError("elemt_rec_rec"); __PYX_ERR(1, 821, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 821, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 821, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec_rec_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_68_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_68_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 821, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_2generator47, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process28_locals_genexpr_locals_3, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process28.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_7genexpr_2generator47(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 821, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); __PYX_ERR(1, 821, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 821, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 821, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process28_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_67_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_67_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 821, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process28_2generator46, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process28_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process28.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process28_2generator46(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 821, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 821, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 821, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = PyList_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process28_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":819
 *         return py_result
 * 
 *     def process28(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_74process28(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *__pyx_cur_scope;
  std::vector<std::vector<std::vector<std::vector<Int> > > >  *__pyx_v_v0;
  std::vector<std::vector<std::vector<Int> > >  *__pyx_v_v0_rec;
  std::vector<std::vector<Int> >  *__pyx_v_v0_rec_rec;
  std::vector<Int>  *__pyx_v_v0_rec_rec_rec;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item0_rec_rec_rec = 0;
  PyObject *__pyx_v_in__rec = NULL;
  PyObject *__pyx_v_in__rec_rec = NULL;
  PyObject *__pyx_v_in__rec_rec_rec = NULL;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<std::vector<std::vector<Int> > > >  *__pyx_t_6;
  std::vector<std::vector<std::vector<Int> > >  *__pyx_t_7;
  std::vector<std::vector<Int> >  *__pyx_t_8;
  std::vector<Int>  *__pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process28", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_66_process28(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_66_process28, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 819, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":821
 *     def process28(self, list in_ ):
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process28_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 821, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":822
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec_rec = new libcpp_vector[libcpp_vector[_Int]]()
 */
  try {
    __pyx_t_6 = new std::vector<std::vector<std::vector<std::vector<Int> > > > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 822, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":823
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec_rec = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec_rec_rec = new libcpp_vector[_Int]()
 */
  try {
    __pyx_t_7 = new std::vector<std::vector<std::vector<Int> > > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 823, __pyx_L1_error)
  }
  __pyx_v_v0_rec = __pyx_t_7;

  /* "py_libcpp_test.pyx":824
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec_rec = new libcpp_vector[libcpp_vector[_Int]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Int] * v0_rec_rec_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec_rec_rec
 */
  try {
    __pyx_t_8 = new std::vector<std::vector<Int> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 824, __pyx_L1_error)
  }
  __pyx_v_v0_rec_rec = __pyx_t_8;

  /* "py_libcpp_test.pyx":825
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec_rec = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec_rec_rec = new libcpp_vector[_Int]()             # <<<<<<<<<<<<<<
 *         cdef Int item0_rec_rec_rec
 *         for in__rec in in_:
 */
  try {
    __pyx_t_9 = new std::vector<Int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 825, __pyx_L1_error)
  }
  __pyx_v_v0_rec_rec_rec = __pyx_t_9;

  /* "py_libcpp_test.pyx":827
 *         cdef libcpp_vector[_Int] * v0_rec_rec_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec_rec_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 827, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
  for (;;) {
    if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_in__rec, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":828
 *         cdef Int item0_rec_rec_rec
 *         for in__rec in in_:
 *             v0_rec.clear()             # <<<<<<<<<<<<<<
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 */
    __pyx_v_v0_rec->clear();

    /* "py_libcpp_test.pyx":829
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:
 */
    if (likely(PyList_CheckExact(__pyx_v_in__rec)) || PyTuple_CheckExact(__pyx_v_in__rec)) {
      __pyx_t_2 = __pyx_v_in__rec; __Pyx_INCREF(__pyx_t_2); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in__rec); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 829, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 829, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 829, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        }
      } else {
        __pyx_t_13 = __pyx_t_12(__pyx_t_2);
        if (unlikely(!__pyx_t_13)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 829, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_13);
      }
      __Pyx_XDECREF_SET(__pyx_v_in__rec_rec, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "py_libcpp_test.pyx":830
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()             # <<<<<<<<<<<<<<
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()
 */
      __pyx_v_v0_rec_rec->clear();

      /* "py_libcpp_test.pyx":831
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:             # <<<<<<<<<<<<<<
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 */
      if (likely(PyList_CheckExact(__pyx_v_in__rec_rec)) || PyTuple_CheckExact(__pyx_v_in__rec_rec)) {
        __pyx_t_13 = __pyx_v_in__rec_rec; __Pyx_INCREF(__pyx_t_13); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_v_in__rec_rec); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 831, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 831, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_13))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_16 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
            #else
            __pyx_t_16 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 831, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
            #else
            __pyx_t_16 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 831, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
          }
        } else {
          __pyx_t_16 = __pyx_t_15(__pyx_t_13);
          if (unlikely(!__pyx_t_16)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 831, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_16);
        }
        __Pyx_XDECREF_SET(__pyx_v_in__rec_rec_rec, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "py_libcpp_test.pyx":832
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()             # <<<<<<<<<<<<<<
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 */
        __pyx_v_v0_rec_rec_rec->clear();

        /* "py_libcpp_test.pyx":833
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:             # <<<<<<<<<<<<<<
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 */
        if (likely(PyList_CheckExact(__pyx_v_in__rec_rec_rec)) || PyTuple_CheckExact(__pyx_v_in__rec_rec_rec)) {
          __pyx_t_16 = __pyx_v_in__rec_rec_rec; __Pyx_INCREF(__pyx_t_16); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
        } else {
          __pyx_t_17 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_v_in__rec_rec_rec); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 833, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_18 = Py_TYPE(__pyx_t_16)->tp_iternext; if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 833, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_18)) {
            if (likely(PyList_CheckExact(__pyx_t_16))) {
              if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_19 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_19); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
              #else
              __pyx_t_19 = PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 833, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_19);
              #endif
            } else {
              if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_19 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_19); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
              #else
              __pyx_t_19 = PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 833, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_19);
              #endif
            }
          } else {
            __pyx_t_19 = __pyx_t_18(__pyx_t_16);
            if (unlikely(!__pyx_t_19)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 833, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_19);
          }
          if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_14py_libcpp_test_Int))))) __PYX_ERR(1, 833, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_item0_rec_rec_rec, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_19));
          __pyx_t_19 = 0;

          /* "py_libcpp_test.pyx":834
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))             # <<<<<<<<<<<<<<
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 *                 v0_rec.push_back(deref(v0_rec_rec))
 */
          try {
            __pyx_v_v0_rec_rec_rec->push_back((*__pyx_v_item0_rec_rec_rec->inst.get()));
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 834, __pyx_L1_error)
          }

          /* "py_libcpp_test.pyx":833
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:             # <<<<<<<<<<<<<<
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 */
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "py_libcpp_test.pyx":835
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))             # <<<<<<<<<<<<<<
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))
 */
        try {
          __pyx_v_v0_rec_rec->push_back((*__pyx_v_v0_rec_rec_rec));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 835, __pyx_L1_error)
        }

        /* "py_libcpp_test.pyx":831
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:             # <<<<<<<<<<<<<<
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 */
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "py_libcpp_test.pyx":836
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 *                 v0_rec.push_back(deref(v0_rec_rec))             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process28(deref(v0))
 */
      try {
        __pyx_v_v0_rec->push_back((*__pyx_v_v0_rec_rec));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 836, __pyx_L1_error)
      }

      /* "py_libcpp_test.pyx":829
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":837
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))             # <<<<<<<<<<<<<<
 *         cdef int _r = self.inst.get().process28(deref(v0))
 *         del v0
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_v0_rec));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 837, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":827
 *         cdef libcpp_vector[_Int] * v0_rec_rec_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec_rec_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":838
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process28(deref(v0))             # <<<<<<<<<<<<<<
 *         del v0
 *         del v0_rec
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process28((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":839
 *             v0.push_back(deref(v0_rec))
 *         cdef int _r = self.inst.get().process28(deref(v0))
 *         del v0             # <<<<<<<<<<<<<<
 *         del v0_rec
 *         del v0_rec_rec
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":840
 *         cdef int _r = self.inst.get().process28(deref(v0))
 *         del v0
 *         del v0_rec             # <<<<<<<<<<<<<<
 *         del v0_rec_rec
 *         del v0_rec_rec_rec
 */
  delete __pyx_v_v0_rec;

  /* "py_libcpp_test.pyx":841
 *         del v0
 *         del v0_rec
 *         del v0_rec_rec             # <<<<<<<<<<<<<<
 *         del v0_rec_rec_rec
 *         py_result = <int>_r
 */
  delete __pyx_v_v0_rec_rec;

  /* "py_libcpp_test.pyx":842
 *         del v0_rec
 *         del v0_rec_rec
 *         del v0_rec_rec_rec             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  delete __pyx_v_v0_rec_rec_rec;

  /* "py_libcpp_test.pyx":843
 *         del v0_rec_rec
 *         del v0_rec_rec_rec
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":844
 *         del v0_rec_rec_rec
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process29(self, list in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":819
 *         return py_result
 * 
 *     def process28(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process28(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process28", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0_rec_rec_rec);
  __Pyx_XDECREF(__pyx_v_in__rec);
  __Pyx_XDECREF(__pyx_v_in__rec_rec);
  __Pyx_XDECREF(__pyx_v_in__rec_rec_rec);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":846
 *         return py_result
 * 
 *     def process29(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_77process29(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_76process29[] = "Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_77process29(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process29 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 846, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_76process29(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process29_2generator50(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process29_7genexpr_2generator51(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":848
 *     def process29(self, list in_ ):
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process29_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_73_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_73_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 848, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process29_7genexpr_2generator51, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process29_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process29.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process29_7genexpr_2generator51(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 848, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); __PYX_ERR(1, 848, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 848, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 848, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_ptype_14py_libcpp_test_Int); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process29_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_72_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_72_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 848, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process29_2generator50, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process29_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process29.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process29_2generator50(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 848, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 848, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 848, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = PyList_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process29_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":846
 *         return py_result
 * 
 *     def process29(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_76process29(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *__pyx_cur_scope;
  std::vector<std::vector<Int> >  *__pyx_v_v0;
  std::vector<Int>  *__pyx_v_v0_rec;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item0_rec = 0;
  std::vector<Int> ::iterator __pyx_v_it_in__rec;
  PyObject *__pyx_v_in__rec = NULL;
  std::vector<std::vector<Int> > ::iterator __pyx_v_it_in_;
  PyObject *__pyx_v_replace_0 = NULL;
  PyObject *__pyx_v_replace_1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<Int> >  *__pyx_t_6;
  std::vector<Int>  *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process29", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_71_process29(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_71_process29, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 846, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":848
 *     def process29(self, list in_ ):
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process29_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 848, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":849
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()
 *         cdef Int item0_rec
 */
  try {
    __pyx_t_6 = new std::vector<std::vector<Int> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 849, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":850
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0 = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[_Int] * v0_rec = new libcpp_vector[_Int]()             # <<<<<<<<<<<<<<
 *         cdef Int item0_rec
 *         cdef libcpp_vector[_Int].iterator it_in__rec
 */
  try {
    __pyx_t_7 = new std::vector<Int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 850, __pyx_L1_error)
  }
  __pyx_v_v0_rec = __pyx_t_7;

  /* "py_libcpp_test.pyx":853
 *         cdef Int item0_rec
 *         cdef libcpp_vector[_Int].iterator it_in__rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for item0_rec in in__rec:
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 853, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_5); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 853, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_in__rec, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":854
 *         cdef libcpp_vector[_Int].iterator it_in__rec
 *         for in__rec in in_:
 *             v0_rec.clear()             # <<<<<<<<<<<<<<
 *             for item0_rec in in__rec:
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 */
    __pyx_v_v0_rec->clear();

    /* "py_libcpp_test.pyx":855
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for item0_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))
 */
    if (likely(PyList_CheckExact(__pyx_v_in__rec)) || PyTuple_CheckExact(__pyx_v_in__rec)) {
      __pyx_t_2 = __pyx_v_in__rec; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in__rec); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 855, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 855, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 855, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 855, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 855, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 855, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_14py_libcpp_test_Int))))) __PYX_ERR(1, 855, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_item0_rec, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "py_libcpp_test.pyx":856
 *             v0_rec.clear()
 *             for item0_rec in in__rec:
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(v0_rec))
 *         self.inst.get().process29(deref(v0))
 */
      try {
        __pyx_v_v0_rec->push_back((*__pyx_v_item0_rec->inst.get()));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 856, __pyx_L1_error)
      }

      /* "py_libcpp_test.pyx":855
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for item0_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":857
 *             for item0_rec in in__rec:
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))             # <<<<<<<<<<<<<<
 *         self.inst.get().process29(deref(v0))
 *         cdef libcpp_vector[libcpp_vector[_Int]].iterator it_in_ = v0.begin()
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_v0_rec));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 857, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":853
 *         cdef Int item0_rec
 *         cdef libcpp_vector[_Int].iterator it_in__rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for item0_rec in in__rec:
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":858
 *                 v0_rec.push_back(deref(item0_rec.inst.get()))
 *             v0.push_back(deref(v0_rec))
 *         self.inst.get().process29(deref(v0))             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]].iterator it_in_ = v0.begin()
 *         replace_0 = []
 */
  __pyx_v_self->inst.get()->process29((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":859
 *             v0.push_back(deref(v0_rec))
 *         self.inst.get().process29(deref(v0))
 *         cdef libcpp_vector[libcpp_vector[_Int]].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         replace_0 = []
 *         while it_in_ != v0.end():
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":860
 *         self.inst.get().process29(deref(v0))
 *         cdef libcpp_vector[libcpp_vector[_Int]].iterator it_in_ = v0.begin()
 *         replace_0 = []             # <<<<<<<<<<<<<<
 *         while it_in_ != v0.end():
 *             it_in__rec = deref(it_in_).begin()
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_replace_0 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":861
 *         cdef libcpp_vector[libcpp_vector[_Int]].iterator it_in_ = v0.begin()
 *         replace_0 = []
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *             it_in__rec = deref(it_in_).begin()
 *             replace_1 = []
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":862
 *         replace_0 = []
 *         while it_in_ != v0.end():
 *             it_in__rec = deref(it_in_).begin()             # <<<<<<<<<<<<<<
 *             replace_1 = []
 *             while it_in__rec != deref(it_in_).end():
 */
    __pyx_v_it_in__rec = (*__pyx_v_it_in_).begin();

    /* "py_libcpp_test.pyx":863
 *         while it_in_ != v0.end():
 *             it_in__rec = deref(it_in_).begin()
 *             replace_1 = []             # <<<<<<<<<<<<<<
 *             while it_in__rec != deref(it_in_).end():
 *                 item0_rec = Int.__new__(Int)
 */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_replace_1, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":864
 *             it_in__rec = deref(it_in_).begin()
 *             replace_1 = []
 *             while it_in__rec != deref(it_in_).end():             # <<<<<<<<<<<<<<
 *                 item0_rec = Int.__new__(Int)
 *                 item0_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec)))
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_it_in__rec != (*__pyx_v_it_in_).end()) != 0);
      if (!__pyx_t_1) break;

      /* "py_libcpp_test.pyx":865
 *             replace_1 = []
 *             while it_in__rec != deref(it_in_).end():
 *                 item0_rec = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *                 item0_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec)))
 *                 replace_1.append(item0_rec)
 */
      __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 865, __pyx_L1_error)
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __Pyx_XDECREF_SET(__pyx_v_item0_rec, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "py_libcpp_test.pyx":866
 *             while it_in__rec != deref(it_in_).end():
 *                 item0_rec = Int.__new__(Int)
 *                 item0_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec)))             # <<<<<<<<<<<<<<
 *                 replace_1.append(item0_rec)
 *                 inc(it_in__rec)
 */
      __pyx_v_item0_rec->inst = boost::shared_ptr<Int> (new Int((*__pyx_v_it_in__rec)));

      /* "py_libcpp_test.pyx":867
 *                 item0_rec = Int.__new__(Int)
 *                 item0_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec)))
 *                 replace_1.append(item0_rec)             # <<<<<<<<<<<<<<
 *                 inc(it_in__rec)
 *             replace_0.append(replace_1)
 */
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_replace_1, ((PyObject *)__pyx_v_item0_rec)); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(1, 867, __pyx_L1_error)

      /* "py_libcpp_test.pyx":868
 *                 item0_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec)))
 *                 replace_1.append(item0_rec)
 *                 inc(it_in__rec)             # <<<<<<<<<<<<<<
 *             replace_0.append(replace_1)
 *             inc(it_in_)
 */
      (void)((++__pyx_v_it_in__rec));
    }

    /* "py_libcpp_test.pyx":869
 *                 replace_1.append(item0_rec)
 *                 inc(it_in__rec)
 *             replace_0.append(replace_1)             # <<<<<<<<<<<<<<
 *             inc(it_in_)
 *         in_[:] = replace_0
 */
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_replace_0, __pyx_v_replace_1); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(1, 869, __pyx_L1_error)

    /* "py_libcpp_test.pyx":870
 *                 inc(it_in__rec)
 *             replace_0.append(replace_1)
 *             inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_[:] = replace_0
 *         del v0
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":871
 *             replace_0.append(replace_1)
 *             inc(it_in_)
 *         in_[:] = replace_0             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 871, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_cur_scope->__pyx_v_in_, __pyx_v_replace_0, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 871, __pyx_L1_error)

  /* "py_libcpp_test.pyx":872
 *             inc(it_in_)
 *         in_[:] = replace_0
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process30(self, list in_ ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":846
 *         return py_result
 * 
 *     def process29(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process29(libcpp_vector[libcpp_vector[Int]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, Int) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process29", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0_rec);
  __Pyx_XDECREF(__pyx_v_in__rec);
  __Pyx_XDECREF(__pyx_v_replace_0);
  __Pyx_XDECREF(__pyx_v_replace_1);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":874
 *         del v0
 * 
 *     def process30(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_79process30(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_78process30[] = "Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_79process30(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process30 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 874, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_78process30(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_2generator52(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_2generator53(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_2generator54(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_7genexpr_2generator55(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":876
 *     def process30(self, list in_ ):
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_78_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_78_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 876, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_7genexpr_2generator55, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process30_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process30.genexpr.genexpr.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_7genexpr_2generator55(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 876, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec)) { __Pyx_RaiseClosureNameError("elemt_rec_rec_rec"); __PYX_ERR(1, 876, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 876, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 876, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec_rec, __pyx_ptype_14py_libcpp_test_Int); 
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_77_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_77_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 876, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_2generator54, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process30_locals_genexpr_locals_2, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process30.genexpr.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_2generator54(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 876, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) { __Pyx_RaiseClosureNameError("elemt_rec_rec"); __PYX_ERR(1, 876, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 876, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 876, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec_rec_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_76_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_76_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 876, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_2generator53, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process30_locals_genexpr_locals_3, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process30.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_7genexpr_2generator53(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 876, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); __PYX_ERR(1, 876, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 876, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 876, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_5) != 0);
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process30_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_75_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_75_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 876, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process30_2generator52, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process30_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process30.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process30_2generator52(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 876, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 876, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 876, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = PyList_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process30_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":874
 *         del v0
 * 
 *     def process30(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_78process30(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *__pyx_cur_scope;
  std::vector<std::vector<std::vector<std::vector<Int> > > >  *__pyx_v_v0;
  std::vector<std::vector<std::vector<Int> > >  *__pyx_v_v0_rec;
  std::vector<std::vector<std::vector<Int> > > ::iterator __pyx_v_it_in__rec;
  std::vector<std::vector<Int> >  *__pyx_v_v0_rec_rec;
  std::vector<std::vector<Int> > ::iterator __pyx_v_it_in__rec_rec;
  std::vector<Int>  *__pyx_v_v0_rec_rec_rec;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_item0_rec_rec_rec = 0;
  std::vector<Int> ::iterator __pyx_v_it_in__rec_rec_rec;
  PyObject *__pyx_v_in__rec = NULL;
  PyObject *__pyx_v_in__rec_rec = NULL;
  PyObject *__pyx_v_in__rec_rec_rec = NULL;
  std::vector<std::vector<std::vector<std::vector<Int> > > > ::iterator __pyx_v_it_in_;
  PyObject *__pyx_v_replace_0 = NULL;
  PyObject *__pyx_v_replace_1 = NULL;
  PyObject *__pyx_v_replace_2 = NULL;
  PyObject *__pyx_v_replace_3 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<std::vector<std::vector<Int> > > >  *__pyx_t_6;
  std::vector<std::vector<std::vector<Int> > >  *__pyx_t_7;
  std::vector<std::vector<Int> >  *__pyx_t_8;
  std::vector<Int>  *__pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process30", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_74_process30(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_74_process30, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 874, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":876
 *     def process30(self, list in_ ):
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process30_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 876, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":877
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]].iterator it_in__rec
 */
  try {
    __pyx_t_6 = new std::vector<std::vector<std::vector<std::vector<Int> > > > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 877, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":878
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]] * v0 = new libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]].iterator it_in__rec
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec_rec = new libcpp_vector[libcpp_vector[_Int]]()
 */
  try {
    __pyx_t_7 = new std::vector<std::vector<std::vector<Int> > > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 878, __pyx_L1_error)
  }
  __pyx_v_v0_rec = __pyx_t_7;

  /* "py_libcpp_test.pyx":880
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]] * v0_rec = new libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]()
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[_Int]]].iterator it_in__rec
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec_rec = new libcpp_vector[libcpp_vector[_Int]]()             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[_Int]].iterator it_in__rec_rec
 *         cdef libcpp_vector[_Int] * v0_rec_rec_rec = new libcpp_vector[_Int]()
 */
  try {
    __pyx_t_8 = new std::vector<std::vector<Int> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 880, __pyx_L1_error)
  }
  __pyx_v_v0_rec_rec = __pyx_t_8;

  /* "py_libcpp_test.pyx":882
 *         cdef libcpp_vector[libcpp_vector[_Int]] * v0_rec_rec = new libcpp_vector[libcpp_vector[_Int]]()
 *         cdef libcpp_vector[libcpp_vector[_Int]].iterator it_in__rec_rec
 *         cdef libcpp_vector[_Int] * v0_rec_rec_rec = new libcpp_vector[_Int]()             # <<<<<<<<<<<<<<
 *         cdef Int item0_rec_rec_rec
 *         cdef libcpp_vector[_Int].iterator it_in__rec_rec_rec
 */
  try {
    __pyx_t_9 = new std::vector<Int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 882, __pyx_L1_error)
  }
  __pyx_v_v0_rec_rec_rec = __pyx_t_9;

  /* "py_libcpp_test.pyx":885
 *         cdef Int item0_rec_rec_rec
 *         cdef libcpp_vector[_Int].iterator it_in__rec_rec_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 885, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
  for (;;) {
    if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 885, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_in__rec, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":886
 *         cdef libcpp_vector[_Int].iterator it_in__rec_rec_rec
 *         for in__rec in in_:
 *             v0_rec.clear()             # <<<<<<<<<<<<<<
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 */
    __pyx_v_v0_rec->clear();

    /* "py_libcpp_test.pyx":887
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:
 */
    if (likely(PyList_CheckExact(__pyx_v_in__rec)) || PyTuple_CheckExact(__pyx_v_in__rec)) {
      __pyx_t_2 = __pyx_v_in__rec; __Pyx_INCREF(__pyx_t_2); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in__rec); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 887, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(1, 887, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(1, 887, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        }
      } else {
        __pyx_t_13 = __pyx_t_12(__pyx_t_2);
        if (unlikely(!__pyx_t_13)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 887, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_13);
      }
      __Pyx_XDECREF_SET(__pyx_v_in__rec_rec, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "py_libcpp_test.pyx":888
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()             # <<<<<<<<<<<<<<
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()
 */
      __pyx_v_v0_rec_rec->clear();

      /* "py_libcpp_test.pyx":889
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:             # <<<<<<<<<<<<<<
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 */
      if (likely(PyList_CheckExact(__pyx_v_in__rec_rec)) || PyTuple_CheckExact(__pyx_v_in__rec_rec)) {
        __pyx_t_13 = __pyx_v_in__rec_rec; __Pyx_INCREF(__pyx_t_13); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_v_in__rec_rec); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 889, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 889, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_15)) {
          if (likely(PyList_CheckExact(__pyx_t_13))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_16 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 889, __pyx_L1_error)
            #else
            __pyx_t_16 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 889, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 889, __pyx_L1_error)
            #else
            __pyx_t_16 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 889, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
          }
        } else {
          __pyx_t_16 = __pyx_t_15(__pyx_t_13);
          if (unlikely(!__pyx_t_16)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 889, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_16);
        }
        __Pyx_XDECREF_SET(__pyx_v_in__rec_rec_rec, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "py_libcpp_test.pyx":890
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()             # <<<<<<<<<<<<<<
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 */
        __pyx_v_v0_rec_rec_rec->clear();

        /* "py_libcpp_test.pyx":891
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:             # <<<<<<<<<<<<<<
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 */
        if (likely(PyList_CheckExact(__pyx_v_in__rec_rec_rec)) || PyTuple_CheckExact(__pyx_v_in__rec_rec_rec)) {
          __pyx_t_16 = __pyx_v_in__rec_rec_rec; __Pyx_INCREF(__pyx_t_16); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
        } else {
          __pyx_t_17 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_v_in__rec_rec_rec); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 891, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_18 = Py_TYPE(__pyx_t_16)->tp_iternext; if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 891, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_18)) {
            if (likely(PyList_CheckExact(__pyx_t_16))) {
              if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_19 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_19); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(1, 891, __pyx_L1_error)
              #else
              __pyx_t_19 = PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 891, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_19);
              #endif
            } else {
              if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_19 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_19); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(1, 891, __pyx_L1_error)
              #else
              __pyx_t_19 = PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 891, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_19);
              #endif
            }
          } else {
            __pyx_t_19 = __pyx_t_18(__pyx_t_16);
            if (unlikely(!__pyx_t_19)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 891, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_19);
          }
          if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_14py_libcpp_test_Int))))) __PYX_ERR(1, 891, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_item0_rec_rec_rec, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_19));
          __pyx_t_19 = 0;

          /* "py_libcpp_test.pyx":892
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))             # <<<<<<<<<<<<<<
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 *                 v0_rec.push_back(deref(v0_rec_rec))
 */
          try {
            __pyx_v_v0_rec_rec_rec->push_back((*__pyx_v_item0_rec_rec_rec->inst.get()));
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 892, __pyx_L1_error)
          }

          /* "py_libcpp_test.pyx":891
 *                 for in__rec_rec_rec in in__rec_rec:
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:             # <<<<<<<<<<<<<<
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 */
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "py_libcpp_test.pyx":893
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))             # <<<<<<<<<<<<<<
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))
 */
        try {
          __pyx_v_v0_rec_rec->push_back((*__pyx_v_v0_rec_rec_rec));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 893, __pyx_L1_error)
        }

        /* "py_libcpp_test.pyx":889
 *             for in__rec_rec in in__rec:
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:             # <<<<<<<<<<<<<<
 *                     v0_rec_rec_rec.clear()
 *                     for item0_rec_rec_rec in in__rec_rec_rec:
 */
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "py_libcpp_test.pyx":894
 *                         v0_rec_rec_rec.push_back(deref(item0_rec_rec_rec.inst.get()))
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 *                 v0_rec.push_back(deref(v0_rec_rec))             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(v0_rec))
 *         self.inst.get().process30(deref(v0))
 */
      try {
        __pyx_v_v0_rec->push_back((*__pyx_v_v0_rec_rec));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 894, __pyx_L1_error)
      }

      /* "py_libcpp_test.pyx":887
 *         for in__rec in in_:
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:             # <<<<<<<<<<<<<<
 *                 v0_rec_rec.clear()
 *                 for in__rec_rec_rec in in__rec_rec:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_libcpp_test.pyx":895
 *                     v0_rec_rec.push_back(deref(v0_rec_rec_rec))
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))             # <<<<<<<<<<<<<<
 *         self.inst.get().process30(deref(v0))
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]].iterator it_in_ = v0.begin()
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_v0_rec));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 895, __pyx_L1_error)
    }

    /* "py_libcpp_test.pyx":885
 *         cdef Int item0_rec_rec_rec
 *         cdef libcpp_vector[_Int].iterator it_in__rec_rec_rec
 *         for in__rec in in_:             # <<<<<<<<<<<<<<
 *             v0_rec.clear()
 *             for in__rec_rec in in__rec:
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":896
 *                 v0_rec.push_back(deref(v0_rec_rec))
 *             v0.push_back(deref(v0_rec))
 *         self.inst.get().process30(deref(v0))             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]].iterator it_in_ = v0.begin()
 *         replace_0 = []
 */
  __pyx_v_self->inst.get()->process30((*__pyx_v_v0));

  /* "py_libcpp_test.pyx":897
 *             v0.push_back(deref(v0_rec))
 *         self.inst.get().process30(deref(v0))
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]].iterator it_in_ = v0.begin()             # <<<<<<<<<<<<<<
 *         replace_0 = []
 *         while it_in_ != v0.end():
 */
  __pyx_v_it_in_ = __pyx_v_v0->begin();

  /* "py_libcpp_test.pyx":898
 *         self.inst.get().process30(deref(v0))
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]].iterator it_in_ = v0.begin()
 *         replace_0 = []             # <<<<<<<<<<<<<<
 *         while it_in_ != v0.end():
 *             it_in__rec = deref(it_in_).begin()
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_replace_0 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":899
 *         cdef libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[_Int]]]].iterator it_in_ = v0.begin()
 *         replace_0 = []
 *         while it_in_ != v0.end():             # <<<<<<<<<<<<<<
 *             it_in__rec = deref(it_in_).begin()
 *             replace_1 = []
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it_in_ != __pyx_v_v0->end()) != 0);
    if (!__pyx_t_1) break;

    /* "py_libcpp_test.pyx":900
 *         replace_0 = []
 *         while it_in_ != v0.end():
 *             it_in__rec = deref(it_in_).begin()             # <<<<<<<<<<<<<<
 *             replace_1 = []
 *             while it_in__rec != deref(it_in_).end():
 */
    __pyx_v_it_in__rec = (*__pyx_v_it_in_).begin();

    /* "py_libcpp_test.pyx":901
 *         while it_in_ != v0.end():
 *             it_in__rec = deref(it_in_).begin()
 *             replace_1 = []             # <<<<<<<<<<<<<<
 *             while it_in__rec != deref(it_in_).end():
 *                 it_in__rec_rec = deref(it_in__rec).begin()
 */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_replace_1, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "py_libcpp_test.pyx":902
 *             it_in__rec = deref(it_in_).begin()
 *             replace_1 = []
 *             while it_in__rec != deref(it_in_).end():             # <<<<<<<<<<<<<<
 *                 it_in__rec_rec = deref(it_in__rec).begin()
 *                 replace_2 = []
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_it_in__rec != (*__pyx_v_it_in_).end()) != 0);
      if (!__pyx_t_1) break;

      /* "py_libcpp_test.pyx":903
 *             replace_1 = []
 *             while it_in__rec != deref(it_in_).end():
 *                 it_in__rec_rec = deref(it_in__rec).begin()             # <<<<<<<<<<<<<<
 *                 replace_2 = []
 *                 while it_in__rec_rec != deref(it_in__rec).end():
 */
      __pyx_v_it_in__rec_rec = (*__pyx_v_it_in__rec).begin();

      /* "py_libcpp_test.pyx":904
 *             while it_in__rec != deref(it_in_).end():
 *                 it_in__rec_rec = deref(it_in__rec).begin()
 *                 replace_2 = []             # <<<<<<<<<<<<<<
 *                 while it_in__rec_rec != deref(it_in__rec).end():
 *                     it_in__rec_rec_rec = deref(it_in__rec_rec).begin()
 */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 904, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_replace_2, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "py_libcpp_test.pyx":905
 *                 it_in__rec_rec = deref(it_in__rec).begin()
 *                 replace_2 = []
 *                 while it_in__rec_rec != deref(it_in__rec).end():             # <<<<<<<<<<<<<<
 *                     it_in__rec_rec_rec = deref(it_in__rec_rec).begin()
 *                     replace_3 = []
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_it_in__rec_rec != (*__pyx_v_it_in__rec).end()) != 0);
        if (!__pyx_t_1) break;

        /* "py_libcpp_test.pyx":906
 *                 replace_2 = []
 *                 while it_in__rec_rec != deref(it_in__rec).end():
 *                     it_in__rec_rec_rec = deref(it_in__rec_rec).begin()             # <<<<<<<<<<<<<<
 *                     replace_3 = []
 *                     while it_in__rec_rec_rec != deref(it_in__rec_rec).end():
 */
        __pyx_v_it_in__rec_rec_rec = (*__pyx_v_it_in__rec_rec).begin();

        /* "py_libcpp_test.pyx":907
 *                 while it_in__rec_rec != deref(it_in__rec).end():
 *                     it_in__rec_rec_rec = deref(it_in__rec_rec).begin()
 *                     replace_3 = []             # <<<<<<<<<<<<<<
 *                     while it_in__rec_rec_rec != deref(it_in__rec_rec).end():
 *                         item0_rec_rec_rec = Int.__new__(Int)
 */
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 907, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_replace_3, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "py_libcpp_test.pyx":908
 *                     it_in__rec_rec_rec = deref(it_in__rec_rec).begin()
 *                     replace_3 = []
 *                     while it_in__rec_rec_rec != deref(it_in__rec_rec).end():             # <<<<<<<<<<<<<<
 *                         item0_rec_rec_rec = Int.__new__(Int)
 *                         item0_rec_rec_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec_rec_rec)))
 */
        while (1) {
          __pyx_t_1 = ((__pyx_v_it_in__rec_rec_rec != (*__pyx_v_it_in__rec_rec).end()) != 0);
          if (!__pyx_t_1) break;

          /* "py_libcpp_test.pyx":909
 *                     replace_3 = []
 *                     while it_in__rec_rec_rec != deref(it_in__rec_rec).end():
 *                         item0_rec_rec_rec = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *                         item0_rec_rec_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec_rec_rec)))
 *                         replace_3.append(item0_rec_rec_rec)
 */
          __pyx_t_5 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 909, __pyx_L1_error)
          __Pyx_GOTREF(((PyObject *)__pyx_t_5));
          __Pyx_XDECREF_SET(__pyx_v_item0_rec_rec_rec, ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_5));
          __pyx_t_5 = 0;

          /* "py_libcpp_test.pyx":910
 *                     while it_in__rec_rec_rec != deref(it_in__rec_rec).end():
 *                         item0_rec_rec_rec = Int.__new__(Int)
 *                         item0_rec_rec_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec_rec_rec)))             # <<<<<<<<<<<<<<
 *                         replace_3.append(item0_rec_rec_rec)
 *                         inc(it_in__rec_rec_rec)
 */
          __pyx_v_item0_rec_rec_rec->inst = boost::shared_ptr<Int> (new Int((*__pyx_v_it_in__rec_rec_rec)));

          /* "py_libcpp_test.pyx":911
 *                         item0_rec_rec_rec = Int.__new__(Int)
 *                         item0_rec_rec_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec_rec_rec)))
 *                         replace_3.append(item0_rec_rec_rec)             # <<<<<<<<<<<<<<
 *                         inc(it_in__rec_rec_rec)
 *                     replace_2.append(replace_3)
 */
          __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_replace_3, ((PyObject *)__pyx_v_item0_rec_rec_rec)); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(1, 911, __pyx_L1_error)

          /* "py_libcpp_test.pyx":912
 *                         item0_rec_rec_rec.inst = shared_ptr[_Int](new _Int(deref(it_in__rec_rec_rec)))
 *                         replace_3.append(item0_rec_rec_rec)
 *                         inc(it_in__rec_rec_rec)             # <<<<<<<<<<<<<<
 *                     replace_2.append(replace_3)
 *                     inc(it_in__rec_rec)
 */
          (void)((++__pyx_v_it_in__rec_rec_rec));
        }

        /* "py_libcpp_test.pyx":913
 *                         replace_3.append(item0_rec_rec_rec)
 *                         inc(it_in__rec_rec_rec)
 *                     replace_2.append(replace_3)             # <<<<<<<<<<<<<<
 *                     inc(it_in__rec_rec)
 *                 replace_1.append(replace_2)
 */
        __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_replace_2, __pyx_v_replace_3); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(1, 913, __pyx_L1_error)

        /* "py_libcpp_test.pyx":914
 *                         inc(it_in__rec_rec_rec)
 *                     replace_2.append(replace_3)
 *                     inc(it_in__rec_rec)             # <<<<<<<<<<<<<<
 *                 replace_1.append(replace_2)
 *                 inc(it_in__rec)
 */
        (void)((++__pyx_v_it_in__rec_rec));
      }

      /* "py_libcpp_test.pyx":915
 *                     replace_2.append(replace_3)
 *                     inc(it_in__rec_rec)
 *                 replace_1.append(replace_2)             # <<<<<<<<<<<<<<
 *                 inc(it_in__rec)
 *             replace_0.append(replace_1)
 */
      __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_replace_1, __pyx_v_replace_2); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(1, 915, __pyx_L1_error)

      /* "py_libcpp_test.pyx":916
 *                     inc(it_in__rec_rec)
 *                 replace_1.append(replace_2)
 *                 inc(it_in__rec)             # <<<<<<<<<<<<<<
 *             replace_0.append(replace_1)
 *             inc(it_in_)
 */
      (void)((++__pyx_v_it_in__rec));
    }

    /* "py_libcpp_test.pyx":917
 *                 replace_1.append(replace_2)
 *                 inc(it_in__rec)
 *             replace_0.append(replace_1)             # <<<<<<<<<<<<<<
 *             inc(it_in_)
 *         in_[:] = replace_0
 */
    __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_replace_0, __pyx_v_replace_1); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(1, 917, __pyx_L1_error)

    /* "py_libcpp_test.pyx":918
 *                 inc(it_in__rec)
 *             replace_0.append(replace_1)
 *             inc(it_in_)             # <<<<<<<<<<<<<<
 *         in_[:] = replace_0
 *         del v0
 */
    (void)((++__pyx_v_it_in_));
  }

  /* "py_libcpp_test.pyx":919
 *             replace_0.append(replace_1)
 *             inc(it_in_)
 *         in_[:] = replace_0             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 919, __pyx_L1_error)
  }
  if (__Pyx_PyObject_SetSlice(__pyx_cur_scope->__pyx_v_in_, __pyx_v_replace_0, 0, 0, NULL, NULL, NULL, 0, 0, 0) < 0) __PYX_ERR(1, 919, __pyx_L1_error)

  /* "py_libcpp_test.pyx":920
 *             inc(it_in_)
 *         in_[:] = replace_0
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def process31(self, list in_ ):
 */
  delete __pyx_v_v0;

  /* "py_libcpp_test.pyx":874
 *         del v0
 * 
 *     def process30(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void process30(libcpp_vector[libcpp_vector[libcpp_vector[libcpp_vector[Int]]]] & in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, list) and all(isinstance(elemt_rec_rec_rec, list) and all(isinstance(elemt_rec_rec_rec_rec, Int) for elemt_rec_rec_rec_rec in elemt_rec_rec_rec) for elemt_rec_rec_rec in elemt_rec_rec) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process30", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0_rec_rec_rec);
  __Pyx_XDECREF(__pyx_v_in__rec);
  __Pyx_XDECREF(__pyx_v_in__rec_rec);
  __Pyx_XDECREF(__pyx_v_in__rec_rec_rec);
  __Pyx_XDECREF(__pyx_v_replace_0);
  __Pyx_XDECREF(__pyx_v_replace_1);
  __Pyx_XDECREF(__pyx_v_replace_2);
  __Pyx_XDECREF(__pyx_v_replace_3);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":922
 *         del v0
 * 
 *     def process31(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_81process31(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_80process31[] = "Cython signature: int process31(libcpp_vector[int] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_81process31(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process31 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 922, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_80process31(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process31_2generator56(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":924
 *     def process31(self, list in_ ):
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_
 *         cdef int _r = self.inst.get().process31(v0)
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process31_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_80_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_80_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 924, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process31_2generator56, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process31_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 924, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process31.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process31_2generator56(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 924, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 924, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 924, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 924, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyInt_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":922
 *         del v0
 * 
 *     def process31(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_80process31(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *__pyx_cur_scope;
  std::vector<int>  __pyx_v_v0;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<int>  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process31", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_79_process31(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_79_process31, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 922, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":924
 *     def process31(self, list in_ ):
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[int] v0 = in_
 *         cdef int _r = self.inst.get().process31(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process31_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 924, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 924, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":925
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[int] v0 = in_             # <<<<<<<<<<<<<<
 *         cdef int _r = self.inst.get().process31(v0)
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_int(__pyx_cur_scope->__pyx_v_in_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 925, __pyx_L1_error)
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":926
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[int] v0 = in_
 *         cdef int _r = self.inst.get().process31(v0)             # <<<<<<<<<<<<<<
 * 
 *         py_result = <int>_r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process31(__pyx_v_v0);

  /* "py_libcpp_test.pyx":928
 *         cdef int _r = self.inst.get().process31(v0)
 * 
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":929
 * 
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process32(self, list in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":922
 *         del v0
 * 
 *     def process31(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process31(libcpp_vector[int] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, (int, long)) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process31", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":931
 *         return py_result
 * 
 *     def process32(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_83process32(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_82process32[] = "Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_83process32(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process32 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), (&PyList_Type), 1, "in_", 1))) __PYX_ERR(1, 931, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_82process32(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject*)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process32_2generator57(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process32_7genexpr_2generator58(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "py_libcpp_test.pyx":933
 *     def process32(self, list in_ ):
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[int]] v0 = in_
 *         cdef int _r = self.inst.get().process32(v0)
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process32_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_83_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_83_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 933, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process32_7genexpr_2generator58, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process32_locals_genexpr_locals, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process32.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process32_7genexpr_2generator58(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 933, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); __PYX_ERR(1, 933, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 933, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 933, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 933, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_6 = PyInt_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyLong_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_9process32_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_82_genexpr(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_82_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 933, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14py_libcpp_test_10LibCppTest_9process32_2generator57, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_process32_locals_genexpr, __pyx_n_s_py_libcpp_test); if (unlikely(!gen)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process32.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14py_libcpp_test_10LibCppTest_9process32_2generator57(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *__pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 933, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_)) { __Pyx_RaiseClosureNameError("in_"); __PYX_ERR(1, 933, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_ == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 933, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 933, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = PyList_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process32_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":931
 *         return py_result
 * 
 *     def process32(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_82process32(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *__pyx_cur_scope;
  std::vector<std::vector<int> >  __pyx_v_v0;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<int> >  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process32", 0);
  __pyx_cur_scope = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *)__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_81_process32(__pyx_ptype_14py_libcpp_test___pyx_scope_struct_81_process32, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 931, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_in_ = __pyx_v_in_;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_);

  /* "py_libcpp_test.pyx":933
 *     def process32(self, list in_ ):
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[int]] v0 = in_
 *         cdef int _r = self.inst.get().process32(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_14py_libcpp_test_10LibCppTest_9process32_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 933, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":934
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[int]] v0 = in_             # <<<<<<<<<<<<<<
 *         cdef int _r = self.inst.get().process32(v0)
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(__pyx_cur_scope->__pyx_v_in_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 934, __pyx_L1_error)
  __pyx_v_v0 = __pyx_t_6;

  /* "py_libcpp_test.pyx":935
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 *         cdef libcpp_vector[libcpp_vector[int]] v0 = in_
 *         cdef int _r = self.inst.get().process32(v0)             # <<<<<<<<<<<<<<
 * 
 *         py_result = <int>_r
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process32(__pyx_v_v0);

  /* "py_libcpp_test.pyx":937
 *         cdef int _r = self.inst.get().process32(v0)
 * 
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":938
 * 
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process33(self, Int in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":931
 *         return py_result
 * 
 *     def process32(self, list in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process32(libcpp_vector[libcpp_vector[int]] in_)"""
 *         assert isinstance(in_, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, (int, long)) for elemt_rec_rec in elemt_rec) for elemt_rec in in_), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":940
 *         return py_result
 * 
 *     def process33(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process33(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_85process33(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_84process33[] = "Cython signature: int process33(shared_ptr[Int] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_85process33(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process33 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int, 1, "in_", 0))) __PYX_ERR(1, 940, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_84process33(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_84process33(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_) {
  boost::shared_ptr<Int>  __pyx_v_input_in_;
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  boost::shared_ptr<Int>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process33", 0);

  /* "py_libcpp_test.pyx":942
 *     def process33(self, Int in_ ):
 *         """Cython signature: int process33(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[_Int] input_in_ = in_.inst
 *         cdef int _r = self.inst.get().process33(input_in_)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 942, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":943
 *         """Cython signature: int process33(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 *         cdef shared_ptr[_Int] input_in_ = in_.inst             # <<<<<<<<<<<<<<
 *         cdef int _r = self.inst.get().process33(input_in_)
 *         py_result = <int>_r
 */
  __pyx_t_2 = __pyx_v_in_->inst;
  __pyx_v_input_in_ = __pyx_t_2;

  /* "py_libcpp_test.pyx":944
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 *         cdef shared_ptr[_Int] input_in_ = in_.inst
 *         cdef int _r = self.inst.get().process33(input_in_)             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process33(__pyx_v_input_in_);

  /* "py_libcpp_test.pyx":945
 *         cdef shared_ptr[_Int] input_in_ = in_.inst
 *         cdef int _r = self.inst.get().process33(input_in_)
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":946
 *         cdef int _r = self.inst.get().process33(input_in_)
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process34(self, Int in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":940
 *         return py_result
 * 
 *     def process33(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process33(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process33", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":948
 *         return py_result
 * 
 *     def process34(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: shared_ptr[Int] process34(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_87process34(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_86process34[] = "Cython signature: shared_ptr[Int] process34(shared_ptr[Int] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_87process34(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process34 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int, 1, "in_", 0))) __PYX_ERR(1, 948, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_86process34(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_86process34(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_) {
  boost::shared_ptr<Int>  __pyx_v_input_in_;
  boost::shared_ptr<Int>  __pyx_v__r;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  boost::shared_ptr<Int>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process34", 0);

  /* "py_libcpp_test.pyx":950
 *     def process34(self, Int in_ ):
 *         """Cython signature: shared_ptr[Int] process34(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[_Int] input_in_ = in_.inst
 *         cdef shared_ptr[_Int] _r = self.inst.get().process34(input_in_)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 950, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":951
 *         """Cython signature: shared_ptr[Int] process34(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 *         cdef shared_ptr[_Int] input_in_ = in_.inst             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[_Int] _r = self.inst.get().process34(input_in_)
 *         cdef Int py_result
 */
  __pyx_t_2 = __pyx_v_in_->inst;
  __pyx_v_input_in_ = __pyx_t_2;

  /* "py_libcpp_test.pyx":952
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 *         cdef shared_ptr[_Int] input_in_ = in_.inst
 *         cdef shared_ptr[_Int] _r = self.inst.get().process34(input_in_)             # <<<<<<<<<<<<<<
 *         cdef Int py_result
 *         py_result = Int.__new__(Int)
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process34(__pyx_v_input_in_);

  /* "py_libcpp_test.pyx":954
 *         cdef shared_ptr[_Int] _r = self.inst.get().process34(input_in_)
 *         cdef Int py_result
 *         py_result = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *         py_result.inst = _r
 *         return py_result
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 954, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v_py_result = ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "py_libcpp_test.pyx":955
 *         cdef Int py_result
 *         py_result = Int.__new__(Int)
 *         py_result.inst = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result->inst = __pyx_v__r;

  /* "py_libcpp_test.pyx":956
 *         py_result = Int.__new__(Int)
 *         py_result.inst = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process35(self, Int in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_result));
  __pyx_r = ((PyObject *)__pyx_v_py_result);
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":948
 *         return py_result
 * 
 *     def process34(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: shared_ptr[Int] process34(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process34", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":958
 *         return py_result
 * 
 *     def process35(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: shared_ptr[const Int] process35(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_89process35(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_88process35[] = "Cython signature: shared_ptr[const Int] process35(shared_ptr[Int] in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_89process35(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process35 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int, 1, "in_", 0))) __PYX_ERR(1, 958, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_88process35(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_88process35(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_) {
  boost::shared_ptr<Int>  __pyx_v_input_in_;
  boost::shared_ptr<Int const >  __pyx_v__r;
  Int *__pyx_v_raw__r;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  boost::shared_ptr<Int>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process35", 0);

  /* "py_libcpp_test.pyx":960
 *     def process35(self, Int in_ ):
 *         """Cython signature: shared_ptr[const Int] process35(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[_Int] input_in_ = in_.inst
 *         cdef shared_ptr[const _Int] _r = self.inst.get().process35(input_in_)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 960, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":961
 *         """Cython signature: shared_ptr[const Int] process35(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 *         cdef shared_ptr[_Int] input_in_ = in_.inst             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[const _Int] _r = self.inst.get().process35(input_in_)
 *         # Const shared_ptr detected, we need to produce a non-const copy to stick into Python object
 */
  __pyx_t_2 = __pyx_v_in_->inst;
  __pyx_v_input_in_ = __pyx_t_2;

  /* "py_libcpp_test.pyx":962
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 *         cdef shared_ptr[_Int] input_in_ = in_.inst
 *         cdef shared_ptr[const _Int] _r = self.inst.get().process35(input_in_)             # <<<<<<<<<<<<<<
 *         # Const shared_ptr detected, we need to produce a non-const copy to stick into Python object
 *         cdef _Int * raw__r = new _Int((deref(<_Int * const>_r.get())))
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process35(__pyx_v_input_in_);

  /* "py_libcpp_test.pyx":964
 *         cdef shared_ptr[const _Int] _r = self.inst.get().process35(input_in_)
 *         # Const shared_ptr detected, we need to produce a non-const copy to stick into Python object
 *         cdef _Int * raw__r = new _Int((deref(<_Int * const>_r.get())))             # <<<<<<<<<<<<<<
 *         cdef Int py_result
 *         py_result = Int.__new__(Int)
 */
  __pyx_v_raw__r = new Int((*((Int *const )__pyx_v__r.get())));

  /* "py_libcpp_test.pyx":966
 *         cdef _Int * raw__r = new _Int((deref(<_Int * const>_r.get())))
 *         cdef Int py_result
 *         py_result = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *         py_result.inst = shared_ptr[_Int](raw__r)
 *         return py_result
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 966, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v_py_result = ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "py_libcpp_test.pyx":967
 *         cdef Int py_result
 *         py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](raw__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result->inst = boost::shared_ptr<Int> (__pyx_v_raw__r);

  /* "py_libcpp_test.pyx":968
 *         py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](raw__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process36(self, Int in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_result));
  __pyx_r = ((PyObject *)__pyx_v_py_result);
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":958
 *         return py_result
 * 
 *     def process35(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: shared_ptr[const Int] process35(shared_ptr[Int] in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process35", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":970
 *         return py_result
 * 
 *     def process36(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process36(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_91process36(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_90process36[] = "Cython signature: int process36(Int * in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_91process36(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process36 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int, 1, "in_", 0))) __PYX_ERR(1, 970, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_90process36(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_90process36(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process36", 0);

  /* "py_libcpp_test.pyx":972
 *     def process36(self, Int in_ ):
 *         """Cython signature: int process36(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef int _r = self.inst.get().process36((in_.inst.get()))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 972, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":974
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 * 
 *         cdef int _r = self.inst.get().process36((in_.inst.get()))             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process36(__pyx_v_in_->inst.get());

  /* "py_libcpp_test.pyx":975
 * 
 *         cdef int _r = self.inst.get().process36((in_.inst.get()))
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":976
 *         cdef int _r = self.inst.get().process36((in_.inst.get()))
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process37(self, Int in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":970
 *         return py_result
 * 
 *     def process36(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process36(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process36", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":978
 *         return py_result
 * 
 *     def process37(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: Int * process37(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_93process37(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_92process37[] = "Cython signature: Int * process37(Int * in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_93process37(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process37 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int, 1, "in_", 0))) __PYX_ERR(1, 978, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_92process37(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_92process37(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_) {
  Int *__pyx_v___r;
  Int *__pyx_v__r;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process37", 0);

  /* "py_libcpp_test.pyx":980
 *     def process37(self, Int in_ ):
 *         """Cython signature: Int * process37(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef  _Int * __r = (self.inst.get().process37((in_.inst.get())))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 980, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":982
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 * 
 *         cdef  _Int * __r = (self.inst.get().process37((in_.inst.get())))             # <<<<<<<<<<<<<<
 *         if __r == NULL:
 *             return None
 */
  __pyx_v___r = __pyx_v_self->inst.get()->process37(__pyx_v_in_->inst.get());

  /* "py_libcpp_test.pyx":983
 * 
 *         cdef  _Int * __r = (self.inst.get().process37((in_.inst.get())))
 *         if __r == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))
 */
  __pyx_t_1 = ((__pyx_v___r == NULL) != 0);
  if (__pyx_t_1) {

    /* "py_libcpp_test.pyx":984
 *         cdef  _Int * __r = (self.inst.get().process37((in_.inst.get())))
 *         if __r == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef _Int * _r = new _Int(deref(__r))
 *         cdef Int py_result = Int.__new__(Int)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":983
 * 
 *         cdef  _Int * __r = (self.inst.get().process37((in_.inst.get())))
 *         if __r == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))
 */
  }

  /* "py_libcpp_test.pyx":985
 *         if __r == NULL:
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))             # <<<<<<<<<<<<<<
 *         cdef Int py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](_r)
 */
  __pyx_v__r = new Int((*__pyx_v___r));

  /* "py_libcpp_test.pyx":986
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))
 *         cdef Int py_result = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *         py_result.inst = shared_ptr[_Int](_r)
 *         return py_result
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 986, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_py_result = ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":987
 *         cdef _Int * _r = new _Int(deref(__r))
 *         cdef Int py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](_r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result->inst = boost::shared_ptr<Int> (__pyx_v__r);

  /* "py_libcpp_test.pyx":988
 *         cdef Int py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](_r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process38(self,  in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_result));
  __pyx_r = ((PyObject *)__pyx_v_py_result);
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":978
 *         return py_result
 * 
 *     def process37(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: Int * process37(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process37", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":990
 *         return py_result
 * 
 *     def process38(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_vector[UInt]] process38(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_95process38(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_94process38[] = "Cython signature: libcpp_vector[libcpp_vector[UInt]] process38(int)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_95process38(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process38 (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_94process38(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject *)__pyx_v_in_0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_94process38(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_in_0) {
  std::vector<std::vector<__pyx_t_11libcpp_test_UInt> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process38", 0);

  /* "py_libcpp_test.pyx":992
 *     def process38(self,  in_0 ):
 *         """Cython signature: libcpp_vector[libcpp_vector[UInt]] process38(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         _r = self.inst.get().process38((<int>in_0))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in_0_wrong_type);
      __PYX_ERR(1, 992, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":994
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 * 
 *         _r = self.inst.get().process38((<int>in_0))             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 994, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->process38(((int)__pyx_t_4));

  /* "py_libcpp_test.pyx":995
 * 
 *         _r = self.inst.get().process38((<int>in_0))
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___(__pyx_v__r); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(1, 995, __pyx_L1_error)
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "py_libcpp_test.pyx":996
 *         _r = self.inst.get().process38((<int>in_0))
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process39(self, Int in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":990
 *         return py_result
 * 
 *     def process38(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[libcpp_vector[UInt]] process38(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process38", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":998
 *         return py_result
 * 
 *     def process39(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: const Int * process39(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_97process39(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_96process39[] = "Cython signature: const Int * process39(Int * in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_97process39(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process39 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int, 1, "in_", 0))) __PYX_ERR(1, 998, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_96process39(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_96process39(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_in_) {
  Int const *__pyx_v___r;
  Int *__pyx_v__r;
  struct __pyx_obj_14py_libcpp_test_Int *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process39", 0);

  /* "py_libcpp_test.pyx":1000
 *     def process39(self, Int in_ ):
 *         """Cython signature: const Int * process39(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef const _Int * __r = (self.inst.get().process39((in_.inst.get())))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_Int); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 1000, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":1002
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 * 
 *         cdef const _Int * __r = (self.inst.get().process39((in_.inst.get())))             # <<<<<<<<<<<<<<
 *         if __r == NULL:
 *             return None
 */
  __pyx_v___r = __pyx_v_self->inst.get()->process39(__pyx_v_in_->inst.get());

  /* "py_libcpp_test.pyx":1003
 * 
 *         cdef const _Int * __r = (self.inst.get().process39((in_.inst.get())))
 *         if __r == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))
 */
  __pyx_t_1 = ((__pyx_v___r == NULL) != 0);
  if (__pyx_t_1) {

    /* "py_libcpp_test.pyx":1004
 *         cdef const _Int * __r = (self.inst.get().process39((in_.inst.get())))
 *         if __r == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef _Int * _r = new _Int(deref(__r))
 *         cdef Int py_result = Int.__new__(Int)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":1003
 * 
 *         cdef const _Int * __r = (self.inst.get().process39((in_.inst.get())))
 *         if __r == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))
 */
  }

  /* "py_libcpp_test.pyx":1005
 *         if __r == NULL:
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))             # <<<<<<<<<<<<<<
 *         cdef Int py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](_r)
 */
  __pyx_v__r = new Int((*__pyx_v___r));

  /* "py_libcpp_test.pyx":1006
 *             return None
 *         cdef _Int * _r = new _Int(deref(__r))
 *         cdef Int py_result = Int.__new__(Int)             # <<<<<<<<<<<<<<
 *         py_result.inst = shared_ptr[_Int](_r)
 *         return py_result
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_14py_libcpp_test_Int(((PyTypeObject *)__pyx_ptype_14py_libcpp_test_Int), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1006, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_py_result = ((struct __pyx_obj_14py_libcpp_test_Int *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "py_libcpp_test.pyx":1007
 *         cdef _Int * _r = new _Int(deref(__r))
 *         cdef Int py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](_r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result->inst = boost::shared_ptr<Int> (__pyx_v__r);

  /* "py_libcpp_test.pyx":1008
 *         cdef Int py_result = Int.__new__(Int)
 *         py_result.inst = shared_ptr[_Int](_r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _process40_0(self, ABS_Impl1 in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_result));
  __pyx_r = ((PyObject *)__pyx_v_py_result);
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":998
 *         return py_result
 * 
 *     def process39(self, Int in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: const Int * process39(Int * in_)"""
 *         assert isinstance(in_, Int), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process39", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":1010
 *         return py_result
 * 
 *     def _process40_0(self, ABS_Impl1 in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process40(ABS_Impl1 * in_)"""
 *         assert isinstance(in_, ABS_Impl1), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_99_process40_0(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_98_process40_0[] = "Cython signature: int process40(ABS_Impl1 * in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_99_process40_0(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_process40_0 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_ABS_Impl1, 1, "in_", 0))) __PYX_ERR(1, 1010, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_98_process40_0(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_98_process40_0(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *__pyx_v_in_) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_process40_0", 0);

  /* "py_libcpp_test.pyx":1012
 *     def _process40_0(self, ABS_Impl1 in_ ):
 *         """Cython signature: int process40(ABS_Impl1 * in_)"""
 *         assert isinstance(in_, ABS_Impl1), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_ABS_Impl1); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 1012, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":1014
 *         assert isinstance(in_, ABS_Impl1), 'arg in_ wrong type'
 * 
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process40(__pyx_v_in_->inst.get());

  /* "py_libcpp_test.pyx":1015
 * 
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":1016
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _process40_1(self, ABS_Impl2 in_ ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":1010
 *         return py_result
 * 
 *     def _process40_0(self, ABS_Impl1 in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process40(ABS_Impl1 * in_)"""
 *         assert isinstance(in_, ABS_Impl1), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest._process40_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":1018
 *         return py_result
 * 
 *     def _process40_1(self, ABS_Impl2 in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process40(ABS_Impl2 * in_)"""
 *         assert isinstance(in_, ABS_Impl2), 'arg in_ wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_101_process40_1(PyObject *__pyx_v_self, PyObject *__pyx_v_in_); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_100_process40_1[] = "Cython signature: int process40(ABS_Impl2 * in_)";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_101_process40_1(PyObject *__pyx_v_self, PyObject *__pyx_v_in_) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_process40_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_ABS_Impl2, 1, "in_", 0))) __PYX_ERR(1, 1018, __pyx_L1_error)
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_100_process40_1(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)__pyx_v_in_));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_100_process40_1(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *__pyx_v_in_) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_process40_1", 0);

  /* "py_libcpp_test.pyx":1020
 *     def _process40_1(self, ABS_Impl2 in_ ):
 *         """Cython signature: int process40(ABS_Impl2 * in_)"""
 *         assert isinstance(in_, ABS_Impl2), 'arg in_ wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_), __pyx_ptype_14py_libcpp_test_ABS_Impl2); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_in__wrong_type);
      __PYX_ERR(1, 1020, __pyx_L1_error)
    }
  }
  #endif

  /* "py_libcpp_test.pyx":1022
 *         assert isinstance(in_, ABS_Impl2), 'arg in_ wrong type'
 * 
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->process40(__pyx_v_in_->inst.get());

  /* "py_libcpp_test.pyx":1023
 * 
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "py_libcpp_test.pyx":1024
 *         cdef int _r = self.inst.get().process40((in_.inst.get()))
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def process40(self, *args ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":1018
 *         return py_result
 * 
 *     def _process40_1(self, ABS_Impl2 in_ ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int process40(ABS_Impl2 * in_)"""
 *         assert isinstance(in_, ABS_Impl2), 'arg in_ wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest._process40_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":1026
 *         return py_result
 * 
 *     def process40(self, *args ):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: int process40(ABS_Impl1 * in_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_103process40(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14py_libcpp_test_10LibCppTest_102process40[] = "\n          - Cython signature: int process40(ABS_Impl1 * in_)\n          - Cython signature: int process40(ABS_Impl2 * in_)\n";
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_103process40(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("process40 (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "process40", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_102process40(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_102process40(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process40", 0);

  /* "py_libcpp_test.pyx":1031
 *           - Cython signature: int process40(ABS_Impl2 * in_)
 * """
 *         if (len(args)==1) and (isinstance(args[0], ABS_Impl1)):             # <<<<<<<<<<<<<<
 *             return self._process40_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], ABS_Impl2)):
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1031, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_14py_libcpp_test_ABS_Impl1); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "py_libcpp_test.pyx":1032
 * """
 *         if (len(args)==1) and (isinstance(args[0], ABS_Impl1)):
 *             return self._process40_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], ABS_Impl2)):
 *             return self._process40_1(*args)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_process40_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":1031
 *           - Cython signature: int process40(ABS_Impl2 * in_)
 * """
 *         if (len(args)==1) and (isinstance(args[0], ABS_Impl1)):             # <<<<<<<<<<<<<<
 *             return self._process40_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], ABS_Impl2)):
 */
  }

  /* "py_libcpp_test.pyx":1033
 *         if (len(args)==1) and (isinstance(args[0], ABS_Impl1)):
 *             return self._process40_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], ABS_Impl2)):             # <<<<<<<<<<<<<<
 *             return self._process40_1(*args)
 *         else:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1033, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_6 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_TypeCheck(__pyx_t_6, __pyx_ptype_14py_libcpp_test_ABS_Impl2); 
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "py_libcpp_test.pyx":1034
 *             return self._process40_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], ABS_Impl2)):
 *             return self._process40_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_process40_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":1033
 *         if (len(args)==1) and (isinstance(args[0], ABS_Impl1)):
 *             return self._process40_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], ABS_Impl2)):             # <<<<<<<<<<<<<<
 *             return self._process40_1(*args)
 *         else:
 */
  }

  /* "py_libcpp_test.pyx":1036
 *             return self._process40_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, op):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_args), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_can_not_handle_type_of, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 1036, __pyx_L1_error)
  }

  /* "py_libcpp_test.pyx":1026
 *         return py_result
 * 
 *     def process40(self, *args ):             # <<<<<<<<<<<<<<
 *         """
 *           - Cython signature: int process40(ABS_Impl1 * in_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.process40", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":1038
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         if op not in (2, 3):
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_105__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_105__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(1, 1038, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_104__richcmp__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_104__richcmp__(struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_v_op_str = NULL;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_other_casted = 0;
  struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self_casted = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "py_libcpp_test.pyx":1039
 * 
 *     def __richcmp__(self, other, op):
 *         if op not in (2, 3):             # <<<<<<<<<<<<<<
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]
 *            raise Exception("comparions operator %s not implemented" % op_str)
 */
  __Pyx_INCREF(__pyx_v_op);
  __pyx_t_1 = __pyx_v_op;
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "py_libcpp_test.pyx":1040
 *     def __richcmp__(self, other, op):
 *         if op not in (2, 3):
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]             # <<<<<<<<<<<<<<
 *            raise Exception("comparions operator %s not implemented" % op_str)
 *         if not isinstance(other, LibCppTest):
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, __pyx_kp_u__8) < 0) __PYX_ERR(1, 1040, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_int_2, __pyx_kp_u__9) < 0) __PYX_ERR(1, 1040, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_int_4, __pyx_kp_u__10) < 0) __PYX_ERR(1, 1040, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_int_1, __pyx_kp_u__11) < 0) __PYX_ERR(1, 1040, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_int_3, __pyx_kp_u__12) < 0) __PYX_ERR(1, 1040, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_int_5, __pyx_kp_u__13) < 0) __PYX_ERR(1, 1040, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_t_1, __pyx_v_op); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_op_str = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "py_libcpp_test.pyx":1041
 *         if op not in (2, 3):
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]
 *            raise Exception("comparions operator %s not implemented" % op_str)             # <<<<<<<<<<<<<<
 *         if not isinstance(other, LibCppTest):
 *             return False
 */
    __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_comparions_operator_s_not_implem, __pyx_v_op_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1041, __pyx_L1_error)

    /* "py_libcpp_test.pyx":1039
 * 
 *     def __richcmp__(self, other, op):
 *         if op not in (2, 3):             # <<<<<<<<<<<<<<
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]
 *            raise Exception("comparions operator %s not implemented" % op_str)
 */
  }

  /* "py_libcpp_test.pyx":1042
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]
 *            raise Exception("comparions operator %s not implemented" % op_str)
 *         if not isinstance(other, LibCppTest):             # <<<<<<<<<<<<<<
 *             return False
 *         cdef LibCppTest other_casted = other
 */
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_14py_libcpp_test_LibCppTest); 
  __pyx_t_2 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_2) {

    /* "py_libcpp_test.pyx":1043
 *            raise Exception("comparions operator %s not implemented" % op_str)
 *         if not isinstance(other, LibCppTest):
 *             return False             # <<<<<<<<<<<<<<
 *         cdef LibCppTest other_casted = other
 *         cdef LibCppTest self_casted = self
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":1042
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]
 *            raise Exception("comparions operator %s not implemented" % op_str)
 *         if not isinstance(other, LibCppTest):             # <<<<<<<<<<<<<<
 *             return False
 *         cdef LibCppTest other_casted = other
 */
  }

  /* "py_libcpp_test.pyx":1044
 *         if not isinstance(other, LibCppTest):
 *             return False
 *         cdef LibCppTest other_casted = other             # <<<<<<<<<<<<<<
 *         cdef LibCppTest self_casted = self
 *         if op==2:
 */
  if (!(likely(((__pyx_v_other) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_14py_libcpp_test_LibCppTest))))) __PYX_ERR(1, 1044, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_other;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_other_casted = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_libcpp_test.pyx":1045
 *             return False
 *         cdef LibCppTest other_casted = other
 *         cdef LibCppTest self_casted = self             # <<<<<<<<<<<<<<
 *         if op==2:
 *             return deref(self_casted.inst.get()) == deref(other_casted.inst.get())
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_v_self_casted = __pyx_v_self;

  /* "py_libcpp_test.pyx":1046
 *         cdef LibCppTest other_casted = other
 *         cdef LibCppTest self_casted = self
 *         if op==2:             # <<<<<<<<<<<<<<
 *             return deref(self_casted.inst.get()) == deref(other_casted.inst.get())
 *         if op==3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1046, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "py_libcpp_test.pyx":1047
 *         cdef LibCppTest self_casted = self
 *         if op==2:
 *             return deref(self_casted.inst.get()) == deref(other_casted.inst.get())             # <<<<<<<<<<<<<<
 *         if op==3:
 *             return deref(self_casted.inst.get()) != deref(other_casted.inst.get())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(((*__pyx_v_self_casted->inst.get()) == (*__pyx_v_other_casted->inst.get()))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1047, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":1046
 *         cdef LibCppTest other_casted = other
 *         cdef LibCppTest self_casted = self
 *         if op==2:             # <<<<<<<<<<<<<<
 *             return deref(self_casted.inst.get()) == deref(other_casted.inst.get())
 *         if op==3:
 */
  }

  /* "py_libcpp_test.pyx":1048
 *         if op==2:
 *             return deref(self_casted.inst.get()) == deref(other_casted.inst.get())
 *         if op==3:             # <<<<<<<<<<<<<<
 *             return deref(self_casted.inst.get()) != deref(other_casted.inst.get())
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "py_libcpp_test.pyx":1049
 *             return deref(self_casted.inst.get()) == deref(other_casted.inst.get())
 *         if op==3:
 *             return deref(self_casted.inst.get()) != deref(other_casted.inst.get())             # <<<<<<<<<<<<<<
 * 
 * cdef class EEE:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(((*__pyx_v_self_casted->inst.get()) != (*__pyx_v_other_casted->inst.get()))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "py_libcpp_test.pyx":1048
 *         if op==2:
 *             return deref(self_casted.inst.get()) == deref(other_casted.inst.get())
 *         if op==3:             # <<<<<<<<<<<<<<
 *             return deref(self_casted.inst.get()) != deref(other_casted.inst.get())
 * 
 */
  }

  /* "py_libcpp_test.pyx":1038
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         if op not in (2, 3):
 *            op_str = {0: '<', 2: '==', 4: '>', 1: '<=', 3: '!=', 5: '>='}[op]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op_str);
  __Pyx_XDECREF((PyObject *)__pyx_v_other_casted);
  __Pyx_XDECREF((PyObject *)__pyx_v_self_casted);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_107__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_107__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_106__reduce_cython__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_106__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_109__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_10LibCppTest_109__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_10LibCppTest_108__setstate_cython__(((struct __pyx_obj_14py_libcpp_test_LibCppTest *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_10LibCppTest_108__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14py_libcpp_test_LibCppTest *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.LibCppTest.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_libcpp_test.pyx":1055
 *     B = 1
 * 
 *     def getMapping(self):             # <<<<<<<<<<<<<<
 *         return dict([ (v, k) for k, v in self.__class__.__dict__.items() if isinstance(v, int) ])
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3EEE_1getMapping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3EEE_1getMapping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMapping (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3EEE_getMapping(((struct __pyx_obj_14py_libcpp_test_EEE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3EEE_getMapping(struct __pyx_obj_14py_libcpp_test_EEE *__pyx_v_self) {
  PyObject *__pyx_9genexpr59__pyx_v_k = NULL;
  PyObject *__pyx_9genexpr59__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMapping", 0);

  /* "py_libcpp_test.pyx":1056
 * 
 *     def getMapping(self):
 *         return dict([ (v, k) for k, v in self.__class__.__dict__.items() if isinstance(v, int) ])             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1056, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1056, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1056, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_items); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1056, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1056, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1056, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1056, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1056, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1056, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1056, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1056, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1056, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(1, 1056, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1056, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1056, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1056, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(1, 1056, __pyx_L5_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(1, 1056, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr59__pyx_v_k, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_9genexpr59__pyx_v_v, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_10 = PyInt_Check(__pyx_9genexpr59__pyx_v_v); 
      __pyx_t_11 = (__pyx_t_10 != 0);
      if (__pyx_t_11) {
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1056, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_9genexpr59__pyx_v_v);
        __Pyx_GIVEREF(__pyx_9genexpr59__pyx_v_v);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_9genexpr59__pyx_v_v);
        __Pyx_INCREF(__pyx_9genexpr59__pyx_v_k);
        __Pyx_GIVEREF(__pyx_9genexpr59__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_9genexpr59__pyx_v_k);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 1056, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_9genexpr59__pyx_v_k); __pyx_9genexpr59__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_9genexpr59__pyx_v_v); __pyx_9genexpr59__pyx_v_v = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr59__pyx_v_k); __pyx_9genexpr59__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_9genexpr59__pyx_v_v); __pyx_9genexpr59__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "py_libcpp_test.pyx":1055
 *     B = 1
 * 
 *     def getMapping(self):             # <<<<<<<<<<<<<<
 *         return dict([ (v, k) for k, v in self.__class__.__dict__.items() if isinstance(v, int) ])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("py_libcpp_test.EEE.getMapping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr59__pyx_v_k);
  __Pyx_XDECREF(__pyx_9genexpr59__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3EEE_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3EEE_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3EEE_2__reduce_cython__(((struct __pyx_obj_14py_libcpp_test_EEE *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3EEE_2__reduce_cython__(struct __pyx_obj_14py_libcpp_test_EEE *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_EEE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_EEE__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_EEE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.EEE.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_EEE__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_3EEE_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14py_libcpp_test_3EEE_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14py_libcpp_test_3EEE_4__setstate_cython__(((struct __pyx_obj_14py_libcpp_test_EEE *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test_3EEE_4__setstate_cython__(struct __pyx_obj_14py_libcpp_test_EEE *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_EEE__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_14py_libcpp_test___pyx_unpickle_EEE__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_EEE, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_EEE__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_libcpp_test.EEE.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_EEE(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_14py_libcpp_test_1__pyx_unpickle_EEE(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14py_libcpp_test_1__pyx_unpickle_EEE = {"__pyx_unpickle_EEE", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_1__pyx_unpickle_EEE, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14py_libcpp_test_1__pyx_unpickle_EEE(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_EEE (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_EEE", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_EEE", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_EEE") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_EEE", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_libcpp_test.__pyx_unpickle_EEE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14py_libcpp_test___pyx_unpickle_EEE(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14py_libcpp_test___pyx_unpickle_EEE(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_EEE", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = EEE.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = EEE.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = EEE.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_EEE__set_state(<EEE> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_14py_libcpp_test_EEE), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = EEE.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_EEE__set_state(<EEE> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = EEE.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_EEE__set_state(<EEE> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_EEE__set_state(EEE __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_14py_libcpp_test___pyx_unpickle_EEE__set_state(((struct __pyx_obj_14py_libcpp_test_EEE *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = EEE.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_EEE__set_state(<EEE> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_EEE__set_state(<EEE> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_EEE__set_state(EEE __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_EEE(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("py_libcpp_test.__pyx_unpickle_EEE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_EEE__set_state(<EEE> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_EEE__set_state(EEE __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_14py_libcpp_test___pyx_unpickle_EEE__set_state(struct __pyx_obj_14py_libcpp_test_EEE *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_EEE__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_EEE__set_state(EEE __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_EEE__set_state(EEE __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_EEE__set_state(EEE __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_EEE__set_state(<EEE> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_EEE__set_state(EEE __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("py_libcpp_test.__pyx_unpickle_EEE__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_double")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_double(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<int,double>  __pyx_convert_pair_from_py_int__and_double(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<int,double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_int__and_double", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_int__and_double")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_double(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_double(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_r = std::pair<int,double> (((int)__pyx_t_5), ((double)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_double")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_double(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_int__and_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<int,double> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___(PyObject *__pyx_v_o) {
  std::vector<std::pair<int,double> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<int,double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<int,double>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_int__and_double(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::pair<int,double> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____double")
 * cdef object __pyx_convert_pair_to_py_int____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____double(std::pair<int,double>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____double", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_int____double")
 * cdef object __pyx_convert_pair_to_py_int____double(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____double")
 * cdef object __pyx_convert_pair_to_py_int____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___(const std::vector<std::pair<int,double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_int____double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.from_py":108
 * 
 * @cname("__pyx_convert_set_from_py_int")
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

static std::set<int>  __pyx_convert_set_from_py_int(PyObject *__pyx_v_o) {
  std::set<int>  __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::set<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_set_from_py_int", 0);

  /* "set.from_py":110
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 110, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "set.from_py":111
 *     cdef set[X] s
 *     for item in o:
 *         s.insert(<X>item)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __pyx_v_s.insert(((int)__pyx_t_5));

    /* "set.from_py":110
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.from_py":112
 *     for item in o:
 *         s.insert(<X>item)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "set.from_py":108
 * 
 * @cname("__pyx_convert_set_from_py_int")
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("set.from_py.__pyx_convert_set_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_int")
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

static PyObject *__pyx_convert_set_to_py_int(std::set<int>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::set<int> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_set_to_py_int", 0);

  /* "set.to_py":130
 * @cname("__pyx_convert_set_to_py_int")
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):
 *     o = set()             # <<<<<<<<<<<<<<
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "set.to_py":131
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "set.to_py":132
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "set.to_py":133
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySet_Add(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "set.to_py":134
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "set.to_py":135
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_int")
 * cdef object __pyx_convert_set_to_py_int(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("set.to_py.__pyx_convert_set_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<int>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<int> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<int,int>  __pyx_convert_pair_from_py_int__and_int(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<int,int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_int__and_int", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_r = std::pair<int,int> (((int)__pyx_t_5), ((int)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_int__and_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<int,int> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::pair<int,int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<int,int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<int,int>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_int__and_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::pair<int,int> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_int____int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.from_py":108
 * 
 * @cname("__pyx_convert_set_from_py_float")
 * cdef set[X] __pyx_convert_set_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

static std::set<float>  __pyx_convert_set_from_py_float(PyObject *__pyx_v_o) {
  std::set<float>  __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::set<float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_set_from_py_float", 0);

  /* "set.from_py":110
 * cdef set[X] __pyx_convert_set_from_py_float(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 110, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "set.from_py":111
 *     cdef set[X] s
 *     for item in o:
 *         s.insert(<X>item)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __pyx_v_s.insert(((float)__pyx_t_5));

    /* "set.from_py":110
 * cdef set[X] __pyx_convert_set_from_py_float(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.from_py":112
 *     for item in o:
 *         s.insert(<X>item)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "set.from_py":108
 * 
 * @cname("__pyx_convert_set_from_py_float")
 * cdef set[X] __pyx_convert_set_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("set.from_py.__pyx_convert_set_from_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_float")
 * cdef object __pyx_convert_set_to_py_float(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

static PyObject *__pyx_convert_set_to_py_float(std::set<float>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::set<float> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_set_to_py_float", 0);

  /* "set.to_py":130
 * @cname("__pyx_convert_set_to_py_float")
 * cdef object __pyx_convert_set_to_py_float(const cpp_set[X]& s):
 *     o = set()             # <<<<<<<<<<<<<<
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "set.to_py":131
 * cdef object __pyx_convert_set_to_py_float(const cpp_set[X]& s):
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "set.to_py":132
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "set.to_py":133
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = PyFloat_FromDouble((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySet_Add(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "set.to_py":134
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "set.to_py":135
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_float")
 * cdef object __pyx_convert_set_to_py_float(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("set.to_py.__pyx_convert_set_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *__pyx_v_o) {
  std::vector<float>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_float", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((float)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_float", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt(const std::vector<__pyx_t_11libcpp_test_UInt>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt")
 * cdef object __pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt")
 * cdef object __pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___(const std::vector<std::vector<__pyx_t_11libcpp_test_UInt> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py___pyx_t_11libcpp_test_UInt((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_14py_libcpp_test_ABS_Impl1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)o);
  new((void*)&(p->inst)) boost::shared_ptr<ABS_Impl1> ();
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test_ABS_Impl1(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *p = (struct __pyx_obj_14py_libcpp_test_ABS_Impl1 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14py_libcpp_test_9ABS_Impl1_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14py_libcpp_test_ABS_Impl1[] = {
  {"_init_0", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl1_3_init_0, METH_NOARGS, __pyx_doc_14py_libcpp_test_9ABS_Impl1_2_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl1_5_init_1, METH_O, __pyx_doc_14py_libcpp_test_9ABS_Impl1_4_init_1},
  {"get", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl1_9get, METH_NOARGS, __pyx_doc_14py_libcpp_test_9ABS_Impl1_8get},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl1_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl1_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14py_libcpp_test_ABS_Impl1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.ABS_Impl1", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test_ABS_Impl1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test_ABS_Impl1, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _ABS_Impl1\n     -- Inherits from ['AbstractBaseClass']\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14py_libcpp_test_ABS_Impl1, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14py_libcpp_test_9ABS_Impl1_7__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test_ABS_Impl1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_14py_libcpp_test_ABS_Impl2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)o);
  new((void*)&(p->inst)) boost::shared_ptr<ABS_Impl2> ();
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test_ABS_Impl2(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *p = (struct __pyx_obj_14py_libcpp_test_ABS_Impl2 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14py_libcpp_test_9ABS_Impl2_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14py_libcpp_test_ABS_Impl2[] = {
  {"_init_0", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl2_3_init_0, METH_NOARGS, __pyx_doc_14py_libcpp_test_9ABS_Impl2_2_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl2_5_init_1, METH_O, __pyx_doc_14py_libcpp_test_9ABS_Impl2_4_init_1},
  {"get", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl2_9get, METH_NOARGS, __pyx_doc_14py_libcpp_test_9ABS_Impl2_8get},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl2_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_9ABS_Impl2_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14py_libcpp_test_ABS_Impl2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.ABS_Impl2", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test_ABS_Impl2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test_ABS_Impl2, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _ABS_Impl2\n     -- Inherits from ['AbstractBaseClass']\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14py_libcpp_test_ABS_Impl2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14py_libcpp_test_9ABS_Impl2_7__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test_ABS_Impl2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_14py_libcpp_test_Int(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14py_libcpp_test_Int *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14py_libcpp_test_Int *)o);
  new((void*)&(p->inst)) boost::shared_ptr<Int> ();
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test_Int(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test_Int *p = (struct __pyx_obj_14py_libcpp_test_Int *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14py_libcpp_test_3Int_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_14py_libcpp_test_3Int_i_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14py_libcpp_test_3Int_2i__3__get__(o);
}

static int __pyx_setprop_14py_libcpp_test_3Int_i_(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_14py_libcpp_test_3Int_2i__1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_14py_libcpp_test_Int[] = {
  {"__copy__", (PyCFunction)__pyx_pw_14py_libcpp_test_3Int_3__copy__, METH_NOARGS, 0},
  {"__deepcopy__", (PyCFunction)__pyx_pw_14py_libcpp_test_3Int_5__deepcopy__, METH_O, 0},
  {"_init_0", (PyCFunction)__pyx_pw_14py_libcpp_test_3Int_7_init_0, METH_O, __pyx_doc_14py_libcpp_test_3Int_6_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_14py_libcpp_test_3Int_9_init_1, METH_O, __pyx_doc_14py_libcpp_test_3Int_8_init_1},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_3Int_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_3Int_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14py_libcpp_test_Int[] = {
  {(char *)"i_", __pyx_getprop_14py_libcpp_test_3Int_i_, __pyx_setprop_14py_libcpp_test_3Int_i_, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14py_libcpp_test_Int = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.Int", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test_Int), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test_Int, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _Int\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14py_libcpp_test_Int, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14py_libcpp_test_Int, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14py_libcpp_test_3Int_11__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test_Int, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_14py_libcpp_test_LibCppTest(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14py_libcpp_test_LibCppTest *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14py_libcpp_test_LibCppTest *)o);
  new((void*)&(p->inst)) boost::shared_ptr<LibCppTest> ();
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test_LibCppTest(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test_LibCppTest *p = (struct __pyx_obj_14py_libcpp_test_LibCppTest *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14py_libcpp_test_10LibCppTest_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_14py_libcpp_test_10LibCppTest_integer_vector_ptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_3__get__(o);
}

static int __pyx_setprop_14py_libcpp_test_10LibCppTest_integer_vector_ptr(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_14py_libcpp_test_10LibCppTest_18integer_vector_ptr_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_14py_libcpp_test_10LibCppTest_integer_ptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14py_libcpp_test_10LibCppTest_11integer_ptr_3__get__(o);
}

static int __pyx_setprop_14py_libcpp_test_10LibCppTest_integer_ptr(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_14py_libcpp_test_10LibCppTest_11integer_ptr_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_14py_libcpp_test_LibCppTest[] = {
  {"_init_0", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_5_init_0, METH_NOARGS, __pyx_doc_14py_libcpp_test_10LibCppTest_4_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_7_init_1, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_6_init_1},
  {"gett", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_11gett, METH_NOARGS, __pyx_doc_14py_libcpp_test_10LibCppTest_10gett},
  {"twist", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_13twist, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_12twist},
  {"process", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_15process, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_14process},
  {"process2", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_17process2, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_16process2},
  {"process3", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_19process3, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_18process3},
  {"process4", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_21process4, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_20process4},
  {"process5", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_23process5, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_22process5},
  {"process6", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_25process6, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_24process6},
  {"process7", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_27process7, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_26process7},
  {"process8", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_29process8, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_28process8},
  {"process9", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_31process9, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_30process9},
  {"process10", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_33process10, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_32process10},
  {"process11", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_35process11, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_34process11},
  {"process12", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_37process12, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_36process12},
  {"process13", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_39process13, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_38process13},
  {"process14", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_41process14, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_40process14},
  {"process15", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_43process15, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_42process15},
  {"process16", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_45process16, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_44process16},
  {"process17", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_47process17, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_46process17},
  {"process18", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_49process18, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_48process18},
  {"process19", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_51process19, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_50process19},
  {"process20", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_53process20, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_52process20},
  {"process21", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_55process21, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_54process21},
  {"process211", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_57process211, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_56process211},
  {"process212", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_59process212, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_58process212},
  {"process214", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_61process214, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_60process214},
  {"process22", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_63process22, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_62process22},
  {"process23", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_65process23, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_64process23},
  {"process24", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_67process24, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_66process24},
  {"process25", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_69process25, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_68process25},
  {"process26", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_71process26, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_70process26},
  {"process27", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_73process27, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_72process27},
  {"process28", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_75process28, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_74process28},
  {"process29", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_77process29, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_76process29},
  {"process30", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_79process30, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_78process30},
  {"process31", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_81process31, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_80process31},
  {"process32", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_83process32, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_82process32},
  {"process33", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_85process33, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_84process33},
  {"process34", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_87process34, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_86process34},
  {"process35", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_89process35, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_88process35},
  {"process36", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_91process36, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_90process36},
  {"process37", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_93process37, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_92process37},
  {"process38", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_95process38, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_94process38},
  {"process39", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_97process39, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_96process39},
  {"_process40_0", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_99_process40_0, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_98_process40_0},
  {"_process40_1", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_101_process40_1, METH_O, __pyx_doc_14py_libcpp_test_10LibCppTest_100_process40_1},
  {"process40", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14py_libcpp_test_10LibCppTest_103process40, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14py_libcpp_test_10LibCppTest_102process40},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_107__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_10LibCppTest_109__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14py_libcpp_test_LibCppTest[] = {
  {(char *)"integer_vector_ptr", __pyx_getprop_14py_libcpp_test_10LibCppTest_integer_vector_ptr, __pyx_setprop_14py_libcpp_test_10LibCppTest_integer_vector_ptr, (char *)0, 0},
  {(char *)"integer_ptr", __pyx_getprop_14py_libcpp_test_10LibCppTest_integer_ptr, __pyx_setprop_14py_libcpp_test_10LibCppTest_integer_ptr, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14py_libcpp_test_LibCppTest = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.LibCppTest", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test_LibCppTest), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test_LibCppTest, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_14py_libcpp_test_10LibCppTest_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Cython implementation of _LibCppTest\n\n    This is some class doc\n    Pretty cool stuff!\n    -----\n    With a trick, we can even get multiple paragraphs, allowing us to\n    write much longer documentation.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_14py_libcpp_test_10LibCppTest_105__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14py_libcpp_test_LibCppTest, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14py_libcpp_test_LibCppTest, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14py_libcpp_test_10LibCppTest_9__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test_LibCppTest, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_14py_libcpp_test_EEE(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test_EEE(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14py_libcpp_test_EEE[] = {
  {"getMapping", (PyCFunction)__pyx_pw_14py_libcpp_test_3EEE_1getMapping, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_3EEE_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14py_libcpp_test_3EEE_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14py_libcpp_test_EEE = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.EEE", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test_EEE), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test_EEE, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14py_libcpp_test_EEE, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test_EEE, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *__pyx_freelist_14py_libcpp_test___pyx_scope_struct__process[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct__process = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct__process(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct__process > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct__process[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct__process];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct__process(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct__process < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct__process[__pyx_freecount_14py_libcpp_test___pyx_scope_struct__process++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct__process(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct__process(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct__process = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct__process", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct__process), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct__process, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct__process, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct__process, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct__process, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_1_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_1_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_2_process6[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_2_process6 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_2_process6(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_2_process6 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_2_process6[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_2_process6];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_2_process6(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_2_process6 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_2_process6[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_2_process6++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_2_process6(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_2_process6(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_2_process6 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_2_process6", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_2_process6), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_2_process6, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_2_process6, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_2_process6, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_2_process6, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_3_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_3_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_4_process8[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_4_process8 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_4_process8(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_4_process8 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_4_process8[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_4_process8];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_4_process8(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_4_process8 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_4_process8[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_4_process8++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_4_process8(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_4_process8(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_4_process8 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_4_process8", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_4_process8), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_4_process8, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_4_process8, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_4_process8, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_4_process8, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_5_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_5_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_6_process9[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_6_process9 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_6_process9(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_6_process9 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_6_process9[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_6_process9];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_6_process9(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_6_process9 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_6_process9[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_6_process9++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_6_process9(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_6_process9(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_6_process9 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_6_process9", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_6_process9), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_6_process9, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_6_process9, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_6_process9, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_6_process9, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_7_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_7_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_8_process10[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_8_process10 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_8_process10(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_8_process10 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_8_process10[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_8_process10];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_8_process10(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_8_process10 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_8_process10[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_8_process10++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_8_process10(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_8_process10(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_8_process10 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_8_process10", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_8_process10), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_8_process10, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_8_process10, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_8_process10, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_8_process10, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_9_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_9_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_9_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_9_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_9_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_9_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_9_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_9_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_9_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_9_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_9_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_9_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_9_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_9_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_9_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_9_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_9_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_10_process11[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_10_process11 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_10_process11(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_10_process11 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_10_process11[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_10_process11];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_10_process11(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_10_process11 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_10_process11[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_10_process11++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_10_process11(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_10_process11(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_10_process11 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_10_process11", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_10_process11), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_10_process11, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_10_process11, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_10_process11, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_10_process11, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_11_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_11_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_11_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_11_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_11_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_11_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_12_process16[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_12_process16 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_12_process16(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_12_process16 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_12_process16[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_12_process16];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_12_process16(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_12_process16 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_12_process16[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_12_process16++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_12_process16(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_12_process16(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_12_process16 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_12_process16", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_12_process16), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_12_process16, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_12_process16, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_12_process16, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_12_process16, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_13_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_13_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_13_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_13_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_13_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_13_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_13_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_13_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_13_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_13_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_13_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_13_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_13_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_13_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_13_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_13_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_13_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_14_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_14_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_15_process17[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_15_process17 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_15_process17(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_15_process17 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_15_process17[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_15_process17];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_15_process17(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_15_process17 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_15_process17[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_15_process17++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_15_process17(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_15_process17(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_15_process17 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_15_process17", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_15_process17), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_15_process17, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_15_process17, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_15_process17, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_15_process17, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_16_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_16_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_16_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_16_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_16_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_16_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_16_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_16_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_16_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_16_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_16_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_16_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_16_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_16_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_16_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_16_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_16_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_17_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_17_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_17_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_17_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_17_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_17_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_17_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_17_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_17_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_17_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_17_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_17_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_17_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_17_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_17_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_17_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_17_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_18_process18[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_18_process18 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_18_process18(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_18_process18 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_18_process18[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_18_process18];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_18_process18(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_18_process18 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_18_process18[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_18_process18++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_18_process18(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_18_process18(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_18_process18 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_18_process18", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_18_process18), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_18_process18, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_18_process18, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_18_process18, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_18_process18, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_19_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_19_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_19_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_19_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_19_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_19_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_19_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_19_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_19_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_19_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_19_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_19_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_19_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_19_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_19_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_19_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_19_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_20_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_20_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_20_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_20_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_20_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_20_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_20_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_20_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_20_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_20_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_20_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_20_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_20_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_20_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_20_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_20_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_20_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_21_process19[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_21_process19 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_21_process19(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_21_process19 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_21_process19[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_21_process19];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_21_process19(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_21_process19 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_21_process19[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_21_process19++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_21_process19(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_21_process19(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_21_process19 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_21_process19", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_21_process19), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_21_process19, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_21_process19, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_21_process19, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_21_process19, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_22_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_22_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_22_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_22_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_22_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_22_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_22_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_22_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_22_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_22_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_22_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_22_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_22_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_22_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_22_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_22_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_22_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_23_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_23_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_23_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_23_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_23_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_23_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_23_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_23_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_23_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_23_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_23_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_23_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_23_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_23_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_23_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_23_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_23_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_24_process20[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_24_process20 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_24_process20(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_24_process20 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_24_process20[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_24_process20];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_24_process20(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_24_process20 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_24_process20[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_24_process20++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_24_process20(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_24_process20(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_24_process20 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_24_process20", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_24_process20), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_24_process20, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_24_process20, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_24_process20, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_24_process20, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_25_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_25_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_25_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_25_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_25_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_25_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_25_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_25_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_25_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_25_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_25_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_25_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_25_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_25_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_25_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_25_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_25_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_26_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_26_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_26_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_26_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_26_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_26_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_26_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_26_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_26_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_26_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_26_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_26_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_26_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_26_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_26_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_26_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_26_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_27_process21[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_27_process21 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_27_process21(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_27_process21 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_27_process21[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_27_process21];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_27_process21(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arg2);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_27_process21 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_27_process21[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_27_process21++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_27_process21(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *)o;
  if (p->__pyx_v_arg2) {
    e = (*v)(p->__pyx_v_arg2, a); if (e) return e;
  }
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_27_process21(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21 *)o;
  tmp = ((PyObject*)p->__pyx_v_arg2);
  p->__pyx_v_arg2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_27_process21 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_27_process21", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_27_process21), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_27_process21, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_27_process21, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_27_process21, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_27_process21, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_28_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_28_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_28_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_28_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_28_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_28_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_28_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_28_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_28_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_28_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_28_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_28_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_28_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_28_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_28_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_28_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_28_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_29_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_29_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_29_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_29_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_29_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_29_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_29_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_29_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_29_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_29_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_29_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_29_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_29_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_29_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_29_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_29_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_29_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_30_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_30_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_30_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_30_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_30_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_30_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_30_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_30_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_30_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_30_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_30_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_30_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_30_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_30_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_30_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_30_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_30_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_31_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_31_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_31_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_31_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_31_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_31_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_31_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_31_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_31_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_31_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_31_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_31_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_31_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_31_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_31_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_31_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_31_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_32_process211[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_32_process211 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_32_process211(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_32_process211 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_32_process211[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_32_process211];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_32_process211(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arg2);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_32_process211 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_32_process211[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_32_process211++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_32_process211(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *)o;
  if (p->__pyx_v_arg2) {
    e = (*v)(p->__pyx_v_arg2, a); if (e) return e;
  }
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_32_process211(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211 *)o;
  tmp = ((PyObject*)p->__pyx_v_arg2);
  p->__pyx_v_arg2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_32_process211 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_32_process211", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_32_process211), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_32_process211, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_32_process211, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_32_process211, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_32_process211, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_33_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_33_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_33_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_33_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_33_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_33_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_33_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_33_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_33_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_33_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_33_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_33_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_33_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_33_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_33_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_33_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_33_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_34_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_34_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_34_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_34_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_34_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_34_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_34_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_34_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_34_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_34_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_34_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_34_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_34_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_34_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_34_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_34_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_34_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_35_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_35_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_35_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_35_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_35_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_35_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_35_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_35_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_35_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_35_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_35_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_35_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_35_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_35_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_35_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_35_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_35_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_36_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_36_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_36_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_36_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_36_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_36_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_36_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_36_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_36_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_36_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_36_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_36_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_36_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_36_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_36_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_36_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_36_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_37_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_37_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_37_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_37_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_37_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_37_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_37_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_37_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_37_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_37_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_37_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_37_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_37_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_37_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_37_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_37_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_37_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_38_process212[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_38_process212 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_38_process212(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_38_process212 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_38_process212[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_38_process212];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_38_process212(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arg2);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_38_process212 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_38_process212[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_38_process212++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_38_process212(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *)o;
  if (p->__pyx_v_arg2) {
    e = (*v)(p->__pyx_v_arg2, a); if (e) return e;
  }
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_38_process212(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212 *)o;
  tmp = ((PyObject*)p->__pyx_v_arg2);
  p->__pyx_v_arg2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_38_process212 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_38_process212", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_38_process212), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_38_process212, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_38_process212, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_38_process212, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_38_process212, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_39_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_39_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_39_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_39_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_39_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_39_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_39_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_39_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_39_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_39_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_39_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_39_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_39_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_39_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_39_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_39_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_39_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_40_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_40_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_40_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_40_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_40_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_40_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_40_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_40_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_40_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_40_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_40_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_40_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_40_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_40_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_40_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_40_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_40_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_41_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_41_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_41_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_41_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_41_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_41_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_41_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_41_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_41_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_41_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_41_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_41_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_41_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_41_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_41_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_41_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_41_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_42_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_42_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_42_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_42_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_42_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_42_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_42_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_42_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_42_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_42_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_42_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_42_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_42_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_42_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_42_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_42_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_42_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_43_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_43_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_43_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_43_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_43_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_43_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_43_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_43_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_43_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_43_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_43_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_43_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_43_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_43_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_43_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_43_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_43_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_44_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_44_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_44_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_44_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_44_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_44_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_44_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_44_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_44_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_44_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_44_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_44_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_44_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_44_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_44_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_44_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_44_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_45_process214[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_45_process214 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_45_process214(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_45_process214 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_45_process214[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_45_process214];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_45_process214(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arg2);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_45_process214 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_45_process214[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_45_process214++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_45_process214(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *)o;
  if (p->__pyx_v_arg2) {
    e = (*v)(p->__pyx_v_arg2, a); if (e) return e;
  }
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_45_process214(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214 *)o;
  tmp = ((PyObject*)p->__pyx_v_arg2);
  p->__pyx_v_arg2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_45_process214 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_45_process214", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_45_process214), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_45_process214, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_45_process214, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_45_process214, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_45_process214, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_46_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_46_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_46_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_46_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_46_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_46_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_46_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_46_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_46_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_46_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_46_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_46_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_46_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_46_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_46_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_46_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_46_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_47_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_47_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_47_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_47_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_47_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_47_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_47_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_47_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_47_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_47_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_47_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_47_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_47_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_47_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_47_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_47_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_47_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_48_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_48_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_48_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_48_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_48_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_48_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_48_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_48_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_48_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_48_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_48_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_48_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_48_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_48_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_48_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_48_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_48_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_49_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_49_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_49_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_49_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_49_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_49_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_49_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_v_v);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_49_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_49_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_49_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_49_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_49_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_49_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_49_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_49_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_49_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_49_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_50_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_50_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_50_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_50_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_50_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_50_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_50_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_50_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_50_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_50_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_50_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_50_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_50_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_50_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_50_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_50_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_50_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_51_process22[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_51_process22 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_51_process22(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_51_process22 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_51_process22[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_51_process22];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_51_process22(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  Py_CLEAR(p->__pyx_v_in_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_51_process22 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_51_process22[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_51_process22++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_51_process22(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  if (p->__pyx_v_in_1) {
    e = (*v)(p->__pyx_v_in_1, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_51_process22(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_in_1);
  p->__pyx_v_in_1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_51_process22 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_51_process22", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_51_process22), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_51_process22, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_51_process22, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_51_process22, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_51_process22, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_52_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_52_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_52_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_52_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_52_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_52_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_52_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_52_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_52_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_52_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_52_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_52_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_52_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_52_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_52_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_52_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_52_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_53_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_53_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_53_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_53_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_53_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_53_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_53_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_53_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_53_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_53_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_53_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_53_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_53_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_53_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_53_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_53_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_53_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_54_process23[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_54_process23 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_54_process23(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_54_process23 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_54_process23[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_54_process23];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_54_process23(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  Py_CLEAR(p->__pyx_v_in_1);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_54_process23 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_54_process23[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_54_process23++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_54_process23(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  if (p->__pyx_v_in_1) {
    e = (*v)(p->__pyx_v_in_1, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_54_process23(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_in_1);
  p->__pyx_v_in_1 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_54_process23 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_54_process23", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_54_process23), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_54_process23, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_54_process23, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_54_process23, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_54_process23, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_55_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_55_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_55_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_55_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_55_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_55_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_55_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_55_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_55_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_55_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_55_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_55_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_55_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_55_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_55_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_55_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_55_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_56_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_56_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_56_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_56_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_56_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_56_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_56_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_56_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_56_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_56_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_56_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_56_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_56_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_56_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_56_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_56_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_56_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_57_process25[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_57_process25 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_57_process25(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_57_process25 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_57_process25[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_57_process25];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_57_process25(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_57_process25 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_57_process25[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_57_process25++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_57_process25(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_57_process25(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_57_process25 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_57_process25", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_57_process25), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_57_process25, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_57_process25, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_57_process25, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_57_process25, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_58_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_58_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_58_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_58_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_58_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_58_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_58_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_58_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_58_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_58_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_58_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_58_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_58_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_58_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_58_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_58_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_58_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_59_process26[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_59_process26 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_59_process26(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_59_process26 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_59_process26[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_59_process26];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_59_process26(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_59_process26 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_59_process26[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_59_process26++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_59_process26(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_59_process26(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_59_process26 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_59_process26", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_59_process26), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_59_process26, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_59_process26, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_59_process26, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_59_process26, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_60_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_60_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_60_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_60_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_60_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_60_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_60_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_60_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_60_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_60_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_60_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_60_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_60_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_60_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_60_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_60_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_60_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_61_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_61_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_61_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_61_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_61_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_61_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_61_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_61_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_61_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_61_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_61_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_61_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_61_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_61_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_61_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_61_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_61_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_62_process27[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_62_process27 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_62_process27(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_62_process27 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_62_process27[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_62_process27];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_62_process27(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_62_process27 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_62_process27[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_62_process27++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_62_process27(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_62_process27(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_62_process27 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_62_process27", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_62_process27), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_62_process27, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_62_process27, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_62_process27, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_62_process27, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_63_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_63_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_63_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_63_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_63_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_63_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_63_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_63_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_63_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_63_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_63_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_63_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_63_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_63_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_63_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_63_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_63_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_64_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_64_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_64_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_64_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_64_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_64_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_64_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_64_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_64_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_64_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_64_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_64_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_64_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_64_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_64_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_64_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_64_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_65_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_65_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_65_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_65_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_65_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_65_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_65_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_65_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_65_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_65_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_65_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_65_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_65_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_65_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_65_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_65_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_65_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_66_process28[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_66_process28 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_66_process28(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_66_process28 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_66_process28[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_66_process28];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_66_process28(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_66_process28 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_66_process28[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_66_process28++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_66_process28(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_66_process28(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_66_process28 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_66_process28", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_66_process28), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_66_process28, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_66_process28, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_66_process28, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_66_process28, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_67_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_67_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_67_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_67_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_67_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_67_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_67_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_67_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_67_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_67_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_67_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_67_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_67_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_67_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_67_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_67_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_67_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_68_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_68_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_68_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_68_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_68_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_68_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_68_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_68_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_68_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_68_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_68_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_68_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_68_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_68_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_68_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_68_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_68_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_69_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_69_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_69_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_69_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_69_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_69_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_69_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_69_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_69_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_69_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_69_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_69_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_69_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_69_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_69_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_69_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_69_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_70_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_70_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_70_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_70_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_70_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_70_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_70_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec_rec_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_70_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_70_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_70_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_70_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec_rec_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_70_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_70_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_70_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_70_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_70_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_70_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_71_process29[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_71_process29 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_71_process29(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_71_process29 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_71_process29[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_71_process29];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_71_process29(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_71_process29 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_71_process29[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_71_process29++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_71_process29(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_71_process29(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_71_process29 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_71_process29", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_71_process29), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_71_process29, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_71_process29, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_71_process29, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_71_process29, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_72_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_72_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_72_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_72_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_72_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_72_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_72_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_72_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_72_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_72_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_72_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_72_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_72_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_72_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_72_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_72_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_72_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_73_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_73_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_73_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_73_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_73_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_73_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_73_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_73_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_73_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_73_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_73_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_73_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_73_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_73_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_73_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_73_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_73_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_74_process30[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_74_process30 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_74_process30(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_74_process30 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_74_process30[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_74_process30];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_74_process30(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_74_process30 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_74_process30[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_74_process30++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_74_process30(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_74_process30(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_74_process30 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_74_process30", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_74_process30), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_74_process30, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_74_process30, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_74_process30, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_74_process30, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_75_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_75_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_75_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_75_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_75_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_75_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_75_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_75_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_75_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_75_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_75_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_75_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_75_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_75_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_75_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_75_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_75_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_76_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_76_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_76_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_76_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_76_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_76_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_76_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_76_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_76_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_76_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_76_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_76_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_76_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_76_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_76_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_76_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_76_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_77_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_77_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_77_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_77_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_77_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_77_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_77_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_77_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_77_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_77_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_77_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_77_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_77_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_77_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_77_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_77_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_77_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_78_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_78_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_78_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_78_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_78_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_78_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_78_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec_rec_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_78_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_78_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_78_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_78_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec_rec_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_78_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_78_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_78_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_78_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_78_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_78_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_79_process31[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_79_process31 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_79_process31(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_79_process31 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_79_process31[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_79_process31];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_79_process31(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_79_process31 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_79_process31[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_79_process31++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_79_process31(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_79_process31(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_79_process31 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_79_process31", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_79_process31), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_79_process31, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_79_process31, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_79_process31, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_79_process31, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_80_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_80_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_80_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_80_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_80_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_80_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_80_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_80_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_80_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_80_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_80_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_80_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_80_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_80_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_80_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_80_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_80_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_81_process32[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_81_process32 = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_81_process32(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_81_process32 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_81_process32[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_81_process32];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_81_process32(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_81_process32 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_81_process32[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_81_process32++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_81_process32(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *)o;
  if (p->__pyx_v_in_) {
    e = (*v)(p->__pyx_v_in_, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_81_process32(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_);
  p->__pyx_v_in_ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_81_process32 = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_81_process32", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_81_process32), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_81_process32, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_81_process32, /*tp_traverse*/
  __pyx_tp_clear_14py_libcpp_test___pyx_scope_struct_81_process32, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_81_process32, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_82_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_82_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_82_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_82_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_82_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_82_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_82_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_82_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_82_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_82_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_82_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_82_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_82_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_82_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_82_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_82_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_82_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *__pyx_freelist_14py_libcpp_test___pyx_scope_struct_83_genexpr[8];
static int __pyx_freecount_14py_libcpp_test___pyx_scope_struct_83_genexpr = 0;

static PyObject *__pyx_tp_new_14py_libcpp_test___pyx_scope_struct_83_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_83_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr)))) {
    o = (PyObject*)__pyx_freelist_14py_libcpp_test___pyx_scope_struct_83_genexpr[--__pyx_freecount_14py_libcpp_test___pyx_scope_struct_83_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_83_genexpr(PyObject *o) {
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14py_libcpp_test___pyx_scope_struct_83_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr)))) {
    __pyx_freelist_14py_libcpp_test___pyx_scope_struct_83_genexpr[__pyx_freecount_14py_libcpp_test___pyx_scope_struct_83_genexpr++] = ((struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_83_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *p = (struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14py_libcpp_test___pyx_scope_struct_83_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "py_libcpp_test.__pyx_scope_struct_83_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_14py_libcpp_test___pyx_scope_struct_83_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14py_libcpp_test___pyx_scope_struct_83_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14py_libcpp_test___pyx_scope_struct_83_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14py_libcpp_test___pyx_scope_struct_83_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_py_libcpp_test(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_py_libcpp_test},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "py_libcpp_test",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_ABS_Impl1, __pyx_k_ABS_Impl1, sizeof(__pyx_k_ABS_Impl1), 0, 0, 1, 1},
  {&__pyx_n_s_ABS_Impl2, __pyx_k_ABS_Impl2, sizeof(__pyx_k_ABS_Impl2), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_access_pointer_that_is_NU, __pyx_k_Cannot_access_pointer_that_is_NU, sizeof(__pyx_k_Cannot_access_pointer_that_is_NU), 0, 1, 0, 0},
  {&__pyx_n_s_EEE, __pyx_k_EEE, sizeof(__pyx_k_EEE), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_Int, __pyx_k_Int, sizeof(__pyx_k_Int), 0, 0, 1, 1},
  {&__pyx_n_s_LibCppTest, __pyx_k_LibCppTest, sizeof(__pyx_k_LibCppTest), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_arg2, __pyx_k_arg2, sizeof(__pyx_k_arg2), 0, 0, 1, 1},
  {&__pyx_kp_u_arg_arg2_wrong_type, __pyx_k_arg_arg2_wrong_type, sizeof(__pyx_k_arg_arg2_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_e_wrong_type, __pyx_k_arg_e_wrong_type, sizeof(__pyx_k_arg_e_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_f_wrong_type, __pyx_k_arg_f_wrong_type, sizeof(__pyx_k_arg_f_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_i_wrong_type, __pyx_k_arg_i_wrong_type, sizeof(__pyx_k_arg_i_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_ii_wrong_type, __pyx_k_arg_ii_wrong_type, sizeof(__pyx_k_arg_ii_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_in_0_wrong_type, __pyx_k_arg_in_0_wrong_type, sizeof(__pyx_k_arg_in_0_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_in_1_wrong_type, __pyx_k_arg_in_1_wrong_type, sizeof(__pyx_k_arg_in_1_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_in__wrong_type, __pyx_k_arg_in__wrong_type, sizeof(__pyx_k_arg_in__wrong_type), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_u_can_not_handle_type_of, __pyx_k_can_not_handle_type_of, sizeof(__pyx_k_can_not_handle_type_of), 0, 1, 0, 0},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_kp_u_comparions_operator_s_not_implem, __pyx_k_comparions_operator_s_not_implem, sizeof(__pyx_k_comparions_operator_s_not_implem), 0, 1, 0, 0},
  {&__pyx_n_u_createUnsafeObject, __pyx_k_createUnsafeObject, sizeof(__pyx_k_createUnsafeObject), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in, __pyx_k_in, sizeof(__pyx_k_in), 0, 0, 1, 1},
  {&__pyx_n_s_in_0, __pyx_k_in_0, sizeof(__pyx_k_in_0), 0, 0, 1, 1},
  {&__pyx_n_s_in_1, __pyx_k_in_1, sizeof(__pyx_k_in_1), 0, 0, 1, 1},
  {&__pyx_n_s_init_0, __pyx_k_init_0, sizeof(__pyx_k_init_0), 0, 0, 1, 1},
  {&__pyx_n_s_init_1, __pyx_k_init_1, sizeof(__pyx_k_init_1), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_process10_locals_genexpr, __pyx_k_process10_locals_genexpr, sizeof(__pyx_k_process10_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process11_locals_genexpr, __pyx_k_process11_locals_genexpr, sizeof(__pyx_k_process11_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process16_locals_genexpr, __pyx_k_process16_locals_genexpr, sizeof(__pyx_k_process16_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process17_locals_genexpr, __pyx_k_process17_locals_genexpr, sizeof(__pyx_k_process17_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process18_locals_genexpr, __pyx_k_process18_locals_genexpr, sizeof(__pyx_k_process18_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process19_locals_genexpr, __pyx_k_process19_locals_genexpr, sizeof(__pyx_k_process19_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process20_locals_genexpr, __pyx_k_process20_locals_genexpr, sizeof(__pyx_k_process20_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process211_locals_genexpr, __pyx_k_process211_locals_genexpr, sizeof(__pyx_k_process211_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process211_locals_genexpr_locals, __pyx_k_process211_locals_genexpr_locals, sizeof(__pyx_k_process211_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process212_locals_genexpr, __pyx_k_process212_locals_genexpr, sizeof(__pyx_k_process212_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process212_locals_genexpr_locals, __pyx_k_process212_locals_genexpr_locals, sizeof(__pyx_k_process212_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process212_locals_genexpr_locals_2, __pyx_k_process212_locals_genexpr_locals_2, sizeof(__pyx_k_process212_locals_genexpr_locals_2), 0, 0, 1, 1},
  {&__pyx_n_s_process214_locals_genexpr, __pyx_k_process214_locals_genexpr, sizeof(__pyx_k_process214_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process214_locals_genexpr_locals, __pyx_k_process214_locals_genexpr_locals, sizeof(__pyx_k_process214_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process21_locals_genexpr, __pyx_k_process21_locals_genexpr, sizeof(__pyx_k_process21_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process22_locals_genexpr, __pyx_k_process22_locals_genexpr, sizeof(__pyx_k_process22_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process23_locals_genexpr, __pyx_k_process23_locals_genexpr, sizeof(__pyx_k_process23_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process25_locals_genexpr, __pyx_k_process25_locals_genexpr, sizeof(__pyx_k_process25_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process26_locals_genexpr, __pyx_k_process26_locals_genexpr, sizeof(__pyx_k_process26_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process26_locals_genexpr_locals, __pyx_k_process26_locals_genexpr_locals, sizeof(__pyx_k_process26_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process27_locals_genexpr, __pyx_k_process27_locals_genexpr, sizeof(__pyx_k_process27_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process27_locals_genexpr_locals, __pyx_k_process27_locals_genexpr_locals, sizeof(__pyx_k_process27_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process27_locals_genexpr_locals_2, __pyx_k_process27_locals_genexpr_locals_2, sizeof(__pyx_k_process27_locals_genexpr_locals_2), 0, 0, 1, 1},
  {&__pyx_n_s_process28_locals_genexpr, __pyx_k_process28_locals_genexpr, sizeof(__pyx_k_process28_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process28_locals_genexpr_locals, __pyx_k_process28_locals_genexpr_locals, sizeof(__pyx_k_process28_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process28_locals_genexpr_locals_2, __pyx_k_process28_locals_genexpr_locals_2, sizeof(__pyx_k_process28_locals_genexpr_locals_2), 0, 0, 1, 1},
  {&__pyx_n_s_process28_locals_genexpr_locals_3, __pyx_k_process28_locals_genexpr_locals_3, sizeof(__pyx_k_process28_locals_genexpr_locals_3), 0, 0, 1, 1},
  {&__pyx_n_s_process29_locals_genexpr, __pyx_k_process29_locals_genexpr, sizeof(__pyx_k_process29_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process29_locals_genexpr_locals, __pyx_k_process29_locals_genexpr_locals, sizeof(__pyx_k_process29_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process30_locals_genexpr, __pyx_k_process30_locals_genexpr, sizeof(__pyx_k_process30_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process30_locals_genexpr_locals, __pyx_k_process30_locals_genexpr_locals, sizeof(__pyx_k_process30_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process30_locals_genexpr_locals_2, __pyx_k_process30_locals_genexpr_locals_2, sizeof(__pyx_k_process30_locals_genexpr_locals_2), 0, 0, 1, 1},
  {&__pyx_n_s_process30_locals_genexpr_locals_3, __pyx_k_process30_locals_genexpr_locals_3, sizeof(__pyx_k_process30_locals_genexpr_locals_3), 0, 0, 1, 1},
  {&__pyx_n_s_process31_locals_genexpr, __pyx_k_process31_locals_genexpr, sizeof(__pyx_k_process31_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process32_locals_genexpr, __pyx_k_process32_locals_genexpr, sizeof(__pyx_k_process32_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process32_locals_genexpr_locals, __pyx_k_process32_locals_genexpr_locals, sizeof(__pyx_k_process32_locals_genexpr_locals), 0, 0, 1, 1},
  {&__pyx_n_s_process40_0, __pyx_k_process40_0, sizeof(__pyx_k_process40_0), 0, 0, 1, 1},
  {&__pyx_n_s_process40_1, __pyx_k_process40_1, sizeof(__pyx_k_process40_1), 0, 0, 1, 1},
  {&__pyx_n_s_process6_locals_genexpr, __pyx_k_process6_locals_genexpr, sizeof(__pyx_k_process6_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process8_locals_genexpr, __pyx_k_process8_locals_genexpr, sizeof(__pyx_k_process8_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process9_locals_genexpr, __pyx_k_process9_locals_genexpr, sizeof(__pyx_k_process9_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_process_locals_genexpr, __pyx_k_process_locals_genexpr, sizeof(__pyx_k_process_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_py_libcpp_test, __pyx_k_py_libcpp_test, sizeof(__pyx_k_py_libcpp_test), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_EEE, __pyx_k_pyx_unpickle_EEE, sizeof(__pyx_k_pyx_unpickle_EEE), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_s_self_inst_cannot_be_converted_to, __pyx_k_self_inst_cannot_be_converted_to, sizeof(__pyx_k_self_inst_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 61, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "py_libcpp_test.pyx":196
 *         def __get__(self):
 *             if self.inst.get().integer_vector_ptr is NULL:
 *                  raise Exception("Cannot access pointer that is NULL")             # <<<<<<<<<<<<<<
 *             _r = deref(self.inst.get().integer_vector_ptr)
 *             py_result = []
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Cannot_access_pointer_that_is_NU); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":1
 * def __pyx_unpickle_EEE(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__16 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_EEE, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_update.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PySet_Type_update.type = (PyObject*)&PySet_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_14py_libcpp_test_ABS_Impl1) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test_ABS_Impl1.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test_ABS_Impl1.tp_dictoffset && __pyx_type_14py_libcpp_test_ABS_Impl1.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test_ABS_Impl1.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_14py_libcpp_test_ABS_Impl1, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 27, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_14py_libcpp_test_9ABS_Impl1_6__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_14py_libcpp_test_9ABS_Impl1_6__init__.doc = __pyx_doc_14py_libcpp_test_9ABS_Impl1_6__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_14py_libcpp_test_9ABS_Impl1_6__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ABS_Impl1, (PyObject *)&__pyx_type_14py_libcpp_test_ABS_Impl1) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14py_libcpp_test_ABS_Impl1) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  __pyx_ptype_14py_libcpp_test_ABS_Impl1 = &__pyx_type_14py_libcpp_test_ABS_Impl1;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test_ABS_Impl2) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test_ABS_Impl2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test_ABS_Impl2.tp_dictoffset && __pyx_type_14py_libcpp_test_ABS_Impl2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test_ABS_Impl2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_14py_libcpp_test_ABS_Impl2, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 67, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_14py_libcpp_test_9ABS_Impl2_6__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_14py_libcpp_test_9ABS_Impl2_6__init__.doc = __pyx_doc_14py_libcpp_test_9ABS_Impl2_6__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_14py_libcpp_test_9ABS_Impl2_6__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ABS_Impl2, (PyObject *)&__pyx_type_14py_libcpp_test_ABS_Impl2) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14py_libcpp_test_ABS_Impl2) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  __pyx_ptype_14py_libcpp_test_ABS_Impl2 = &__pyx_type_14py_libcpp_test_ABS_Impl2;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test_Int) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test_Int.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test_Int.tp_dictoffset && __pyx_type_14py_libcpp_test_Int.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test_Int.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_14py_libcpp_test_Int, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 107, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_14py_libcpp_test_3Int_10__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_14py_libcpp_test_3Int_10__init__.doc = __pyx_doc_14py_libcpp_test_3Int_10__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_14py_libcpp_test_3Int_10__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Int, (PyObject *)&__pyx_type_14py_libcpp_test_Int) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14py_libcpp_test_Int) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  __pyx_ptype_14py_libcpp_test_Int = &__pyx_type_14py_libcpp_test_Int;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test_LibCppTest) < 0) __PYX_ERR(1, 163, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test_LibCppTest.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test_LibCppTest.tp_dictoffset && __pyx_type_14py_libcpp_test_LibCppTest.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test_LibCppTest.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_14py_libcpp_test_LibCppTest, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 163, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_14py_libcpp_test_10LibCppTest_8__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_14py_libcpp_test_10LibCppTest_8__init__.doc = __pyx_doc_14py_libcpp_test_10LibCppTest_8__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_14py_libcpp_test_10LibCppTest_8__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibCppTest, (PyObject *)&__pyx_type_14py_libcpp_test_LibCppTest) < 0) __PYX_ERR(1, 163, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14py_libcpp_test_LibCppTest) < 0) __PYX_ERR(1, 163, __pyx_L1_error)
  __pyx_ptype_14py_libcpp_test_LibCppTest = &__pyx_type_14py_libcpp_test_LibCppTest;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test_EEE) < 0) __PYX_ERR(1, 1051, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test_EEE.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test_EEE.tp_dictoffset && __pyx_type_14py_libcpp_test_EEE.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test_EEE.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EEE, (PyObject *)&__pyx_type_14py_libcpp_test_EEE) < 0) __PYX_ERR(1, 1051, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14py_libcpp_test_EEE) < 0) __PYX_ERR(1, 1051, __pyx_L1_error)
  __pyx_ptype_14py_libcpp_test_EEE = &__pyx_type_14py_libcpp_test_EEE;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct__process) < 0) __PYX_ERR(1, 267, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct__process.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct__process.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct__process.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct__process.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct__process = &__pyx_type_14py_libcpp_test___pyx_scope_struct__process;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(1, 269, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_1_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_2_process6) < 0) __PYX_ERR(1, 336, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_2_process6.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_2_process6.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_2_process6.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_2_process6.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_2_process6 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_2_process6;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(1, 338, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_3_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_3_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_4_process8) < 0) __PYX_ERR(1, 357, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_4_process8.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_4_process8.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_4_process8.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_4_process8.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_4_process8 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_4_process8;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(1, 359, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_5_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_5_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_5_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_5_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_5_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_6_process9) < 0) __PYX_ERR(1, 379, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_6_process9.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_6_process9.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_6_process9.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_6_process9.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_6_process9 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_6_process9;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(1, 381, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_7_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_7_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_7_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_7_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_7_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_7_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_8_process10) < 0) __PYX_ERR(1, 389, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_8_process10.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_8_process10.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_8_process10.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_8_process10.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_8_process10 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_8_process10;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_9_genexpr) < 0) __PYX_ERR(1, 391, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_9_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_9_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_9_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_9_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_9_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_9_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_10_process11) < 0) __PYX_ERR(1, 412, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_10_process11.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_10_process11.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_10_process11.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_10_process11.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_10_process11 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_10_process11;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(1, 414, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_11_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_11_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_11_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_11_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_11_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_11_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_12_process16) < 0) __PYX_ERR(1, 497, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_12_process16.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_12_process16.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_12_process16.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_12_process16.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_12_process16 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_12_process16;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(1, 499, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_13_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_13_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_13_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_13_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_13_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_13_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(1, 499, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_14_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_14_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_14_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_14_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_14_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_14_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_15_process17) < 0) __PYX_ERR(1, 512, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_15_process17.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_15_process17.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_15_process17.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_15_process17.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_15_process17 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_15_process17;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_16_genexpr) < 0) __PYX_ERR(1, 514, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_16_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_16_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_16_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_16_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_16_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_16_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_17_genexpr) < 0) __PYX_ERR(1, 514, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_17_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_17_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_17_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_17_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_17_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_17_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_18_process18) < 0) __PYX_ERR(1, 527, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_18_process18.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_18_process18.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_18_process18.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_18_process18.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_18_process18 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_18_process18;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_19_genexpr) < 0) __PYX_ERR(1, 529, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_19_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_19_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_19_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_19_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_19_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_19_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_20_genexpr) < 0) __PYX_ERR(1, 529, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_20_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_20_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_20_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_20_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_20_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_20_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_21_process19) < 0) __PYX_ERR(1, 542, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_21_process19.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_21_process19.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_21_process19.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_21_process19.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_21_process19 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_21_process19;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_22_genexpr) < 0) __PYX_ERR(1, 544, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_22_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_22_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_22_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_22_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_22_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_22_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_23_genexpr) < 0) __PYX_ERR(1, 544, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_23_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_23_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_23_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_23_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_23_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_23_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_24_process20) < 0) __PYX_ERR(1, 565, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_24_process20.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_24_process20.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_24_process20.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_24_process20.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_24_process20 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_24_process20;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_25_genexpr) < 0) __PYX_ERR(1, 567, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_25_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_25_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_25_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_25_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_25_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_25_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_26_genexpr) < 0) __PYX_ERR(1, 567, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_26_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_26_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_26_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_26_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_26_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_26_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_27_process21) < 0) __PYX_ERR(1, 585, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_27_process21.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_27_process21.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_27_process21.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_27_process21.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_27_process21 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_27_process21;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_28_genexpr) < 0) __PYX_ERR(1, 587, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_28_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_28_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_28_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_28_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_28_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_28_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_29_genexpr) < 0) __PYX_ERR(1, 587, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_29_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_29_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_29_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_29_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_29_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_29_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_30_genexpr) < 0) __PYX_ERR(1, 588, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_30_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_30_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_30_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_30_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_30_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_30_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_31_genexpr) < 0) __PYX_ERR(1, 588, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_31_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_31_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_31_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_31_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_31_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_31_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_32_process211) < 0) __PYX_ERR(1, 621, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_32_process211.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_32_process211.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_32_process211.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_32_process211.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_32_process211 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_32_process211;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_33_genexpr) < 0) __PYX_ERR(1, 623, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_33_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_33_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_33_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_33_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_33_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_33_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_34_genexpr) < 0) __PYX_ERR(1, 623, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_34_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_34_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_34_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_34_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_34_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_34_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_35_genexpr) < 0) __PYX_ERR(1, 624, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_35_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_35_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_35_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_35_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_35_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_35_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_36_genexpr) < 0) __PYX_ERR(1, 624, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_36_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_36_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_36_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_36_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_36_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_36_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_37_genexpr) < 0) __PYX_ERR(1, 624, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_37_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_37_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_37_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_37_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_37_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_37_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_38_process212) < 0) __PYX_ERR(1, 658, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_38_process212.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_38_process212.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_38_process212.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_38_process212.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_38_process212 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_38_process212;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_39_genexpr) < 0) __PYX_ERR(1, 660, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_39_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_39_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_39_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_39_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_39_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_39_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_40_genexpr) < 0) __PYX_ERR(1, 660, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_40_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_40_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_40_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_40_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_40_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_40_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_41_genexpr) < 0) __PYX_ERR(1, 661, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_41_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_41_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_41_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_41_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_41_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_41_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_42_genexpr) < 0) __PYX_ERR(1, 661, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_42_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_42_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_42_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_42_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_42_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_42_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_43_genexpr) < 0) __PYX_ERR(1, 661, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_43_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_43_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_43_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_43_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_43_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_43_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_44_genexpr) < 0) __PYX_ERR(1, 661, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_44_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_44_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_44_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_44_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_44_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_44_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_45_process214) < 0) __PYX_ERR(1, 695, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_45_process214.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_45_process214.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_45_process214.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_45_process214.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_45_process214 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_45_process214;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_46_genexpr) < 0) __PYX_ERR(1, 697, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_46_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_46_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_46_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_46_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_46_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_46_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_47_genexpr) < 0) __PYX_ERR(1, 697, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_47_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_47_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_47_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_47_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_47_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_47_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_48_genexpr) < 0) __PYX_ERR(1, 698, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_48_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_48_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_48_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_48_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_48_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_48_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_49_genexpr) < 0) __PYX_ERR(1, 698, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_49_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_49_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_49_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_49_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_49_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_49_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_50_genexpr) < 0) __PYX_ERR(1, 698, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_50_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_50_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_50_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_50_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_50_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_50_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_51_process22) < 0) __PYX_ERR(1, 732, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_51_process22.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_51_process22.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_51_process22.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_51_process22.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_51_process22 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_51_process22;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_52_genexpr) < 0) __PYX_ERR(1, 734, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_52_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_52_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_52_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_52_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_52_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_52_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_53_genexpr) < 0) __PYX_ERR(1, 735, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_53_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_53_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_53_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_53_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_53_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_53_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_54_process23) < 0) __PYX_ERR(1, 744, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_54_process23.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_54_process23.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_54_process23.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_54_process23.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_54_process23 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_54_process23;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_55_genexpr) < 0) __PYX_ERR(1, 746, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_55_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_55_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_55_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_55_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_55_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_55_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_56_genexpr) < 0) __PYX_ERR(1, 747, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_56_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_56_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_56_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_56_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_56_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_56_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_57_process25) < 0) __PYX_ERR(1, 768, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_57_process25.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_57_process25.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_57_process25.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_57_process25.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_57_process25 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_57_process25;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_58_genexpr) < 0) __PYX_ERR(1, 770, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_58_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_58_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_58_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_58_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_58_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_58_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_59_process26) < 0) __PYX_ERR(1, 780, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_59_process26.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_59_process26.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_59_process26.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_59_process26.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_59_process26 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_59_process26;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_60_genexpr) < 0) __PYX_ERR(1, 782, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_60_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_60_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_60_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_60_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_60_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_60_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_61_genexpr) < 0) __PYX_ERR(1, 782, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_61_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_61_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_61_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_61_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_61_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_61_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_62_process27) < 0) __PYX_ERR(1, 797, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_62_process27.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_62_process27.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_62_process27.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_62_process27.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_62_process27 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_62_process27;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_63_genexpr) < 0) __PYX_ERR(1, 799, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_63_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_63_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_63_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_63_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_63_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_63_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_64_genexpr) < 0) __PYX_ERR(1, 799, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_64_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_64_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_64_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_64_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_64_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_64_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_65_genexpr) < 0) __PYX_ERR(1, 799, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_65_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_65_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_65_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_65_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_65_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_65_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_66_process28) < 0) __PYX_ERR(1, 819, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_66_process28.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_66_process28.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_66_process28.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_66_process28.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_66_process28 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_66_process28;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_67_genexpr) < 0) __PYX_ERR(1, 821, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_67_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_67_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_67_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_67_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_67_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_67_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_68_genexpr) < 0) __PYX_ERR(1, 821, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_68_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_68_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_68_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_68_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_68_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_68_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_69_genexpr) < 0) __PYX_ERR(1, 821, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_69_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_69_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_69_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_69_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_69_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_69_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_70_genexpr) < 0) __PYX_ERR(1, 821, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_70_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_70_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_70_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_70_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_70_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_70_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_71_process29) < 0) __PYX_ERR(1, 846, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_71_process29.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_71_process29.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_71_process29.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_71_process29.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_71_process29 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_71_process29;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_72_genexpr) < 0) __PYX_ERR(1, 848, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_72_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_72_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_72_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_72_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_72_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_72_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_73_genexpr) < 0) __PYX_ERR(1, 848, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_73_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_73_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_73_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_73_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_73_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_73_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_74_process30) < 0) __PYX_ERR(1, 874, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_74_process30.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_74_process30.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_74_process30.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_74_process30.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_74_process30 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_74_process30;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_75_genexpr) < 0) __PYX_ERR(1, 876, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_75_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_75_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_75_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_75_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_75_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_75_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_76_genexpr) < 0) __PYX_ERR(1, 876, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_76_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_76_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_76_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_76_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_76_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_76_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_77_genexpr) < 0) __PYX_ERR(1, 876, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_77_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_77_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_77_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_77_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_77_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_77_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_78_genexpr) < 0) __PYX_ERR(1, 876, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_78_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_78_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_78_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_78_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_78_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_78_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_79_process31) < 0) __PYX_ERR(1, 922, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_79_process31.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_79_process31.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_79_process31.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_79_process31.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_79_process31 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_79_process31;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_80_genexpr) < 0) __PYX_ERR(1, 924, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_80_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_80_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_80_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_80_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_80_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_80_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_81_process32) < 0) __PYX_ERR(1, 931, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_81_process32.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_81_process32.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_81_process32.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_81_process32.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_81_process32 = &__pyx_type_14py_libcpp_test___pyx_scope_struct_81_process32;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_82_genexpr) < 0) __PYX_ERR(1, 933, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_82_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_82_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_82_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_82_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_82_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_82_genexpr;
  if (PyType_Ready(&__pyx_type_14py_libcpp_test___pyx_scope_struct_83_genexpr) < 0) __PYX_ERR(1, 933, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14py_libcpp_test___pyx_scope_struct_83_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14py_libcpp_test___pyx_scope_struct_83_genexpr.tp_dictoffset && __pyx_type_14py_libcpp_test___pyx_scope_struct_83_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14py_libcpp_test___pyx_scope_struct_83_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14py_libcpp_test___pyx_scope_struct_83_genexpr = &__pyx_type_14py_libcpp_test___pyx_scope_struct_83_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpy_libcpp_test(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpy_libcpp_test(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_py_libcpp_test(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_py_libcpp_test(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_py_libcpp_test(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'py_libcpp_test' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_py_libcpp_test(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("py_libcpp_test", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_py_libcpp_test) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "py_libcpp_test")) {
      if (unlikely(PyDict_SetItemString(modules, "py_libcpp_test", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "py_libcpp_test.pyx":1052
 * 
 * cdef class EEE:
 *     A = 0             # <<<<<<<<<<<<<<
 *     B = 1
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14py_libcpp_test_EEE->tp_dict, __pyx_n_s_A, __pyx_int_0) < 0) __PYX_ERR(1, 1052, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_14py_libcpp_test_EEE);

  /* "py_libcpp_test.pyx":1053
 * cdef class EEE:
 *     A = 0
 *     B = 1             # <<<<<<<<<<<<<<
 * 
 *     def getMapping(self):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14py_libcpp_test_EEE->tp_dict, __pyx_n_s_B, __pyx_int_1) < 0) __PYX_ERR(1, 1053, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_14py_libcpp_test_EEE);

  /* "(tree fragment)":1
 * def __pyx_unpickle_EEE(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14py_libcpp_test_1__pyx_unpickle_EEE, NULL, __pyx_n_s_py_libcpp_test); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_EEE, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_libcpp_test.pyx":1
 * #cython: c_string_encoding=ascii  # for cython>=0.19             # <<<<<<<<<<<<<<
 * #cython: embedsignature=False
 * from  libcpp.string  cimport string as libcpp_string
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_11libcpp_test_UInt_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init py_libcpp_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init py_libcpp_test");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* SliceObject */
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* py_dict_values */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_values, d);
    else
        return PyDict_Values(d);
}

/* py_dict_items */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__EEE(enum EEE value) {
    const enum EEE neg_one = (enum EEE) ((enum EEE) 0 - (enum EEE) 1), const_zero = (enum EEE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum EEE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum EEE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum EEE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum EEE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum EEE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum EEE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum EEE __Pyx_PyInt_As_enum__EEE(PyObject *x) {
    const enum EEE neg_one = (enum EEE) ((enum EEE) 0 - (enum EEE) 1), const_zero = (enum EEE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum EEE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum EEE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum EEE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum EEE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum EEE, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum EEE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) >= 2 * PyLong_SHIFT) {
                            return (enum EEE) (((((enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum EEE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) >= 3 * PyLong_SHIFT) {
                            return (enum EEE) (((((((enum EEE)digits[2]) << PyLong_SHIFT) | (enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum EEE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) >= 4 * PyLong_SHIFT) {
                            return (enum EEE) (((((((((enum EEE)digits[3]) << PyLong_SHIFT) | (enum EEE)digits[2]) << PyLong_SHIFT) | (enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum EEE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum EEE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EEE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum EEE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EEE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum EEE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum EEE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum EEE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum EEE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum EEE) (((enum EEE)-1)*(((((enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum EEE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum EEE) ((((((enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum EEE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum EEE) (((enum EEE)-1)*(((((((enum EEE)digits[2]) << PyLong_SHIFT) | (enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum EEE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum EEE) ((((((((enum EEE)digits[2]) << PyLong_SHIFT) | (enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum EEE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum EEE) (((enum EEE)-1)*(((((((((enum EEE)digits[3]) << PyLong_SHIFT) | (enum EEE)digits[2]) << PyLong_SHIFT) | (enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum EEE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EEE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EEE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum EEE) ((((((((((enum EEE)digits[3]) << PyLong_SHIFT) | (enum EEE)digits[2]) << PyLong_SHIFT) | (enum EEE)digits[1]) << PyLong_SHIFT) | (enum EEE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum EEE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EEE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum EEE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EEE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum EEE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum EEE) -1;
        }
    } else {
        enum EEE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum EEE) -1;
        val = __Pyx_PyInt_As_enum__EEE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum EEE");
    return (enum EEE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum EEE");
    return (enum EEE) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
